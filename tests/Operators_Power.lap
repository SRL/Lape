{$assertions on}

var
  f32:Single = 3;
  f64:Double = 3;
  f80:Extended = 3;
  si8:Int8 = 3;
  ui8:uInt8 = 3;
  si16:Int16 = 3;
  ui16:uInt16 = 3;
  si32:Int32 = 3;
  ui32:uInt32 = 3;
  si64:Int64 = 3;
  ui64:uInt64 = 3;


procedure TestPower();
begin
  Assert((f32 ** f64) = 27);
  Assert((f32 ** f80) = 27);
  Assert((f32 ** si8) = 27);
  Assert((f32 ** ui8) = 27);
  Assert((f32 ** si16) = 27);
  Assert((f32 ** ui16) = 27);
  Assert((f32 ** si32) = 27);
  Assert((f32 ** ui32) = 27);
  Assert((f32 ** si64) = 27);
  Assert((f32 ** ui64) = 27);
  Assert((f64 ** f32) = 27);
  Assert((f64 ** f80) = 27);
  Assert((f64 ** si8) = 27);
  Assert((f64 ** ui8) = 27);
  Assert((f64 ** si16) = 27);
  Assert((f64 ** ui16) = 27);
  Assert((f64 ** si32) = 27);
  Assert((f64 ** ui32) = 27);
  Assert((f64 ** si64) = 27);
  Assert((f64 ** ui64) = 27);
  Assert((f80 ** f32) = 27);
  Assert((f80 ** f64) = 27);
  Assert((f80 ** si8) = 27);
  Assert((f80 ** ui8) = 27);
  Assert((f80 ** si16) = 27);
  Assert((f80 ** ui16) = 27);
  Assert((f80 ** si32) = 27);
  Assert((f80 ** ui32) = 27);
  Assert((f80 ** si64) = 27);
  Assert((f80 ** ui64) = 27);
  Assert((si8 ** f32) = 27);
  Assert((si8 ** f64) = 27);
  Assert((si8 ** f80) = 27);
  Assert((si8 ** ui8) = 27);
  Assert((si8 ** si16) = 27);
  Assert((si8 ** ui16) = 27);
  Assert((si8 ** si32) = 27);
  Assert((si8 ** ui32) = 27);
  Assert((si8 ** si64) = 27);
  Assert((si8 ** ui64) = 27);
  Assert((ui8 ** f32) = 27);
  Assert((ui8 ** f64) = 27);
  Assert((ui8 ** f80) = 27);
  Assert((ui8 ** si8) = 27);
  Assert((ui8 ** si16) = 27);
  Assert((ui8 ** ui16) = 27);
  Assert((ui8 ** si32) = 27);
  Assert((ui8 ** ui32) = 27);
  Assert((ui8 ** si64) = 27);
  Assert((ui8 ** ui64) = 27);
  Assert((si16 ** f32) = 27);
  Assert((si16 ** f64) = 27);
  Assert((si16 ** f80) = 27);
  Assert((si16 ** si8) = 27);
  Assert((si16 ** ui8) = 27);
  Assert((si16 ** ui16) = 27);
  Assert((si16 ** si32) = 27);
  Assert((si16 ** ui32) = 27);
  Assert((si16 ** si64) = 27);
  Assert((si16 ** ui64) = 27);
  Assert((ui16 ** f32) = 27);
  Assert((ui16 ** f64) = 27);
  Assert((ui16 ** f80) = 27);
  Assert((ui16 ** si8) = 27);
  Assert((ui16 ** ui8) = 27);
  Assert((ui16 ** si16) = 27);
  Assert((ui16 ** si32) = 27);
  Assert((ui16 ** ui32) = 27);
  Assert((ui16 ** si64) = 27);
  Assert((ui16 ** ui64) = 27);
  Assert((si32 ** f32) = 27);
  Assert((si32 ** f64) = 27);
  Assert((si32 ** f80) = 27);
  Assert((si32 ** si8) = 27);
  Assert((si32 ** ui8) = 27);
  Assert((si32 ** si16) = 27);
  Assert((si32 ** ui16) = 27);
  Assert((si32 ** ui32) = 27);
  Assert((si32 ** si64) = 27);
  Assert((si32 ** ui64) = 27);
  Assert((ui32 ** f32) = 27);
  Assert((ui32 ** f64) = 27);
  Assert((ui32 ** f80) = 27);
  Assert((ui32 ** si8) = 27);
  Assert((ui32 ** ui8) = 27);
  Assert((ui32 ** si16) = 27);
  Assert((ui32 ** ui16) = 27);
  Assert((ui32 ** si32) = 27);
  Assert((ui32 ** si64) = 27);
  Assert((ui32 ** ui64) = 27);
  Assert((si64 ** f32) = 27);
  Assert((si64 ** f64) = 27);
  Assert((si64 ** f80) = 27);
  Assert((si64 ** si8) = 27);
  Assert((si64 ** ui8) = 27);
  Assert((si64 ** si16) = 27);
  Assert((si64 ** ui16) = 27);
  Assert((si64 ** si32) = 27);
  Assert((si64 ** ui32) = 27);
  Assert((si64 ** ui64) = 27);
  Assert((ui64 ** f32) = 27);
  Assert((ui64 ** f64) = 27);
  Assert((ui64 ** f80) = 27);
  Assert((ui64 ** si8) = 27);
  Assert((ui64 ** ui8) = 27);
  Assert((ui64 ** si16) = 27);
  Assert((ui64 ** ui16) = 27);
  Assert((ui64 ** si32) = 27);
  Assert((ui64 ** ui32) = 27);
  Assert((ui64 ** si64) = 27);
  Assert((f32 ** f32) = 27);
  Assert((f64 ** f64) = 27);
  Assert((f80 ** f80) = 27);
  Assert((si8 ** si8) = 27);
  Assert((ui8 ** ui8) = 27);
  Assert((si16 ** si16) = 27);
  Assert((ui16 ** ui16) = 27);
  Assert((si32 ** si32) = 27);
  Assert((ui32 ** ui32) = 27);
  Assert((si64 ** si64) = 27);
  Assert((ui64 ** ui64) = 27);
end;


begin
  TestPower(); WriteLn('Power :: Passed');
end;

