{
  Author: Niels A.D
  Project: Lape (http://code.google.com/p/la-pe/)
  License: GNU Lesser GPL (http://www.gnu.org/licenses/lgpl.html)

  This include constains all the operation handling functions for most evaluations.
}
{%MainUnit lpeval.pas}

procedure lpeByteBool_EQ_ByteBool(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := (PUInt8(Left)^ > 0) = (PUInt8(Right)^ > 0); end;
procedure lpeByteBool_NEQ_ByteBool(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := (PUInt8(Left)^ > 0) <> (PUInt8(Right)^ > 0); end;
//...
procedure lpeUInt8_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PUInt8(Right)^; end;
procedure lpeUInt8_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PInt8(Right)^; end;
procedure lpeUInt8_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PUInt16(Right)^; end;
procedure lpeUInt8_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PInt16(Right)^; end;
procedure lpeUInt8_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PUInt32(Right)^; end;
procedure lpeUInt8_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PInt32(Right)^; end;
procedure lpeUInt8_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PUInt64(Right)^; end;
procedure lpeUInt8_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PInt64(Right)^; end;
procedure lpeUInt8_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PSingle(Right)^; end;
procedure lpeUInt8_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PDouble(Right)^; end;
procedure lpeUInt8_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PCurrency(Right)^; end;
procedure lpeUInt8_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PExtended(Right)^; end;
procedure lpeUInt8_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ = PVariant(Right)^; end;
procedure lpeInt8_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PUInt8(Right)^; end;
procedure lpeInt8_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PInt8(Right)^; end;
procedure lpeInt8_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PUInt16(Right)^; end;
procedure lpeInt8_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PInt16(Right)^; end;
procedure lpeInt8_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PUInt32(Right)^; end;
procedure lpeInt8_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PInt32(Right)^; end;
procedure lpeInt8_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PUInt64(Right)^; end;
procedure lpeInt8_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PInt64(Right)^; end;
procedure lpeInt8_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PSingle(Right)^; end;
procedure lpeInt8_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PDouble(Right)^; end;
procedure lpeInt8_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PCurrency(Right)^; end;
procedure lpeInt8_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PExtended(Right)^; end;
procedure lpeInt8_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ = PVariant(Right)^; end;
procedure lpeUInt16_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PUInt8(Right)^; end;
procedure lpeUInt16_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PInt8(Right)^; end;
procedure lpeUInt16_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PUInt16(Right)^; end;
procedure lpeUInt16_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PInt16(Right)^; end;
procedure lpeUInt16_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PUInt32(Right)^; end;
procedure lpeUInt16_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PInt32(Right)^; end;
procedure lpeUInt16_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PUInt64(Right)^; end;
procedure lpeUInt16_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PInt64(Right)^; end;
procedure lpeUInt16_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PSingle(Right)^; end;
procedure lpeUInt16_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PDouble(Right)^; end;
procedure lpeUInt16_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PCurrency(Right)^; end;
procedure lpeUInt16_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PExtended(Right)^; end;
procedure lpeUInt16_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ = PVariant(Right)^; end;
procedure lpeInt16_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PUInt8(Right)^; end;
procedure lpeInt16_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PInt8(Right)^; end;
procedure lpeInt16_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PUInt16(Right)^; end;
procedure lpeInt16_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PInt16(Right)^; end;
procedure lpeInt16_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PUInt32(Right)^; end;
procedure lpeInt16_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PInt32(Right)^; end;
procedure lpeInt16_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PUInt64(Right)^; end;
procedure lpeInt16_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PInt64(Right)^; end;
procedure lpeInt16_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PSingle(Right)^; end;
procedure lpeInt16_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PDouble(Right)^; end;
procedure lpeInt16_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PCurrency(Right)^; end;
procedure lpeInt16_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PExtended(Right)^; end;
procedure lpeInt16_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ = PVariant(Right)^; end;
procedure lpeUInt32_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PUInt8(Right)^; end;
procedure lpeUInt32_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PInt8(Right)^; end;
procedure lpeUInt32_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PUInt16(Right)^; end;
procedure lpeUInt32_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PInt16(Right)^; end;
procedure lpeUInt32_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PUInt32(Right)^; end;
procedure lpeUInt32_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PInt32(Right)^; end;
procedure lpeUInt32_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PUInt64(Right)^; end;
procedure lpeUInt32_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PInt64(Right)^; end;
procedure lpeUInt32_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PSingle(Right)^; end;
procedure lpeUInt32_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PDouble(Right)^; end;
procedure lpeUInt32_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PCurrency(Right)^; end;
procedure lpeUInt32_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PExtended(Right)^; end;
procedure lpeUInt32_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ = PVariant(Right)^; end;
procedure lpeInt32_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PUInt8(Right)^; end;
procedure lpeInt32_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PInt8(Right)^; end;
procedure lpeInt32_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PUInt16(Right)^; end;
procedure lpeInt32_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PInt16(Right)^; end;
procedure lpeInt32_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PUInt32(Right)^; end;
procedure lpeInt32_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PInt32(Right)^; end;
procedure lpeInt32_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PUInt64(Right)^; end;
procedure lpeInt32_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PInt64(Right)^; end;
procedure lpeInt32_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PSingle(Right)^; end;
procedure lpeInt32_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PDouble(Right)^; end;
procedure lpeInt32_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PCurrency(Right)^; end;
procedure lpeInt32_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PExtended(Right)^; end;
procedure lpeInt32_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ = PVariant(Right)^; end;
procedure lpeUInt64_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PUInt8(Right)^; end;
procedure lpeUInt64_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PInt8(Right)^; end;
procedure lpeUInt64_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PUInt16(Right)^; end;
procedure lpeUInt64_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PInt16(Right)^; end;
procedure lpeUInt64_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PUInt32(Right)^; end;
procedure lpeUInt64_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PInt32(Right)^; end;
procedure lpeUInt64_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PUInt64(Right)^; end;
procedure lpeUInt64_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PInt64(Right)^; end;
procedure lpeUInt64_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PSingle(Right)^; end;
procedure lpeUInt64_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PDouble(Right)^; end;
procedure lpeUInt64_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PCurrency(Right)^; end;
procedure lpeUInt64_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PExtended(Right)^; end;
procedure lpeUInt64_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ = PVariant(Right)^; end;
procedure lpeInt64_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PUInt8(Right)^; end;
procedure lpeInt64_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PInt8(Right)^; end;
procedure lpeInt64_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PUInt16(Right)^; end;
procedure lpeInt64_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PInt16(Right)^; end;
procedure lpeInt64_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PUInt32(Right)^; end;
procedure lpeInt64_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PInt32(Right)^; end;
procedure lpeInt64_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PUInt64(Right)^; end;
procedure lpeInt64_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PInt64(Right)^; end;
procedure lpeInt64_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PSingle(Right)^; end;
procedure lpeInt64_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PDouble(Right)^; end;
procedure lpeInt64_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PCurrency(Right)^; end;
procedure lpeInt64_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PExtended(Right)^; end;
procedure lpeInt64_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ = PVariant(Right)^; end;
procedure lpeSingle_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PUInt8(Right)^; end;
procedure lpeSingle_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PInt8(Right)^; end;
procedure lpeSingle_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PUInt16(Right)^; end;
procedure lpeSingle_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PInt16(Right)^; end;
procedure lpeSingle_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PUInt32(Right)^; end;
procedure lpeSingle_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PInt32(Right)^; end;
procedure lpeSingle_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PUInt64(Right)^; end;
procedure lpeSingle_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PInt64(Right)^; end;
procedure lpeSingle_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PSingle(Right)^; end;
procedure lpeSingle_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PDouble(Right)^; end;
procedure lpeSingle_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PCurrency(Right)^; end;
procedure lpeSingle_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PExtended(Right)^; end;
procedure lpeSingle_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ = PVariant(Right)^; end;
procedure lpeDouble_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PUInt8(Right)^; end;
procedure lpeDouble_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PInt8(Right)^; end;
procedure lpeDouble_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PUInt16(Right)^; end;
procedure lpeDouble_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PInt16(Right)^; end;
procedure lpeDouble_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PUInt32(Right)^; end;
procedure lpeDouble_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PInt32(Right)^; end;
procedure lpeDouble_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PUInt64(Right)^; end;
procedure lpeDouble_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PInt64(Right)^; end;
procedure lpeDouble_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PSingle(Right)^; end;
procedure lpeDouble_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PDouble(Right)^; end;
procedure lpeDouble_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PCurrency(Right)^; end;
procedure lpeDouble_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PExtended(Right)^; end;
procedure lpeDouble_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ = PVariant(Right)^; end;
procedure lpeCurrency_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PUInt8(Right)^; end;
procedure lpeCurrency_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PInt8(Right)^; end;
procedure lpeCurrency_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PUInt16(Right)^; end;
procedure lpeCurrency_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PInt16(Right)^; end;
procedure lpeCurrency_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PUInt32(Right)^; end;
procedure lpeCurrency_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PInt32(Right)^; end;
procedure lpeCurrency_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PUInt64(Right)^; end;
procedure lpeCurrency_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PInt64(Right)^; end;
procedure lpeCurrency_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PSingle(Right)^; end;
procedure lpeCurrency_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PDouble(Right)^; end;
procedure lpeCurrency_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PCurrency(Right)^; end;
procedure lpeCurrency_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PExtended(Right)^; end;
procedure lpeCurrency_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ = PVariant(Right)^; end;
procedure lpeExtended_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PUInt8(Right)^; end;
procedure lpeExtended_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PInt8(Right)^; end;
procedure lpeExtended_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PUInt16(Right)^; end;
procedure lpeExtended_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PInt16(Right)^; end;
procedure lpeExtended_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PUInt32(Right)^; end;
procedure lpeExtended_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PInt32(Right)^; end;
procedure lpeExtended_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PUInt64(Right)^; end;
procedure lpeExtended_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PInt64(Right)^; end;
procedure lpeExtended_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PSingle(Right)^; end;
procedure lpeExtended_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PDouble(Right)^; end;
procedure lpeExtended_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PCurrency(Right)^; end;
procedure lpeExtended_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PExtended(Right)^; end;
procedure lpeExtended_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ = PVariant(Right)^; end;
procedure lpeVariant_EQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PUInt8(Right)^; end;
procedure lpeVariant_EQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PInt8(Right)^; end;
procedure lpeVariant_EQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PUInt16(Right)^; end;
procedure lpeVariant_EQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PInt16(Right)^; end;
procedure lpeVariant_EQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PUInt32(Right)^; end;
procedure lpeVariant_EQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PInt32(Right)^; end;
procedure lpeVariant_EQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PUInt64(Right)^; end;
procedure lpeVariant_EQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PInt64(Right)^; end;
procedure lpeVariant_EQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PSingle(Right)^; end;
procedure lpeVariant_EQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PDouble(Right)^; end;
procedure lpeVariant_EQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PCurrency(Right)^; end;
procedure lpeVariant_EQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PExtended(Right)^; end;
procedure lpeVariant_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ = PVariant(Right)^; end;
procedure lpeUInt8_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PUInt8(Right)^; end;
procedure lpeUInt8_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PInt8(Right)^; end;
procedure lpeUInt8_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PUInt16(Right)^; end;
procedure lpeUInt8_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PInt16(Right)^; end;
procedure lpeUInt8_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PUInt32(Right)^; end;
procedure lpeUInt8_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PInt32(Right)^; end;
procedure lpeUInt8_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PUInt64(Right)^; end;
procedure lpeUInt8_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PInt64(Right)^; end;
procedure lpeUInt8_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PSingle(Right)^; end;
procedure lpeUInt8_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PDouble(Right)^; end;
procedure lpeUInt8_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PCurrency(Right)^; end;
procedure lpeUInt8_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PExtended(Right)^; end;
procedure lpeUInt8_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ > PVariant(Right)^; end;
procedure lpeInt8_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PUInt8(Right)^; end;
procedure lpeInt8_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PInt8(Right)^; end;
procedure lpeInt8_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PUInt16(Right)^; end;
procedure lpeInt8_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PInt16(Right)^; end;
procedure lpeInt8_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PUInt32(Right)^; end;
procedure lpeInt8_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PInt32(Right)^; end;
procedure lpeInt8_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PUInt64(Right)^; end;
procedure lpeInt8_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PInt64(Right)^; end;
procedure lpeInt8_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PSingle(Right)^; end;
procedure lpeInt8_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PDouble(Right)^; end;
procedure lpeInt8_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PCurrency(Right)^; end;
procedure lpeInt8_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PExtended(Right)^; end;
procedure lpeInt8_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ > PVariant(Right)^; end;
procedure lpeUInt16_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PUInt8(Right)^; end;
procedure lpeUInt16_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PInt8(Right)^; end;
procedure lpeUInt16_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PUInt16(Right)^; end;
procedure lpeUInt16_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PInt16(Right)^; end;
procedure lpeUInt16_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PUInt32(Right)^; end;
procedure lpeUInt16_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PInt32(Right)^; end;
procedure lpeUInt16_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PUInt64(Right)^; end;
procedure lpeUInt16_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PInt64(Right)^; end;
procedure lpeUInt16_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PSingle(Right)^; end;
procedure lpeUInt16_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PDouble(Right)^; end;
procedure lpeUInt16_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PCurrency(Right)^; end;
procedure lpeUInt16_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PExtended(Right)^; end;
procedure lpeUInt16_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ > PVariant(Right)^; end;
procedure lpeInt16_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PUInt8(Right)^; end;
procedure lpeInt16_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PInt8(Right)^; end;
procedure lpeInt16_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PUInt16(Right)^; end;
procedure lpeInt16_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PInt16(Right)^; end;
procedure lpeInt16_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PUInt32(Right)^; end;
procedure lpeInt16_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PInt32(Right)^; end;
procedure lpeInt16_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PUInt64(Right)^; end;
procedure lpeInt16_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PInt64(Right)^; end;
procedure lpeInt16_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PSingle(Right)^; end;
procedure lpeInt16_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PDouble(Right)^; end;
procedure lpeInt16_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PCurrency(Right)^; end;
procedure lpeInt16_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PExtended(Right)^; end;
procedure lpeInt16_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ > PVariant(Right)^; end;
procedure lpeUInt32_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PUInt8(Right)^; end;
procedure lpeUInt32_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PInt8(Right)^; end;
procedure lpeUInt32_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PUInt16(Right)^; end;
procedure lpeUInt32_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PInt16(Right)^; end;
procedure lpeUInt32_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PUInt32(Right)^; end;
procedure lpeUInt32_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PInt32(Right)^; end;
procedure lpeUInt32_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PUInt64(Right)^; end;
procedure lpeUInt32_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PInt64(Right)^; end;
procedure lpeUInt32_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PSingle(Right)^; end;
procedure lpeUInt32_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PDouble(Right)^; end;
procedure lpeUInt32_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PCurrency(Right)^; end;
procedure lpeUInt32_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PExtended(Right)^; end;
procedure lpeUInt32_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ > PVariant(Right)^; end;
procedure lpeInt32_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PUInt8(Right)^; end;
procedure lpeInt32_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PInt8(Right)^; end;
procedure lpeInt32_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PUInt16(Right)^; end;
procedure lpeInt32_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PInt16(Right)^; end;
procedure lpeInt32_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PUInt32(Right)^; end;
procedure lpeInt32_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PInt32(Right)^; end;
procedure lpeInt32_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PUInt64(Right)^; end;
procedure lpeInt32_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PInt64(Right)^; end;
procedure lpeInt32_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PSingle(Right)^; end;
procedure lpeInt32_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PDouble(Right)^; end;
procedure lpeInt32_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PCurrency(Right)^; end;
procedure lpeInt32_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PExtended(Right)^; end;
procedure lpeInt32_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ > PVariant(Right)^; end;
procedure lpeUInt64_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PUInt8(Right)^; end;
procedure lpeUInt64_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PInt8(Right)^; end;
procedure lpeUInt64_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PUInt16(Right)^; end;
procedure lpeUInt64_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PInt16(Right)^; end;
procedure lpeUInt64_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PUInt32(Right)^; end;
procedure lpeUInt64_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PInt32(Right)^; end;
procedure lpeUInt64_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PUInt64(Right)^; end;
procedure lpeUInt64_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PInt64(Right)^; end;
procedure lpeUInt64_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PSingle(Right)^; end;
procedure lpeUInt64_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PDouble(Right)^; end;
procedure lpeUInt64_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PCurrency(Right)^; end;
procedure lpeUInt64_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PExtended(Right)^; end;
procedure lpeUInt64_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ > PVariant(Right)^; end;
procedure lpeInt64_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PUInt8(Right)^; end;
procedure lpeInt64_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PInt8(Right)^; end;
procedure lpeInt64_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PUInt16(Right)^; end;
procedure lpeInt64_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PInt16(Right)^; end;
procedure lpeInt64_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PUInt32(Right)^; end;
procedure lpeInt64_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PInt32(Right)^; end;
procedure lpeInt64_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PUInt64(Right)^; end;
procedure lpeInt64_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PInt64(Right)^; end;
procedure lpeInt64_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PSingle(Right)^; end;
procedure lpeInt64_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PDouble(Right)^; end;
procedure lpeInt64_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PCurrency(Right)^; end;
procedure lpeInt64_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PExtended(Right)^; end;
procedure lpeInt64_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ > PVariant(Right)^; end;
procedure lpeSingle_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PUInt8(Right)^; end;
procedure lpeSingle_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PInt8(Right)^; end;
procedure lpeSingle_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PUInt16(Right)^; end;
procedure lpeSingle_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PInt16(Right)^; end;
procedure lpeSingle_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PUInt32(Right)^; end;
procedure lpeSingle_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PInt32(Right)^; end;
procedure lpeSingle_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PUInt64(Right)^; end;
procedure lpeSingle_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PInt64(Right)^; end;
procedure lpeSingle_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PSingle(Right)^; end;
procedure lpeSingle_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PDouble(Right)^; end;
procedure lpeSingle_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PCurrency(Right)^; end;
procedure lpeSingle_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PExtended(Right)^; end;
procedure lpeSingle_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ > PVariant(Right)^; end;
procedure lpeDouble_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PUInt8(Right)^; end;
procedure lpeDouble_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PInt8(Right)^; end;
procedure lpeDouble_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PUInt16(Right)^; end;
procedure lpeDouble_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PInt16(Right)^; end;
procedure lpeDouble_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PUInt32(Right)^; end;
procedure lpeDouble_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PInt32(Right)^; end;
procedure lpeDouble_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PUInt64(Right)^; end;
procedure lpeDouble_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PInt64(Right)^; end;
procedure lpeDouble_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PSingle(Right)^; end;
procedure lpeDouble_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PDouble(Right)^; end;
procedure lpeDouble_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PCurrency(Right)^; end;
procedure lpeDouble_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PExtended(Right)^; end;
procedure lpeDouble_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ > PVariant(Right)^; end;
procedure lpeCurrency_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PUInt8(Right)^; end;
procedure lpeCurrency_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PInt8(Right)^; end;
procedure lpeCurrency_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PUInt16(Right)^; end;
procedure lpeCurrency_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PInt16(Right)^; end;
procedure lpeCurrency_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PUInt32(Right)^; end;
procedure lpeCurrency_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PInt32(Right)^; end;
procedure lpeCurrency_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PUInt64(Right)^; end;
procedure lpeCurrency_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PInt64(Right)^; end;
procedure lpeCurrency_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PSingle(Right)^; end;
procedure lpeCurrency_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PDouble(Right)^; end;
procedure lpeCurrency_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PCurrency(Right)^; end;
procedure lpeCurrency_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PExtended(Right)^; end;
procedure lpeCurrency_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ > PVariant(Right)^; end;
procedure lpeExtended_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PUInt8(Right)^; end;
procedure lpeExtended_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PInt8(Right)^; end;
procedure lpeExtended_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PUInt16(Right)^; end;
procedure lpeExtended_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PInt16(Right)^; end;
procedure lpeExtended_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PUInt32(Right)^; end;
procedure lpeExtended_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PInt32(Right)^; end;
procedure lpeExtended_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PUInt64(Right)^; end;
procedure lpeExtended_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PInt64(Right)^; end;
procedure lpeExtended_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PSingle(Right)^; end;
procedure lpeExtended_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PDouble(Right)^; end;
procedure lpeExtended_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PCurrency(Right)^; end;
procedure lpeExtended_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PExtended(Right)^; end;
procedure lpeExtended_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ > PVariant(Right)^; end;
procedure lpeVariant_GT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PUInt8(Right)^; end;
procedure lpeVariant_GT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PInt8(Right)^; end;
procedure lpeVariant_GT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PUInt16(Right)^; end;
procedure lpeVariant_GT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PInt16(Right)^; end;
procedure lpeVariant_GT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PUInt32(Right)^; end;
procedure lpeVariant_GT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PInt32(Right)^; end;
procedure lpeVariant_GT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PUInt64(Right)^; end;
procedure lpeVariant_GT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PInt64(Right)^; end;
procedure lpeVariant_GT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PSingle(Right)^; end;
procedure lpeVariant_GT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PDouble(Right)^; end;
procedure lpeVariant_GT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PCurrency(Right)^; end;
procedure lpeVariant_GT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PExtended(Right)^; end;
procedure lpeVariant_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ > PVariant(Right)^; end;
procedure lpeUInt8_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PUInt8(Right)^; end;
procedure lpeUInt8_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PInt8(Right)^; end;
procedure lpeUInt8_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PUInt16(Right)^; end;
procedure lpeUInt8_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PInt16(Right)^; end;
procedure lpeUInt8_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PUInt32(Right)^; end;
procedure lpeUInt8_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PInt32(Right)^; end;
procedure lpeUInt8_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PUInt64(Right)^; end;
procedure lpeUInt8_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PInt64(Right)^; end;
procedure lpeUInt8_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PSingle(Right)^; end;
procedure lpeUInt8_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PDouble(Right)^; end;
procedure lpeUInt8_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PCurrency(Right)^; end;
procedure lpeUInt8_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PExtended(Right)^; end;
procedure lpeUInt8_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ >= PVariant(Right)^; end;
procedure lpeInt8_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PUInt8(Right)^; end;
procedure lpeInt8_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PInt8(Right)^; end;
procedure lpeInt8_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PUInt16(Right)^; end;
procedure lpeInt8_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PInt16(Right)^; end;
procedure lpeInt8_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PUInt32(Right)^; end;
procedure lpeInt8_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PInt32(Right)^; end;
procedure lpeInt8_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PUInt64(Right)^; end;
procedure lpeInt8_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PInt64(Right)^; end;
procedure lpeInt8_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PSingle(Right)^; end;
procedure lpeInt8_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PDouble(Right)^; end;
procedure lpeInt8_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PCurrency(Right)^; end;
procedure lpeInt8_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PExtended(Right)^; end;
procedure lpeInt8_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ >= PVariant(Right)^; end;
procedure lpeUInt16_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PUInt8(Right)^; end;
procedure lpeUInt16_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PInt8(Right)^; end;
procedure lpeUInt16_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PUInt16(Right)^; end;
procedure lpeUInt16_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PInt16(Right)^; end;
procedure lpeUInt16_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PUInt32(Right)^; end;
procedure lpeUInt16_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PInt32(Right)^; end;
procedure lpeUInt16_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PUInt64(Right)^; end;
procedure lpeUInt16_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PInt64(Right)^; end;
procedure lpeUInt16_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PSingle(Right)^; end;
procedure lpeUInt16_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PDouble(Right)^; end;
procedure lpeUInt16_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PCurrency(Right)^; end;
procedure lpeUInt16_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PExtended(Right)^; end;
procedure lpeUInt16_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ >= PVariant(Right)^; end;
procedure lpeInt16_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PUInt8(Right)^; end;
procedure lpeInt16_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PInt8(Right)^; end;
procedure lpeInt16_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PUInt16(Right)^; end;
procedure lpeInt16_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PInt16(Right)^; end;
procedure lpeInt16_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PUInt32(Right)^; end;
procedure lpeInt16_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PInt32(Right)^; end;
procedure lpeInt16_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PUInt64(Right)^; end;
procedure lpeInt16_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PInt64(Right)^; end;
procedure lpeInt16_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PSingle(Right)^; end;
procedure lpeInt16_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PDouble(Right)^; end;
procedure lpeInt16_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PCurrency(Right)^; end;
procedure lpeInt16_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PExtended(Right)^; end;
procedure lpeInt16_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ >= PVariant(Right)^; end;
procedure lpeUInt32_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PUInt8(Right)^; end;
procedure lpeUInt32_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PInt8(Right)^; end;
procedure lpeUInt32_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PUInt16(Right)^; end;
procedure lpeUInt32_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PInt16(Right)^; end;
procedure lpeUInt32_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PUInt32(Right)^; end;
procedure lpeUInt32_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PInt32(Right)^; end;
procedure lpeUInt32_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PUInt64(Right)^; end;
procedure lpeUInt32_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PInt64(Right)^; end;
procedure lpeUInt32_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PSingle(Right)^; end;
procedure lpeUInt32_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PDouble(Right)^; end;
procedure lpeUInt32_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PCurrency(Right)^; end;
procedure lpeUInt32_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PExtended(Right)^; end;
procedure lpeUInt32_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ >= PVariant(Right)^; end;
procedure lpeInt32_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PUInt8(Right)^; end;
procedure lpeInt32_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PInt8(Right)^; end;
procedure lpeInt32_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PUInt16(Right)^; end;
procedure lpeInt32_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PInt16(Right)^; end;
procedure lpeInt32_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PUInt32(Right)^; end;
procedure lpeInt32_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PInt32(Right)^; end;
procedure lpeInt32_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PUInt64(Right)^; end;
procedure lpeInt32_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PInt64(Right)^; end;
procedure lpeInt32_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PSingle(Right)^; end;
procedure lpeInt32_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PDouble(Right)^; end;
procedure lpeInt32_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PCurrency(Right)^; end;
procedure lpeInt32_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PExtended(Right)^; end;
procedure lpeInt32_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ >= PVariant(Right)^; end;
procedure lpeUInt64_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PUInt8(Right)^; end;
procedure lpeUInt64_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PInt8(Right)^; end;
procedure lpeUInt64_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PUInt16(Right)^; end;
procedure lpeUInt64_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PInt16(Right)^; end;
procedure lpeUInt64_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PUInt32(Right)^; end;
procedure lpeUInt64_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PInt32(Right)^; end;
procedure lpeUInt64_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PUInt64(Right)^; end;
procedure lpeUInt64_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PInt64(Right)^; end;
procedure lpeUInt64_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PSingle(Right)^; end;
procedure lpeUInt64_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PDouble(Right)^; end;
procedure lpeUInt64_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PCurrency(Right)^; end;
procedure lpeUInt64_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PExtended(Right)^; end;
procedure lpeUInt64_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ >= PVariant(Right)^; end;
procedure lpeInt64_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PUInt8(Right)^; end;
procedure lpeInt64_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PInt8(Right)^; end;
procedure lpeInt64_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PUInt16(Right)^; end;
procedure lpeInt64_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PInt16(Right)^; end;
procedure lpeInt64_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PUInt32(Right)^; end;
procedure lpeInt64_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PInt32(Right)^; end;
procedure lpeInt64_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PUInt64(Right)^; end;
procedure lpeInt64_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PInt64(Right)^; end;
procedure lpeInt64_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PSingle(Right)^; end;
procedure lpeInt64_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PDouble(Right)^; end;
procedure lpeInt64_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PCurrency(Right)^; end;
procedure lpeInt64_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PExtended(Right)^; end;
procedure lpeInt64_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ >= PVariant(Right)^; end;
procedure lpeSingle_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PUInt8(Right)^; end;
procedure lpeSingle_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PInt8(Right)^; end;
procedure lpeSingle_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PUInt16(Right)^; end;
procedure lpeSingle_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PInt16(Right)^; end;
procedure lpeSingle_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PUInt32(Right)^; end;
procedure lpeSingle_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PInt32(Right)^; end;
procedure lpeSingle_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PUInt64(Right)^; end;
procedure lpeSingle_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PInt64(Right)^; end;
procedure lpeSingle_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PSingle(Right)^; end;
procedure lpeSingle_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PDouble(Right)^; end;
procedure lpeSingle_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PCurrency(Right)^; end;
procedure lpeSingle_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PExtended(Right)^; end;
procedure lpeSingle_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ >= PVariant(Right)^; end;
procedure lpeDouble_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PUInt8(Right)^; end;
procedure lpeDouble_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PInt8(Right)^; end;
procedure lpeDouble_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PUInt16(Right)^; end;
procedure lpeDouble_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PInt16(Right)^; end;
procedure lpeDouble_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PUInt32(Right)^; end;
procedure lpeDouble_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PInt32(Right)^; end;
procedure lpeDouble_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PUInt64(Right)^; end;
procedure lpeDouble_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PInt64(Right)^; end;
procedure lpeDouble_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PSingle(Right)^; end;
procedure lpeDouble_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PDouble(Right)^; end;
procedure lpeDouble_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PCurrency(Right)^; end;
procedure lpeDouble_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PExtended(Right)^; end;
procedure lpeDouble_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ >= PVariant(Right)^; end;
procedure lpeCurrency_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PUInt8(Right)^; end;
procedure lpeCurrency_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PInt8(Right)^; end;
procedure lpeCurrency_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PUInt16(Right)^; end;
procedure lpeCurrency_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PInt16(Right)^; end;
procedure lpeCurrency_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PUInt32(Right)^; end;
procedure lpeCurrency_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PInt32(Right)^; end;
procedure lpeCurrency_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PUInt64(Right)^; end;
procedure lpeCurrency_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PInt64(Right)^; end;
procedure lpeCurrency_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PSingle(Right)^; end;
procedure lpeCurrency_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PDouble(Right)^; end;
procedure lpeCurrency_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PCurrency(Right)^; end;
procedure lpeCurrency_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PExtended(Right)^; end;
procedure lpeCurrency_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ >= PVariant(Right)^; end;
procedure lpeExtended_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PUInt8(Right)^; end;
procedure lpeExtended_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PInt8(Right)^; end;
procedure lpeExtended_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PUInt16(Right)^; end;
procedure lpeExtended_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PInt16(Right)^; end;
procedure lpeExtended_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PUInt32(Right)^; end;
procedure lpeExtended_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PInt32(Right)^; end;
procedure lpeExtended_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PUInt64(Right)^; end;
procedure lpeExtended_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PInt64(Right)^; end;
procedure lpeExtended_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PSingle(Right)^; end;
procedure lpeExtended_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PDouble(Right)^; end;
procedure lpeExtended_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PCurrency(Right)^; end;
procedure lpeExtended_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PExtended(Right)^; end;
procedure lpeExtended_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ >= PVariant(Right)^; end;
procedure lpeVariant_GTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PUInt8(Right)^; end;
procedure lpeVariant_GTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PInt8(Right)^; end;
procedure lpeVariant_GTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PUInt16(Right)^; end;
procedure lpeVariant_GTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PInt16(Right)^; end;
procedure lpeVariant_GTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PUInt32(Right)^; end;
procedure lpeVariant_GTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PInt32(Right)^; end;
procedure lpeVariant_GTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PUInt64(Right)^; end;
procedure lpeVariant_GTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PInt64(Right)^; end;
procedure lpeVariant_GTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PSingle(Right)^; end;
procedure lpeVariant_GTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PDouble(Right)^; end;
procedure lpeVariant_GTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PCurrency(Right)^; end;
procedure lpeVariant_GTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PExtended(Right)^; end;
procedure lpeVariant_GTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ >= PVariant(Right)^; end;
procedure lpeUInt8_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PUInt8(Right)^; end;
procedure lpeUInt8_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PInt8(Right)^; end;
procedure lpeUInt8_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PUInt16(Right)^; end;
procedure lpeUInt8_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PInt16(Right)^; end;
procedure lpeUInt8_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PUInt32(Right)^; end;
procedure lpeUInt8_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PInt32(Right)^; end;
procedure lpeUInt8_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PUInt64(Right)^; end;
procedure lpeUInt8_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PInt64(Right)^; end;
procedure lpeUInt8_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PSingle(Right)^; end;
procedure lpeUInt8_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PDouble(Right)^; end;
procedure lpeUInt8_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PCurrency(Right)^; end;
procedure lpeUInt8_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PExtended(Right)^; end;
procedure lpeUInt8_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ < PVariant(Right)^; end;
procedure lpeInt8_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PUInt8(Right)^; end;
procedure lpeInt8_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PInt8(Right)^; end;
procedure lpeInt8_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PUInt16(Right)^; end;
procedure lpeInt8_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PInt16(Right)^; end;
procedure lpeInt8_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PUInt32(Right)^; end;
procedure lpeInt8_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PInt32(Right)^; end;
procedure lpeInt8_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PUInt64(Right)^; end;
procedure lpeInt8_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PInt64(Right)^; end;
procedure lpeInt8_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PSingle(Right)^; end;
procedure lpeInt8_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PDouble(Right)^; end;
procedure lpeInt8_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PCurrency(Right)^; end;
procedure lpeInt8_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PExtended(Right)^; end;
procedure lpeInt8_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ < PVariant(Right)^; end;
procedure lpeUInt16_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PUInt8(Right)^; end;
procedure lpeUInt16_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PInt8(Right)^; end;
procedure lpeUInt16_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PUInt16(Right)^; end;
procedure lpeUInt16_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PInt16(Right)^; end;
procedure lpeUInt16_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PUInt32(Right)^; end;
procedure lpeUInt16_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PInt32(Right)^; end;
procedure lpeUInt16_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PUInt64(Right)^; end;
procedure lpeUInt16_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PInt64(Right)^; end;
procedure lpeUInt16_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PSingle(Right)^; end;
procedure lpeUInt16_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PDouble(Right)^; end;
procedure lpeUInt16_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PCurrency(Right)^; end;
procedure lpeUInt16_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PExtended(Right)^; end;
procedure lpeUInt16_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ < PVariant(Right)^; end;
procedure lpeInt16_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PUInt8(Right)^; end;
procedure lpeInt16_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PInt8(Right)^; end;
procedure lpeInt16_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PUInt16(Right)^; end;
procedure lpeInt16_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PInt16(Right)^; end;
procedure lpeInt16_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PUInt32(Right)^; end;
procedure lpeInt16_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PInt32(Right)^; end;
procedure lpeInt16_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PUInt64(Right)^; end;
procedure lpeInt16_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PInt64(Right)^; end;
procedure lpeInt16_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PSingle(Right)^; end;
procedure lpeInt16_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PDouble(Right)^; end;
procedure lpeInt16_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PCurrency(Right)^; end;
procedure lpeInt16_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PExtended(Right)^; end;
procedure lpeInt16_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ < PVariant(Right)^; end;
procedure lpeUInt32_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PUInt8(Right)^; end;
procedure lpeUInt32_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PInt8(Right)^; end;
procedure lpeUInt32_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PUInt16(Right)^; end;
procedure lpeUInt32_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PInt16(Right)^; end;
procedure lpeUInt32_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PUInt32(Right)^; end;
procedure lpeUInt32_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PInt32(Right)^; end;
procedure lpeUInt32_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PUInt64(Right)^; end;
procedure lpeUInt32_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PInt64(Right)^; end;
procedure lpeUInt32_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PSingle(Right)^; end;
procedure lpeUInt32_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PDouble(Right)^; end;
procedure lpeUInt32_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PCurrency(Right)^; end;
procedure lpeUInt32_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PExtended(Right)^; end;
procedure lpeUInt32_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ < PVariant(Right)^; end;
procedure lpeInt32_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PUInt8(Right)^; end;
procedure lpeInt32_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PInt8(Right)^; end;
procedure lpeInt32_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PUInt16(Right)^; end;
procedure lpeInt32_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PInt16(Right)^; end;
procedure lpeInt32_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PUInt32(Right)^; end;
procedure lpeInt32_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PInt32(Right)^; end;
procedure lpeInt32_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PUInt64(Right)^; end;
procedure lpeInt32_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PInt64(Right)^; end;
procedure lpeInt32_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PSingle(Right)^; end;
procedure lpeInt32_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PDouble(Right)^; end;
procedure lpeInt32_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PCurrency(Right)^; end;
procedure lpeInt32_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PExtended(Right)^; end;
procedure lpeInt32_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ < PVariant(Right)^; end;
procedure lpeUInt64_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PUInt8(Right)^; end;
procedure lpeUInt64_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PInt8(Right)^; end;
procedure lpeUInt64_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PUInt16(Right)^; end;
procedure lpeUInt64_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PInt16(Right)^; end;
procedure lpeUInt64_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PUInt32(Right)^; end;
procedure lpeUInt64_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PInt32(Right)^; end;
procedure lpeUInt64_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PUInt64(Right)^; end;
procedure lpeUInt64_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PInt64(Right)^; end;
procedure lpeUInt64_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PSingle(Right)^; end;
procedure lpeUInt64_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PDouble(Right)^; end;
procedure lpeUInt64_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PCurrency(Right)^; end;
procedure lpeUInt64_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PExtended(Right)^; end;
procedure lpeUInt64_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ < PVariant(Right)^; end;
procedure lpeInt64_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PUInt8(Right)^; end;
procedure lpeInt64_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PInt8(Right)^; end;
procedure lpeInt64_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PUInt16(Right)^; end;
procedure lpeInt64_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PInt16(Right)^; end;
procedure lpeInt64_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PUInt32(Right)^; end;
procedure lpeInt64_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PInt32(Right)^; end;
procedure lpeInt64_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PUInt64(Right)^; end;
procedure lpeInt64_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PInt64(Right)^; end;
procedure lpeInt64_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PSingle(Right)^; end;
procedure lpeInt64_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PDouble(Right)^; end;
procedure lpeInt64_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PCurrency(Right)^; end;
procedure lpeInt64_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PExtended(Right)^; end;
procedure lpeInt64_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ < PVariant(Right)^; end;
procedure lpeSingle_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PUInt8(Right)^; end;
procedure lpeSingle_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PInt8(Right)^; end;
procedure lpeSingle_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PUInt16(Right)^; end;
procedure lpeSingle_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PInt16(Right)^; end;
procedure lpeSingle_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PUInt32(Right)^; end;
procedure lpeSingle_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PInt32(Right)^; end;
procedure lpeSingle_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PUInt64(Right)^; end;
procedure lpeSingle_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PInt64(Right)^; end;
procedure lpeSingle_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PSingle(Right)^; end;
procedure lpeSingle_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PDouble(Right)^; end;
procedure lpeSingle_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PCurrency(Right)^; end;
procedure lpeSingle_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PExtended(Right)^; end;
procedure lpeSingle_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ < PVariant(Right)^; end;
procedure lpeDouble_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PUInt8(Right)^; end;
procedure lpeDouble_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PInt8(Right)^; end;
procedure lpeDouble_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PUInt16(Right)^; end;
procedure lpeDouble_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PInt16(Right)^; end;
procedure lpeDouble_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PUInt32(Right)^; end;
procedure lpeDouble_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PInt32(Right)^; end;
procedure lpeDouble_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PUInt64(Right)^; end;
procedure lpeDouble_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PInt64(Right)^; end;
procedure lpeDouble_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PSingle(Right)^; end;
procedure lpeDouble_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PDouble(Right)^; end;
procedure lpeDouble_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PCurrency(Right)^; end;
procedure lpeDouble_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PExtended(Right)^; end;
procedure lpeDouble_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ < PVariant(Right)^; end;
procedure lpeCurrency_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PUInt8(Right)^; end;
procedure lpeCurrency_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PInt8(Right)^; end;
procedure lpeCurrency_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PUInt16(Right)^; end;
procedure lpeCurrency_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PInt16(Right)^; end;
procedure lpeCurrency_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PUInt32(Right)^; end;
procedure lpeCurrency_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PInt32(Right)^; end;
procedure lpeCurrency_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PUInt64(Right)^; end;
procedure lpeCurrency_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PInt64(Right)^; end;
procedure lpeCurrency_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PSingle(Right)^; end;
procedure lpeCurrency_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PDouble(Right)^; end;
procedure lpeCurrency_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PCurrency(Right)^; end;
procedure lpeCurrency_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PExtended(Right)^; end;
procedure lpeCurrency_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ < PVariant(Right)^; end;
procedure lpeExtended_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PUInt8(Right)^; end;
procedure lpeExtended_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PInt8(Right)^; end;
procedure lpeExtended_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PUInt16(Right)^; end;
procedure lpeExtended_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PInt16(Right)^; end;
procedure lpeExtended_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PUInt32(Right)^; end;
procedure lpeExtended_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PInt32(Right)^; end;
procedure lpeExtended_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PUInt64(Right)^; end;
procedure lpeExtended_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PInt64(Right)^; end;
procedure lpeExtended_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PSingle(Right)^; end;
procedure lpeExtended_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PDouble(Right)^; end;
procedure lpeExtended_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PCurrency(Right)^; end;
procedure lpeExtended_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PExtended(Right)^; end;
procedure lpeExtended_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ < PVariant(Right)^; end;
procedure lpeVariant_LT_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PUInt8(Right)^; end;
procedure lpeVariant_LT_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PInt8(Right)^; end;
procedure lpeVariant_LT_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PUInt16(Right)^; end;
procedure lpeVariant_LT_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PInt16(Right)^; end;
procedure lpeVariant_LT_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PUInt32(Right)^; end;
procedure lpeVariant_LT_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PInt32(Right)^; end;
procedure lpeVariant_LT_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PUInt64(Right)^; end;
procedure lpeVariant_LT_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PInt64(Right)^; end;
procedure lpeVariant_LT_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PSingle(Right)^; end;
procedure lpeVariant_LT_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PDouble(Right)^; end;
procedure lpeVariant_LT_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PCurrency(Right)^; end;
procedure lpeVariant_LT_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PExtended(Right)^; end;
procedure lpeVariant_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ < PVariant(Right)^; end;
procedure lpeUInt8_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PUInt8(Right)^; end;
procedure lpeUInt8_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PInt8(Right)^; end;
procedure lpeUInt8_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PUInt16(Right)^; end;
procedure lpeUInt8_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PInt16(Right)^; end;
procedure lpeUInt8_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PUInt32(Right)^; end;
procedure lpeUInt8_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PInt32(Right)^; end;
procedure lpeUInt8_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PUInt64(Right)^; end;
procedure lpeUInt8_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PInt64(Right)^; end;
procedure lpeUInt8_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PSingle(Right)^; end;
procedure lpeUInt8_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PDouble(Right)^; end;
procedure lpeUInt8_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PCurrency(Right)^; end;
procedure lpeUInt8_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PExtended(Right)^; end;
procedure lpeUInt8_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <= PVariant(Right)^; end;
procedure lpeInt8_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PUInt8(Right)^; end;
procedure lpeInt8_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PInt8(Right)^; end;
procedure lpeInt8_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PUInt16(Right)^; end;
procedure lpeInt8_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PInt16(Right)^; end;
procedure lpeInt8_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PUInt32(Right)^; end;
procedure lpeInt8_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PInt32(Right)^; end;
procedure lpeInt8_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PUInt64(Right)^; end;
procedure lpeInt8_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PInt64(Right)^; end;
procedure lpeInt8_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PSingle(Right)^; end;
procedure lpeInt8_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PDouble(Right)^; end;
procedure lpeInt8_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PCurrency(Right)^; end;
procedure lpeInt8_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PExtended(Right)^; end;
procedure lpeInt8_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <= PVariant(Right)^; end;
procedure lpeUInt16_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PUInt8(Right)^; end;
procedure lpeUInt16_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PInt8(Right)^; end;
procedure lpeUInt16_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PUInt16(Right)^; end;
procedure lpeUInt16_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PInt16(Right)^; end;
procedure lpeUInt16_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PUInt32(Right)^; end;
procedure lpeUInt16_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PInt32(Right)^; end;
procedure lpeUInt16_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PUInt64(Right)^; end;
procedure lpeUInt16_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PInt64(Right)^; end;
procedure lpeUInt16_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PSingle(Right)^; end;
procedure lpeUInt16_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PDouble(Right)^; end;
procedure lpeUInt16_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PCurrency(Right)^; end;
procedure lpeUInt16_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PExtended(Right)^; end;
procedure lpeUInt16_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <= PVariant(Right)^; end;
procedure lpeInt16_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PUInt8(Right)^; end;
procedure lpeInt16_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PInt8(Right)^; end;
procedure lpeInt16_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PUInt16(Right)^; end;
procedure lpeInt16_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PInt16(Right)^; end;
procedure lpeInt16_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PUInt32(Right)^; end;
procedure lpeInt16_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PInt32(Right)^; end;
procedure lpeInt16_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PUInt64(Right)^; end;
procedure lpeInt16_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PInt64(Right)^; end;
procedure lpeInt16_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PSingle(Right)^; end;
procedure lpeInt16_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PDouble(Right)^; end;
procedure lpeInt16_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PCurrency(Right)^; end;
procedure lpeInt16_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PExtended(Right)^; end;
procedure lpeInt16_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <= PVariant(Right)^; end;
procedure lpeUInt32_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PUInt8(Right)^; end;
procedure lpeUInt32_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PInt8(Right)^; end;
procedure lpeUInt32_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PUInt16(Right)^; end;
procedure lpeUInt32_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PInt16(Right)^; end;
procedure lpeUInt32_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PUInt32(Right)^; end;
procedure lpeUInt32_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PInt32(Right)^; end;
procedure lpeUInt32_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PUInt64(Right)^; end;
procedure lpeUInt32_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PInt64(Right)^; end;
procedure lpeUInt32_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PSingle(Right)^; end;
procedure lpeUInt32_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PDouble(Right)^; end;
procedure lpeUInt32_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PCurrency(Right)^; end;
procedure lpeUInt32_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PExtended(Right)^; end;
procedure lpeUInt32_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <= PVariant(Right)^; end;
procedure lpeInt32_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PUInt8(Right)^; end;
procedure lpeInt32_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PInt8(Right)^; end;
procedure lpeInt32_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PUInt16(Right)^; end;
procedure lpeInt32_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PInt16(Right)^; end;
procedure lpeInt32_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PUInt32(Right)^; end;
procedure lpeInt32_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PInt32(Right)^; end;
procedure lpeInt32_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PUInt64(Right)^; end;
procedure lpeInt32_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PInt64(Right)^; end;
procedure lpeInt32_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PSingle(Right)^; end;
procedure lpeInt32_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PDouble(Right)^; end;
procedure lpeInt32_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PCurrency(Right)^; end;
procedure lpeInt32_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PExtended(Right)^; end;
procedure lpeInt32_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <= PVariant(Right)^; end;
procedure lpeUInt64_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PUInt8(Right)^; end;
procedure lpeUInt64_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PInt8(Right)^; end;
procedure lpeUInt64_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PUInt16(Right)^; end;
procedure lpeUInt64_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PInt16(Right)^; end;
procedure lpeUInt64_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PUInt32(Right)^; end;
procedure lpeUInt64_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PInt32(Right)^; end;
procedure lpeUInt64_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PUInt64(Right)^; end;
procedure lpeUInt64_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PInt64(Right)^; end;
procedure lpeUInt64_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PSingle(Right)^; end;
procedure lpeUInt64_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PDouble(Right)^; end;
procedure lpeUInt64_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PCurrency(Right)^; end;
procedure lpeUInt64_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PExtended(Right)^; end;
procedure lpeUInt64_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <= PVariant(Right)^; end;
procedure lpeInt64_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PUInt8(Right)^; end;
procedure lpeInt64_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PInt8(Right)^; end;
procedure lpeInt64_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PUInt16(Right)^; end;
procedure lpeInt64_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PInt16(Right)^; end;
procedure lpeInt64_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PUInt32(Right)^; end;
procedure lpeInt64_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PInt32(Right)^; end;
procedure lpeInt64_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PUInt64(Right)^; end;
procedure lpeInt64_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PInt64(Right)^; end;
procedure lpeInt64_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PSingle(Right)^; end;
procedure lpeInt64_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PDouble(Right)^; end;
procedure lpeInt64_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PCurrency(Right)^; end;
procedure lpeInt64_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PExtended(Right)^; end;
procedure lpeInt64_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <= PVariant(Right)^; end;
procedure lpeSingle_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PUInt8(Right)^; end;
procedure lpeSingle_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PInt8(Right)^; end;
procedure lpeSingle_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PUInt16(Right)^; end;
procedure lpeSingle_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PInt16(Right)^; end;
procedure lpeSingle_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PUInt32(Right)^; end;
procedure lpeSingle_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PInt32(Right)^; end;
procedure lpeSingle_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PUInt64(Right)^; end;
procedure lpeSingle_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PInt64(Right)^; end;
procedure lpeSingle_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PSingle(Right)^; end;
procedure lpeSingle_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PDouble(Right)^; end;
procedure lpeSingle_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PCurrency(Right)^; end;
procedure lpeSingle_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PExtended(Right)^; end;
procedure lpeSingle_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <= PVariant(Right)^; end;
procedure lpeDouble_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PUInt8(Right)^; end;
procedure lpeDouble_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PInt8(Right)^; end;
procedure lpeDouble_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PUInt16(Right)^; end;
procedure lpeDouble_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PInt16(Right)^; end;
procedure lpeDouble_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PUInt32(Right)^; end;
procedure lpeDouble_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PInt32(Right)^; end;
procedure lpeDouble_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PUInt64(Right)^; end;
procedure lpeDouble_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PInt64(Right)^; end;
procedure lpeDouble_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PSingle(Right)^; end;
procedure lpeDouble_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PDouble(Right)^; end;
procedure lpeDouble_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PCurrency(Right)^; end;
procedure lpeDouble_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PExtended(Right)^; end;
procedure lpeDouble_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <= PVariant(Right)^; end;
procedure lpeCurrency_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PUInt8(Right)^; end;
procedure lpeCurrency_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PInt8(Right)^; end;
procedure lpeCurrency_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PUInt16(Right)^; end;
procedure lpeCurrency_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PInt16(Right)^; end;
procedure lpeCurrency_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PUInt32(Right)^; end;
procedure lpeCurrency_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PInt32(Right)^; end;
procedure lpeCurrency_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PUInt64(Right)^; end;
procedure lpeCurrency_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PInt64(Right)^; end;
procedure lpeCurrency_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PSingle(Right)^; end;
procedure lpeCurrency_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PDouble(Right)^; end;
procedure lpeCurrency_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PCurrency(Right)^; end;
procedure lpeCurrency_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PExtended(Right)^; end;
procedure lpeCurrency_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <= PVariant(Right)^; end;
procedure lpeExtended_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PUInt8(Right)^; end;
procedure lpeExtended_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PInt8(Right)^; end;
procedure lpeExtended_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PUInt16(Right)^; end;
procedure lpeExtended_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PInt16(Right)^; end;
procedure lpeExtended_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PUInt32(Right)^; end;
procedure lpeExtended_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PInt32(Right)^; end;
procedure lpeExtended_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PUInt64(Right)^; end;
procedure lpeExtended_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PInt64(Right)^; end;
procedure lpeExtended_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PSingle(Right)^; end;
procedure lpeExtended_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PDouble(Right)^; end;
procedure lpeExtended_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PCurrency(Right)^; end;
procedure lpeExtended_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PExtended(Right)^; end;
procedure lpeExtended_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <= PVariant(Right)^; end;
procedure lpeVariant_LTEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PUInt8(Right)^; end;
procedure lpeVariant_LTEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PInt8(Right)^; end;
procedure lpeVariant_LTEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PUInt16(Right)^; end;
procedure lpeVariant_LTEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PInt16(Right)^; end;
procedure lpeVariant_LTEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PUInt32(Right)^; end;
procedure lpeVariant_LTEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PInt32(Right)^; end;
procedure lpeVariant_LTEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PUInt64(Right)^; end;
procedure lpeVariant_LTEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PInt64(Right)^; end;
procedure lpeVariant_LTEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PSingle(Right)^; end;
procedure lpeVariant_LTEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PDouble(Right)^; end;
procedure lpeVariant_LTEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PCurrency(Right)^; end;
procedure lpeVariant_LTEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PExtended(Right)^; end;
procedure lpeVariant_LTEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <= PVariant(Right)^; end;
procedure lpeUInt8_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PUInt8(Right)^; end;
procedure lpeUInt8_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PInt8(Right)^; end;
procedure lpeUInt8_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PUInt16(Right)^; end;
procedure lpeUInt8_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PInt16(Right)^; end;
procedure lpeUInt8_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PUInt32(Right)^; end;
procedure lpeUInt8_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PInt32(Right)^; end;
procedure lpeUInt8_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PUInt64(Right)^; end;
procedure lpeUInt8_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PInt64(Right)^; end;
procedure lpeUInt8_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PSingle(Right)^; end;
procedure lpeUInt8_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PDouble(Right)^; end;
procedure lpeUInt8_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PCurrency(Right)^; end;
procedure lpeUInt8_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PExtended(Right)^; end;
procedure lpeUInt8_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt8(Left)^ <> PVariant(Right)^; end;
procedure lpeInt8_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PUInt8(Right)^; end;
procedure lpeInt8_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PInt8(Right)^; end;
procedure lpeInt8_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PUInt16(Right)^; end;
procedure lpeInt8_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PInt16(Right)^; end;
procedure lpeInt8_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PUInt32(Right)^; end;
procedure lpeInt8_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PInt32(Right)^; end;
procedure lpeInt8_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PUInt64(Right)^; end;
procedure lpeInt8_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PInt64(Right)^; end;
procedure lpeInt8_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PSingle(Right)^; end;
procedure lpeInt8_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PDouble(Right)^; end;
procedure lpeInt8_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PCurrency(Right)^; end;
procedure lpeInt8_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PExtended(Right)^; end;
procedure lpeInt8_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt8(Left)^ <> PVariant(Right)^; end;
procedure lpeUInt16_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PUInt8(Right)^; end;
procedure lpeUInt16_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PInt8(Right)^; end;
procedure lpeUInt16_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PUInt16(Right)^; end;
procedure lpeUInt16_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PInt16(Right)^; end;
procedure lpeUInt16_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PUInt32(Right)^; end;
procedure lpeUInt16_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PInt32(Right)^; end;
procedure lpeUInt16_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PUInt64(Right)^; end;
procedure lpeUInt16_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PInt64(Right)^; end;
procedure lpeUInt16_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PSingle(Right)^; end;
procedure lpeUInt16_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PDouble(Right)^; end;
procedure lpeUInt16_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PCurrency(Right)^; end;
procedure lpeUInt16_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PExtended(Right)^; end;
procedure lpeUInt16_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt16(Left)^ <> PVariant(Right)^; end;
procedure lpeInt16_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PUInt8(Right)^; end;
procedure lpeInt16_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PInt8(Right)^; end;
procedure lpeInt16_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PUInt16(Right)^; end;
procedure lpeInt16_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PInt16(Right)^; end;
procedure lpeInt16_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PUInt32(Right)^; end;
procedure lpeInt16_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PInt32(Right)^; end;
procedure lpeInt16_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PUInt64(Right)^; end;
procedure lpeInt16_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PInt64(Right)^; end;
procedure lpeInt16_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PSingle(Right)^; end;
procedure lpeInt16_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PDouble(Right)^; end;
procedure lpeInt16_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PCurrency(Right)^; end;
procedure lpeInt16_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PExtended(Right)^; end;
procedure lpeInt16_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt16(Left)^ <> PVariant(Right)^; end;
procedure lpeUInt32_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PUInt8(Right)^; end;
procedure lpeUInt32_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PInt8(Right)^; end;
procedure lpeUInt32_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PUInt16(Right)^; end;
procedure lpeUInt32_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PInt16(Right)^; end;
procedure lpeUInt32_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PUInt32(Right)^; end;
procedure lpeUInt32_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PInt32(Right)^; end;
procedure lpeUInt32_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PUInt64(Right)^; end;
procedure lpeUInt32_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PInt64(Right)^; end;
procedure lpeUInt32_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PSingle(Right)^; end;
procedure lpeUInt32_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PDouble(Right)^; end;
procedure lpeUInt32_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PCurrency(Right)^; end;
procedure lpeUInt32_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PExtended(Right)^; end;
procedure lpeUInt32_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt32(Left)^ <> PVariant(Right)^; end;
procedure lpeInt32_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PUInt8(Right)^; end;
procedure lpeInt32_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PInt8(Right)^; end;
procedure lpeInt32_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PUInt16(Right)^; end;
procedure lpeInt32_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PInt16(Right)^; end;
procedure lpeInt32_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PUInt32(Right)^; end;
procedure lpeInt32_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PInt32(Right)^; end;
procedure lpeInt32_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PUInt64(Right)^; end;
procedure lpeInt32_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PInt64(Right)^; end;
procedure lpeInt32_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PSingle(Right)^; end;
procedure lpeInt32_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PDouble(Right)^; end;
procedure lpeInt32_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PCurrency(Right)^; end;
procedure lpeInt32_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PExtended(Right)^; end;
procedure lpeInt32_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt32(Left)^ <> PVariant(Right)^; end;
procedure lpeUInt64_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PUInt8(Right)^; end;
procedure lpeUInt64_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PInt8(Right)^; end;
procedure lpeUInt64_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PUInt16(Right)^; end;
procedure lpeUInt64_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PInt16(Right)^; end;
procedure lpeUInt64_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PUInt32(Right)^; end;
procedure lpeUInt64_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PInt32(Right)^; end;
procedure lpeUInt64_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PUInt64(Right)^; end;
procedure lpeUInt64_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PInt64(Right)^; end;
procedure lpeUInt64_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PSingle(Right)^; end;
procedure lpeUInt64_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PDouble(Right)^; end;
procedure lpeUInt64_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PCurrency(Right)^; end;
procedure lpeUInt64_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PExtended(Right)^; end;
procedure lpeUInt64_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUInt64(Left)^ <> PVariant(Right)^; end;
procedure lpeInt64_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PUInt8(Right)^; end;
procedure lpeInt64_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PInt8(Right)^; end;
procedure lpeInt64_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PUInt16(Right)^; end;
procedure lpeInt64_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PInt16(Right)^; end;
procedure lpeInt64_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PUInt32(Right)^; end;
procedure lpeInt64_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PInt32(Right)^; end;
procedure lpeInt64_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PUInt64(Right)^; end;
procedure lpeInt64_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PInt64(Right)^; end;
procedure lpeInt64_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PSingle(Right)^; end;
procedure lpeInt64_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PDouble(Right)^; end;
procedure lpeInt64_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PCurrency(Right)^; end;
procedure lpeInt64_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PExtended(Right)^; end;
procedure lpeInt64_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PInt64(Left)^ <> PVariant(Right)^; end;
procedure lpeSingle_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PUInt8(Right)^; end;
procedure lpeSingle_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PInt8(Right)^; end;
procedure lpeSingle_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PUInt16(Right)^; end;
procedure lpeSingle_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PInt16(Right)^; end;
procedure lpeSingle_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PUInt32(Right)^; end;
procedure lpeSingle_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PInt32(Right)^; end;
procedure lpeSingle_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PUInt64(Right)^; end;
procedure lpeSingle_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PInt64(Right)^; end;
procedure lpeSingle_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PSingle(Right)^; end;
procedure lpeSingle_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PDouble(Right)^; end;
procedure lpeSingle_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PCurrency(Right)^; end;
procedure lpeSingle_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PExtended(Right)^; end;
procedure lpeSingle_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PSingle(Left)^ <> PVariant(Right)^; end;
procedure lpeDouble_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PUInt8(Right)^; end;
procedure lpeDouble_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PInt8(Right)^; end;
procedure lpeDouble_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PUInt16(Right)^; end;
procedure lpeDouble_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PInt16(Right)^; end;
procedure lpeDouble_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PUInt32(Right)^; end;
procedure lpeDouble_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PInt32(Right)^; end;
procedure lpeDouble_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PUInt64(Right)^; end;
procedure lpeDouble_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PInt64(Right)^; end;
procedure lpeDouble_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PSingle(Right)^; end;
procedure lpeDouble_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PDouble(Right)^; end;
procedure lpeDouble_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PCurrency(Right)^; end;
procedure lpeDouble_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PExtended(Right)^; end;
procedure lpeDouble_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PDouble(Left)^ <> PVariant(Right)^; end;
procedure lpeCurrency_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PUInt8(Right)^; end;
procedure lpeCurrency_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PInt8(Right)^; end;
procedure lpeCurrency_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PUInt16(Right)^; end;
procedure lpeCurrency_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PInt16(Right)^; end;
procedure lpeCurrency_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PUInt32(Right)^; end;
procedure lpeCurrency_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PInt32(Right)^; end;
procedure lpeCurrency_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PUInt64(Right)^; end;
procedure lpeCurrency_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PInt64(Right)^; end;
procedure lpeCurrency_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PSingle(Right)^; end;
procedure lpeCurrency_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PDouble(Right)^; end;
procedure lpeCurrency_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PCurrency(Right)^; end;
procedure lpeCurrency_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PExtended(Right)^; end;
procedure lpeCurrency_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PCurrency(Left)^ <> PVariant(Right)^; end;
procedure lpeExtended_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PUInt8(Right)^; end;
procedure lpeExtended_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PInt8(Right)^; end;
procedure lpeExtended_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PUInt16(Right)^; end;
procedure lpeExtended_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PInt16(Right)^; end;
procedure lpeExtended_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PUInt32(Right)^; end;
procedure lpeExtended_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PInt32(Right)^; end;
procedure lpeExtended_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PUInt64(Right)^; end;
procedure lpeExtended_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PInt64(Right)^; end;
procedure lpeExtended_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PSingle(Right)^; end;
procedure lpeExtended_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PDouble(Right)^; end;
procedure lpeExtended_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PCurrency(Right)^; end;
procedure lpeExtended_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PExtended(Right)^; end;
procedure lpeExtended_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PExtended(Left)^ <> PVariant(Right)^; end;
procedure lpeVariant_NEQ_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PUInt8(Right)^; end;
procedure lpeVariant_NEQ_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PInt8(Right)^; end;
procedure lpeVariant_NEQ_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PUInt16(Right)^; end;
procedure lpeVariant_NEQ_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PInt16(Right)^; end;
procedure lpeVariant_NEQ_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PUInt32(Right)^; end;
procedure lpeVariant_NEQ_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PInt32(Right)^; end;
procedure lpeVariant_NEQ_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PUInt64(Right)^; end;
procedure lpeVariant_NEQ_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PInt64(Right)^; end;
procedure lpeVariant_NEQ_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PSingle(Right)^; end;
procedure lpeVariant_NEQ_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PDouble(Right)^; end;
procedure lpeVariant_NEQ_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PCurrency(Right)^; end;
procedure lpeVariant_NEQ_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PExtended(Right)^; end;
procedure lpeVariant_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PVariant(Left)^ <> PVariant(Right)^; end;

//solving AND-operator
procedure lpeUInt8_AND_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PUInt8(Left)^ and PUInt8(Right)^; end;
procedure lpeUInt8_AND_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PUInt8(Left)^ and PInt8(Right)^; end;
procedure lpeUInt8_AND_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := UInt16(PUInt8(Left)^) and UInt16(PUInt16(Right)^); end;
procedure lpeUInt8_AND_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := Int16(PUInt8(Left)^) and Int16(PInt16(Right)^); end;
procedure lpeUInt8_AND_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) and UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_AND_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) and Int32(PInt32(Right)^); end;
procedure lpeUInt8_AND_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt8(Left)^) and UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_AND_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt8(Left)^) and Int64(PInt64(Right)^); end;
procedure lpeUInt8_AND_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ and PVariant(Right)^; end;
procedure lpeInt8_AND_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PInt8(Left)^ and PUInt8(Right)^; end;
procedure lpeInt8_AND_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PInt8(Left)^ and PInt8(Right)^; end;
procedure lpeInt8_AND_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := UInt16(PInt8(Left)^) and UInt16(PUInt16(Right)^); end;
procedure lpeInt8_AND_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := Int16(PInt8(Left)^) and Int16(PInt16(Right)^); end;
procedure lpeInt8_AND_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PInt8(Left)^) and UInt32(PUInt32(Right)^); end;
procedure lpeInt8_AND_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) and Int32(PInt32(Right)^); end;
procedure lpeInt8_AND_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt8(Left)^) and UInt64(PUInt64(Right)^); end;
procedure lpeInt8_AND_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) and Int64(PInt64(Right)^); end;
procedure lpeInt8_AND_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ and PVariant(Right)^; end;
procedure lpeUInt16_AND_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt16(Left)^ and PUInt8(Right)^; end;
procedure lpeUInt16_AND_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt16(Left)^ and PInt8(Right)^; end;
procedure lpeUInt16_AND_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt16(Left)^ and PUInt16(Right)^; end;
procedure lpeUInt16_AND_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt16(Left)^ and PInt16(Right)^; end;
procedure lpeUInt16_AND_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) and UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_AND_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) and Int32(PInt32(Right)^); end;
procedure lpeUInt16_AND_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt16(Left)^) and UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_AND_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt16(Left)^) and Int64(PInt64(Right)^); end;
procedure lpeUInt16_AND_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ and PVariant(Right)^; end;
procedure lpeInt16_AND_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt16(Left)^ and PUInt8(Right)^; end;
procedure lpeInt16_AND_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt16(Left)^ and PInt8(Right)^; end;
procedure lpeInt16_AND_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PInt16(Left)^ and PUInt16(Right)^; end;
procedure lpeInt16_AND_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt16(Left)^ and PInt16(Right)^; end;
procedure lpeInt16_AND_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PInt16(Left)^) and UInt32(PUInt32(Right)^); end;
procedure lpeInt16_AND_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) and Int32(PInt32(Right)^); end;
procedure lpeInt16_AND_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt16(Left)^) and UInt64(PUInt64(Right)^); end;
procedure lpeInt16_AND_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) and Int64(PInt64(Right)^); end;
procedure lpeInt16_AND_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ and PVariant(Right)^; end;
procedure lpeUInt32_AND_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ and PUInt8(Right)^; end;
procedure lpeUInt32_AND_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ and PInt8(Right)^; end;
procedure lpeUInt32_AND_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ and PUInt16(Right)^; end;
procedure lpeUInt32_AND_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ and PInt16(Right)^; end;
procedure lpeUInt32_AND_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ and PUInt32(Right)^; end;
procedure lpeUInt32_AND_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ and PInt32(Right)^; end;
procedure lpeUInt32_AND_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt32(Left)^) and UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_AND_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) and Int64(PInt64(Right)^); end;
procedure lpeUInt32_AND_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ and PVariant(Right)^; end;
procedure lpeInt32_AND_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ and PUInt8(Right)^; end;
procedure lpeInt32_AND_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ and PInt8(Right)^; end;
procedure lpeInt32_AND_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ and PUInt16(Right)^; end;
procedure lpeInt32_AND_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ and PInt16(Right)^; end;
procedure lpeInt32_AND_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PInt32(Left)^ and PUInt32(Right)^; end;
procedure lpeInt32_AND_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ and PInt32(Right)^; end;
procedure lpeInt32_AND_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt32(Left)^) and UInt64(PUInt64(Right)^); end;
procedure lpeInt32_AND_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) and Int64(PInt64(Right)^); end;
procedure lpeInt32_AND_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ and PVariant(Right)^; end;
procedure lpeUInt64_AND_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ and PUInt8(Right)^; end;
procedure lpeUInt64_AND_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ and PInt8(Right)^; end;
procedure lpeUInt64_AND_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ and PUInt16(Right)^; end;
procedure lpeUInt64_AND_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ and PInt16(Right)^; end;
procedure lpeUInt64_AND_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ and PUInt32(Right)^; end;
procedure lpeUInt64_AND_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ and PInt32(Right)^; end;
procedure lpeUInt64_AND_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ and PUInt64(Right)^; end;
procedure lpeUInt64_AND_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) and Int64(PInt64(Right)^); end;
procedure lpeUInt64_AND_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ and PVariant(Right)^; end;
procedure lpeInt64_AND_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ and PUInt8(Right)^; end;
procedure lpeInt64_AND_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ and PInt8(Right)^; end;
procedure lpeInt64_AND_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ and PUInt16(Right)^; end;
procedure lpeInt64_AND_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ and PInt16(Right)^; end;
procedure lpeInt64_AND_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ and PUInt32(Right)^; end;
procedure lpeInt64_AND_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ and PInt32(Right)^; end;
procedure lpeInt64_AND_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ and PUInt64(Right)^; end;
procedure lpeInt64_AND_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ and PInt64(Right)^; end;
procedure lpeInt64_AND_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ and PVariant(Right)^; end;
procedure lpeVariant_AND_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ and PUInt8(Right)^; end;
procedure lpeVariant_AND_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ and PInt8(Right)^; end;
procedure lpeVariant_AND_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ and PUInt16(Right)^; end;
procedure lpeVariant_AND_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ and PInt16(Right)^; end;
procedure lpeVariant_AND_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ and PUInt32(Right)^; end;
procedure lpeVariant_AND_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ and PInt32(Right)^; end;
procedure lpeVariant_AND_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ and PUInt64(Right)^; end;
procedure lpeVariant_AND_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ and PInt64(Right)^; end;
procedure lpeVariant_AND_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ and PVariant(Right)^; end;

//solving assignment
procedure lpeUInt8_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PUInt8(Left)^; end;
procedure lpeUInt8_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PInt8(Left)^; end;
procedure lpeUInt8_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PUInt16(Left)^; end;
procedure lpeUInt8_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PInt16(Left)^; end;
procedure lpeUInt8_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PUInt32(Left)^; end;
procedure lpeUInt8_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PInt32(Left)^; end;
procedure lpeUInt8_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PUInt64(Left)^; end;
procedure lpeUInt8_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PInt64(Left)^; end;
procedure lpeUInt8_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PVariant(Left)^; end;
procedure lpeInt8_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PUInt8(Left)^; end;
procedure lpeInt8_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PInt8(Left)^; end;
procedure lpeInt8_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PUInt16(Left)^; end;
procedure lpeInt8_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PInt16(Left)^; end;
procedure lpeInt8_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PUInt32(Left)^; end;
procedure lpeInt8_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PInt32(Left)^; end;
procedure lpeInt8_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PUInt64(Left)^; end;
procedure lpeInt8_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PInt64(Left)^; end;
procedure lpeInt8_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PVariant(Left)^; end;
procedure lpeUInt16_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt8(Left)^; end;
procedure lpeUInt16_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PInt8(Left)^; end;
procedure lpeUInt16_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt16(Left)^; end;
procedure lpeUInt16_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PInt16(Left)^; end;
procedure lpeUInt16_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt32(Left)^; end;
procedure lpeUInt16_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PInt32(Left)^; end;
procedure lpeUInt16_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt64(Left)^; end;
procedure lpeUInt16_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PInt64(Left)^; end;
procedure lpeUInt16_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PVariant(Left)^; end;
procedure lpeInt16_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PUInt8(Left)^; end;
procedure lpeInt16_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt8(Left)^; end;
procedure lpeInt16_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PUInt16(Left)^; end;
procedure lpeInt16_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt16(Left)^; end;
procedure lpeInt16_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PUInt32(Left)^; end;
procedure lpeInt16_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt32(Left)^; end;
procedure lpeInt16_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PUInt64(Left)^; end;
procedure lpeInt16_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt64(Left)^; end;
procedure lpeInt16_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PVariant(Left)^; end;
procedure lpeUInt32_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt8(Left)^; end;
procedure lpeUInt32_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PInt8(Left)^; end;
procedure lpeUInt32_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt16(Left)^; end;
procedure lpeUInt32_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PInt16(Left)^; end;
procedure lpeUInt32_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^; end;
procedure lpeUInt32_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PInt32(Left)^; end;
procedure lpeUInt32_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt64(Left)^; end;
procedure lpeUInt32_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PInt64(Left)^; end;
procedure lpeUInt32_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PVariant(Left)^; end;
procedure lpeInt32_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PUInt8(Left)^; end;
procedure lpeInt32_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt8(Left)^; end;
procedure lpeInt32_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PUInt16(Left)^; end;
procedure lpeInt32_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt16(Left)^; end;
procedure lpeInt32_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PUInt32(Left)^; end;
procedure lpeInt32_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^; end;
procedure lpeInt32_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PUInt64(Left)^; end;
procedure lpeInt32_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt64(Left)^; end;
procedure lpeInt32_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PVariant(Left)^; end;
procedure lpeUInt64_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt8(Left)^; end;
procedure lpeUInt64_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PInt8(Left)^; end;
procedure lpeUInt64_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt16(Left)^; end;
procedure lpeUInt64_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PInt16(Left)^; end;
procedure lpeUInt64_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt32(Left)^; end;
procedure lpeUInt64_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PInt32(Left)^; end;
procedure lpeUInt64_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^; end;
procedure lpeUInt64_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PInt64(Left)^; end;
procedure lpeUInt64_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PVariant(Left)^; end;
procedure lpeInt64_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PUInt8(Left)^; end;
procedure lpeInt64_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt8(Left)^; end;
procedure lpeInt64_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PUInt16(Left)^; end;
procedure lpeInt64_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt16(Left)^; end;
procedure lpeInt64_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PUInt32(Left)^; end;
procedure lpeInt64_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt32(Left)^; end;
procedure lpeInt64_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PUInt64(Left)^; end;
procedure lpeInt64_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^; end;
procedure lpeInt64_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PVariant(Left)^; end;
procedure lpeSingle_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt8(Left)^; end;
procedure lpeSingle_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt8(Left)^; end;
procedure lpeSingle_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt16(Left)^; end;
procedure lpeSingle_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt16(Left)^; end;
procedure lpeSingle_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt32(Left)^; end;
procedure lpeSingle_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt32(Left)^; end;
procedure lpeSingle_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt64(Left)^; end;
procedure lpeSingle_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt64(Left)^; end;
procedure lpeSingle_ASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^; end;
procedure lpeSingle_ASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PDouble(Left)^; end;
procedure lpeSingle_ASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PCurrency(Left)^; end;
procedure lpeSingle_ASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PExtended(Left)^; end;
procedure lpeSingle_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PVariant(Left)^; end;
procedure lpeDouble_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt8(Left)^; end;
procedure lpeDouble_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt8(Left)^; end;
procedure lpeDouble_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt16(Left)^; end;
procedure lpeDouble_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt16(Left)^; end;
procedure lpeDouble_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt32(Left)^; end;
procedure lpeDouble_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt32(Left)^; end;
procedure lpeDouble_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt64(Left)^; end;
procedure lpeDouble_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt64(Left)^; end;
procedure lpeDouble_ASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PSingle(Left)^; end;
procedure lpeDouble_ASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^; end;
procedure lpeDouble_ASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PCurrency(Left)^; end;
procedure lpeDouble_ASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PExtended(Left)^; end;
procedure lpeDouble_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PVariant(Left)^; end;
procedure lpeCurrency_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt8(Left)^; end;
procedure lpeCurrency_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt8(Left)^; end;
procedure lpeCurrency_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt16(Left)^; end;
procedure lpeCurrency_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt16(Left)^; end;
procedure lpeCurrency_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt32(Left)^; end;
procedure lpeCurrency_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt32(Left)^; end;
procedure lpeCurrency_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt64(Left)^; end;
procedure lpeCurrency_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt64(Left)^; end;
procedure lpeCurrency_ASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PSingle(Left)^; end;
procedure lpeCurrency_ASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PDouble(Left)^; end;
procedure lpeCurrency_ASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^; end;
procedure lpeCurrency_ASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PExtended(Left)^; end;
procedure lpeCurrency_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PVariant(Left)^; end;
procedure lpeExtended_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^; end;
procedure lpeExtended_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^; end;
procedure lpeExtended_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^; end;
procedure lpeExtended_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^; end;
procedure lpeExtended_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^; end;
procedure lpeExtended_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^; end;
procedure lpeExtended_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^; end;
procedure lpeExtended_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^; end;
procedure lpeExtended_ASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PSingle(Left)^; end;
procedure lpeExtended_ASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PDouble(Left)^; end;
procedure lpeExtended_ASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PCurrency(Left)^; end;
procedure lpeExtended_ASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^; end;
procedure lpeExtended_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PVariant(Left)^; end;
procedure lpeVariant_ASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^; end;
procedure lpeVariant_ASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^; end;
procedure lpeVariant_ASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^; end;
procedure lpeVariant_ASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^; end;
procedure lpeVariant_ASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^; end;
procedure lpeVariant_ASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^; end;
procedure lpeVariant_ASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^; end;
procedure lpeVariant_ASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^; end;
procedure lpeVariant_ASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PSingle(Left)^; end;
procedure lpeVariant_ASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PDouble(Left)^; end;
procedure lpeVariant_ASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PCurrency(Left)^; end;
procedure lpeVariant_ASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PExtended(Left)^; end;
procedure lpeVariant_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^; end;

// Solving integer division
procedure lpeUInt8_IDIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) div Int32(PUInt8(Right)^); end;
procedure lpeUInt8_IDIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) div Int32(PInt8(Right)^); end;
procedure lpeUInt8_IDIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) div Int32(PUInt16(Right)^); end;
procedure lpeUInt8_IDIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) div Int32(PInt16(Right)^); end;
procedure lpeUInt8_IDIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) div UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_IDIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) div Int32(PInt32(Right)^); end;
procedure lpeUInt8_IDIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt8(Left)^) div UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_IDIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt8(Left)^) div Int64(PInt64(Right)^); end;
procedure lpeUInt8_IDIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ div PVariant(Right)^; end;
procedure lpeInt8_IDIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) div Int32(PUInt8(Right)^); end;
procedure lpeInt8_IDIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) div Int32(PInt8(Right)^); end;
procedure lpeInt8_IDIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) div Int32(PUInt16(Right)^); end;
procedure lpeInt8_IDIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) div Int32(PInt16(Right)^); end;
procedure lpeInt8_IDIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) div Int64(PUInt32(Right)^); end;
procedure lpeInt8_IDIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) div Int32(PInt32(Right)^); end;
procedure lpeInt8_IDIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) div Int64(PUInt64(Right)^); end;
procedure lpeInt8_IDIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) div Int64(PInt64(Right)^); end;
procedure lpeInt8_IDIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ div PVariant(Right)^; end;
procedure lpeUInt16_IDIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) div Int32(PUInt8(Right)^); end;
procedure lpeUInt16_IDIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) div Int32(PInt8(Right)^); end;
procedure lpeUInt16_IDIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) div Int32(PUInt16(Right)^); end;
procedure lpeUInt16_IDIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) div Int32(PInt16(Right)^); end;
procedure lpeUInt16_IDIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) div UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_IDIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) div Int32(PInt32(Right)^); end;
procedure lpeUInt16_IDIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt16(Left)^) div UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_IDIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt16(Left)^) div Int64(PInt64(Right)^); end;
procedure lpeUInt16_IDIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ div PVariant(Right)^; end;
procedure lpeInt16_IDIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) div Int32(PUInt8(Right)^); end;
procedure lpeInt16_IDIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) div Int32(PInt8(Right)^); end;
procedure lpeInt16_IDIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) div Int32(PUInt16(Right)^); end;
procedure lpeInt16_IDIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) div Int32(PInt16(Right)^); end;
procedure lpeInt16_IDIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) div Int64(PUInt32(Right)^); end;
procedure lpeInt16_IDIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) div Int32(PInt32(Right)^); end;
procedure lpeInt16_IDIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) div Int64(PUInt64(Right)^); end;
procedure lpeInt16_IDIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) div Int64(PInt64(Right)^); end;
procedure lpeInt16_IDIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ div PVariant(Right)^; end;
procedure lpeUInt32_IDIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ div PUInt8(Right)^; end;
procedure lpeUInt32_IDIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) div Int64(PInt8(Right)^); end;
procedure lpeUInt32_IDIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ div PUInt16(Right)^; end;
procedure lpeUInt32_IDIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) div Int64(PInt16(Right)^); end;
procedure lpeUInt32_IDIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ div PUInt32(Right)^; end;
procedure lpeUInt32_IDIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) div Int64(PInt32(Right)^); end;
procedure lpeUInt32_IDIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt32(Left)^) div UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_IDIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) div Int64(PInt64(Right)^); end;
procedure lpeUInt32_IDIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ div PVariant(Right)^; end;
procedure lpeInt32_IDIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ div PUInt8(Right)^; end;
procedure lpeInt32_IDIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ div PInt8(Right)^; end;
procedure lpeInt32_IDIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ div PUInt16(Right)^; end;
procedure lpeInt32_IDIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ div PInt16(Right)^; end;
procedure lpeInt32_IDIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) div Int64(PUInt32(Right)^); end;
procedure lpeInt32_IDIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ div PInt32(Right)^; end;
procedure lpeInt32_IDIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) div Int64(PUInt64(Right)^); end;
procedure lpeInt32_IDIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) div Int64(PInt64(Right)^); end;
procedure lpeInt32_IDIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ div PVariant(Right)^; end;
procedure lpeUInt64_IDIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ div PUInt8(Right)^; end;
procedure lpeUInt64_IDIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) div Int64(PInt8(Right)^); end;
procedure lpeUInt64_IDIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ div PUInt16(Right)^; end;
procedure lpeUInt64_IDIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) div Int64(PInt16(Right)^); end;
procedure lpeUInt64_IDIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ div PUInt32(Right)^; end;
procedure lpeUInt64_IDIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) div Int64(PInt32(Right)^); end;
procedure lpeUInt64_IDIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ div PUInt64(Right)^; end;
procedure lpeUInt64_IDIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) div Int64(PInt64(Right)^); end;
procedure lpeUInt64_IDIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ div PVariant(Right)^; end;
procedure lpeInt64_IDIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ div PUInt8(Right)^; end;
procedure lpeInt64_IDIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ div PInt8(Right)^; end;
procedure lpeInt64_IDIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ div PUInt16(Right)^; end;
procedure lpeInt64_IDIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ div PInt16(Right)^; end;
procedure lpeInt64_IDIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ div PUInt32(Right)^; end;
procedure lpeInt64_IDIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ div PInt32(Right)^; end;
procedure lpeInt64_IDIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ div PUInt64(Right)^; end;
procedure lpeInt64_IDIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ div PInt64(Right)^; end;
procedure lpeInt64_IDIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ div PVariant(Right)^; end;
procedure lpeVariant_IDIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ div PUInt8(Right)^; end;
procedure lpeVariant_IDIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ div PInt8(Right)^; end;
procedure lpeVariant_IDIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ div PUInt16(Right)^; end;
procedure lpeVariant_IDIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ div PInt16(Right)^; end;
procedure lpeVariant_IDIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ div PUInt32(Right)^; end;
procedure lpeVariant_IDIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ div PInt32(Right)^; end;
procedure lpeVariant_IDIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ div PUInt64(Right)^; end;
procedure lpeVariant_IDIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ div PInt64(Right)^; end;
procedure lpeVariant_IDIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ div PVariant(Right)^; end;

// Solving division
procedure lpeUInt8_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ / PUInt8(Right)^; end;
procedure lpeUInt8_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ / PInt8(Right)^; end;
procedure lpeUInt8_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ / PUInt16(Right)^; end;
procedure lpeUInt8_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ / PInt16(Right)^; end;
procedure lpeUInt8_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ / PUInt32(Right)^; end;
procedure lpeUInt8_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ / PInt32(Right)^; end;
procedure lpeUInt8_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ / PUInt64(Right)^; end;
procedure lpeUInt8_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ / PInt64(Right)^; end;
procedure lpeUInt8_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt8(Left)^ / PSingle(Right)^; end;
procedure lpeUInt8_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt8(Left)^ / PDouble(Right)^; end;
procedure lpeUInt8_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt8(Left)^ / PCurrency(Right)^; end;
procedure lpeUInt8_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ / PExtended(Right)^; end;
procedure lpeUInt8_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ / PVariant(Right)^; end;
procedure lpeInt8_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ / PUInt8(Right)^; end;
procedure lpeInt8_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ / PInt8(Right)^; end;
procedure lpeInt8_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ / PUInt16(Right)^; end;
procedure lpeInt8_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ / PInt16(Right)^; end;
procedure lpeInt8_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ / PUInt32(Right)^; end;
procedure lpeInt8_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ / PInt32(Right)^; end;
procedure lpeInt8_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ / PUInt64(Right)^; end;
procedure lpeInt8_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ / PInt64(Right)^; end;
procedure lpeInt8_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt8(Left)^ / PSingle(Right)^; end;
procedure lpeInt8_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt8(Left)^ / PDouble(Right)^; end;
procedure lpeInt8_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt8(Left)^ / PCurrency(Right)^; end;
procedure lpeInt8_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ / PExtended(Right)^; end;
procedure lpeInt8_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ / PVariant(Right)^; end;
procedure lpeUInt16_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ / PUInt8(Right)^; end;
procedure lpeUInt16_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ / PInt8(Right)^; end;
procedure lpeUInt16_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ / PUInt16(Right)^; end;
procedure lpeUInt16_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ / PInt16(Right)^; end;
procedure lpeUInt16_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ / PUInt32(Right)^; end;
procedure lpeUInt16_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ / PInt32(Right)^; end;
procedure lpeUInt16_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ / PUInt64(Right)^; end;
procedure lpeUInt16_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ / PInt64(Right)^; end;
procedure lpeUInt16_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt16(Left)^ / PSingle(Right)^; end;
procedure lpeUInt16_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt16(Left)^ / PDouble(Right)^; end;
procedure lpeUInt16_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt16(Left)^ / PCurrency(Right)^; end;
procedure lpeUInt16_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ / PExtended(Right)^; end;
procedure lpeUInt16_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ / PVariant(Right)^; end;
procedure lpeInt16_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ / PUInt8(Right)^; end;
procedure lpeInt16_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ / PInt8(Right)^; end;
procedure lpeInt16_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ / PUInt16(Right)^; end;
procedure lpeInt16_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ / PInt16(Right)^; end;
procedure lpeInt16_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ / PUInt32(Right)^; end;
procedure lpeInt16_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ / PInt32(Right)^; end;
procedure lpeInt16_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ / PUInt64(Right)^; end;
procedure lpeInt16_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ / PInt64(Right)^; end;
procedure lpeInt16_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt16(Left)^ / PSingle(Right)^; end;
procedure lpeInt16_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt16(Left)^ / PDouble(Right)^; end;
procedure lpeInt16_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt16(Left)^ / PCurrency(Right)^; end;
procedure lpeInt16_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ / PExtended(Right)^; end;
procedure lpeInt16_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ / PVariant(Right)^; end;
procedure lpeUInt32_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ / PUInt8(Right)^; end;
procedure lpeUInt32_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ / PInt8(Right)^; end;
procedure lpeUInt32_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ / PUInt16(Right)^; end;
procedure lpeUInt32_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ / PInt16(Right)^; end;
procedure lpeUInt32_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ / PUInt32(Right)^; end;
procedure lpeUInt32_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ / PInt32(Right)^; end;
procedure lpeUInt32_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ / PUInt64(Right)^; end;
procedure lpeUInt32_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ / PInt64(Right)^; end;
procedure lpeUInt32_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt32(Left)^ / PSingle(Right)^; end;
procedure lpeUInt32_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt32(Left)^ / PDouble(Right)^; end;
procedure lpeUInt32_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt32(Left)^ / PCurrency(Right)^; end;
procedure lpeUInt32_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ / PExtended(Right)^; end;
procedure lpeUInt32_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ / PVariant(Right)^; end;
procedure lpeInt32_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ / PUInt8(Right)^; end;
procedure lpeInt32_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ / PInt8(Right)^; end;
procedure lpeInt32_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ / PUInt16(Right)^; end;
procedure lpeInt32_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ / PInt16(Right)^; end;
procedure lpeInt32_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ / PUInt32(Right)^; end;
procedure lpeInt32_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ / PInt32(Right)^; end;
procedure lpeInt32_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ / PUInt64(Right)^; end;
procedure lpeInt32_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ / PInt64(Right)^; end;
procedure lpeInt32_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt32(Left)^ / PSingle(Right)^; end;
procedure lpeInt32_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt32(Left)^ / PDouble(Right)^; end;
procedure lpeInt32_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt32(Left)^ / PCurrency(Right)^; end;
procedure lpeInt32_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ / PExtended(Right)^; end;
procedure lpeInt32_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ / PVariant(Right)^; end;
procedure lpeUInt64_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ / PUInt8(Right)^; end;
procedure lpeUInt64_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ / PInt8(Right)^; end;
procedure lpeUInt64_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ / PUInt16(Right)^; end;
procedure lpeUInt64_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ / PInt16(Right)^; end;
procedure lpeUInt64_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ / PUInt32(Right)^; end;
procedure lpeUInt64_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ / PInt32(Right)^; end;
procedure lpeUInt64_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ / PUInt64(Right)^; end;
procedure lpeUInt64_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ / PInt64(Right)^; end;
procedure lpeUInt64_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt64(Left)^ / PSingle(Right)^; end;
procedure lpeUInt64_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt64(Left)^ / PDouble(Right)^; end;
procedure lpeUInt64_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt64(Left)^ / PCurrency(Right)^; end;
procedure lpeUInt64_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ / PExtended(Right)^; end;
procedure lpeUInt64_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ / PVariant(Right)^; end;
procedure lpeInt64_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ / PUInt8(Right)^; end;
procedure lpeInt64_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ / PInt8(Right)^; end;
procedure lpeInt64_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ / PUInt16(Right)^; end;
procedure lpeInt64_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ / PInt16(Right)^; end;
procedure lpeInt64_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ / PUInt32(Right)^; end;
procedure lpeInt64_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ / PInt32(Right)^; end;
procedure lpeInt64_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ / PUInt64(Right)^; end;
procedure lpeInt64_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ / PInt64(Right)^; end;
procedure lpeInt64_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt64(Left)^ / PSingle(Right)^; end;
procedure lpeInt64_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt64(Left)^ / PDouble(Right)^; end;
procedure lpeInt64_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt64(Left)^ / PCurrency(Right)^; end;
procedure lpeInt64_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ / PExtended(Right)^; end;
procedure lpeInt64_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ / PVariant(Right)^; end;
procedure lpeSingle_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ / PUInt8(Right)^; end;
procedure lpeSingle_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ / PInt8(Right)^; end;
procedure lpeSingle_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ / PUInt16(Right)^; end;
procedure lpeSingle_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ / PInt16(Right)^; end;
procedure lpeSingle_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ / PUInt32(Right)^; end;
procedure lpeSingle_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ / PInt32(Right)^; end;
procedure lpeSingle_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ / PUInt64(Right)^; end;
procedure lpeSingle_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ / PInt64(Right)^; end;
procedure lpeSingle_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ / PSingle(Right)^; end;
procedure lpeSingle_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PSingle(Left)^ / PDouble(Right)^; end;
procedure lpeSingle_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PSingle(Left)^ / PCurrency(Right)^; end;
procedure lpeSingle_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PSingle(Left)^ / PExtended(Right)^; end;
procedure lpeSingle_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PSingle(Left)^ / PVariant(Right)^; end;
procedure lpeDouble_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ / PUInt8(Right)^; end;
procedure lpeDouble_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ / PInt8(Right)^; end;
procedure lpeDouble_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ / PUInt16(Right)^; end;
procedure lpeDouble_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ / PInt16(Right)^; end;
procedure lpeDouble_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ / PUInt32(Right)^; end;
procedure lpeDouble_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ / PInt32(Right)^; end;
procedure lpeDouble_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ / PUInt64(Right)^; end;
procedure lpeDouble_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ / PInt64(Right)^; end;
procedure lpeDouble_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ / PSingle(Right)^; end;
procedure lpeDouble_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ / PDouble(Right)^; end;
procedure lpeDouble_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PDouble(Left)^ / PCurrency(Right)^; end;
procedure lpeDouble_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PDouble(Left)^ / PExtended(Right)^; end;
procedure lpeDouble_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PDouble(Left)^ / PVariant(Right)^; end;
procedure lpeCurrency_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PUInt8(Right)^; end;
procedure lpeCurrency_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PInt8(Right)^; end;
procedure lpeCurrency_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PUInt16(Right)^; end;
procedure lpeCurrency_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PInt16(Right)^; end;
procedure lpeCurrency_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PUInt32(Right)^; end;
procedure lpeCurrency_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PInt32(Right)^; end;
procedure lpeCurrency_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PUInt64(Right)^; end;
procedure lpeCurrency_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PInt64(Right)^; end;
procedure lpeCurrency_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PSingle(Right)^; end;
procedure lpeCurrency_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PDouble(Right)^; end;
procedure lpeCurrency_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PCurrency(Right)^; end;
procedure lpeCurrency_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ / PExtended(Right)^; end;
procedure lpeCurrency_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PCurrency(Left)^ / PVariant(Right)^; end;
procedure lpeExtended_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PUInt8(Right)^; end;
procedure lpeExtended_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PInt8(Right)^; end;
procedure lpeExtended_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PUInt16(Right)^; end;
procedure lpeExtended_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PInt16(Right)^; end;
procedure lpeExtended_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PUInt32(Right)^; end;
procedure lpeExtended_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PInt32(Right)^; end;
procedure lpeExtended_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PUInt64(Right)^; end;
procedure lpeExtended_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PInt64(Right)^; end;
procedure lpeExtended_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PSingle(Right)^; end;
procedure lpeExtended_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PDouble(Right)^; end;
procedure lpeExtended_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PExtended(Left)^ / PCurrency(Right)^; end;
procedure lpeExtended_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ / PExtended(Right)^; end;
procedure lpeExtended_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PExtended(Left)^ / PVariant(Right)^; end;
procedure lpeVariant_DIV_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PUInt8(Right)^; end;
procedure lpeVariant_DIV_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PInt8(Right)^; end;
procedure lpeVariant_DIV_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PUInt16(Right)^; end;
procedure lpeVariant_DIV_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PInt16(Right)^; end;
procedure lpeVariant_DIV_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PUInt32(Right)^; end;
procedure lpeVariant_DIV_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PInt32(Right)^; end;
procedure lpeVariant_DIV_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PUInt64(Right)^; end;
procedure lpeVariant_DIV_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PInt64(Right)^; end;
procedure lpeVariant_DIV_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PSingle(Right)^; end;
procedure lpeVariant_DIV_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PDouble(Right)^; end;
procedure lpeVariant_DIV_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PCurrency(Right)^; end;
procedure lpeVariant_DIV_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PExtended(Right)^; end;
procedure lpeVariant_DIV_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ / PVariant(Right)^; end;

// Solving substractions
procedure lpeUInt8_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) - Int32(PUInt8(Right)^); end;
procedure lpeUInt8_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) - Int32(PInt8(Right)^); end;
procedure lpeUInt8_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) - Int32(PUInt16(Right)^); end;
procedure lpeUInt8_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) - Int32(PInt16(Right)^); end;
procedure lpeUInt8_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt8(Left)^) - Int64(PUInt32(Right)^); end;
procedure lpeUInt8_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) - Int32(PInt32(Right)^); end;
procedure lpeUInt8_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt8(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt8(Left)^) - Int64(PInt64(Right)^); end;
procedure lpeUInt8_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt8(Left)^ - PSingle(Right)^; end;
procedure lpeUInt8_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt8(Left)^ - PDouble(Right)^; end;
procedure lpeUInt8_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt8(Left)^ - PCurrency(Right)^; end;
procedure lpeUInt8_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ - PExtended(Right)^; end;
procedure lpeUInt8_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ - PVariant(Right)^; end;
procedure lpeInt8_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) - Int32(PUInt8(Right)^); end;
procedure lpeInt8_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) - Int32(PInt8(Right)^); end;
procedure lpeInt8_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) - Int32(PUInt16(Right)^); end;
procedure lpeInt8_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) - Int32(PInt16(Right)^); end;
procedure lpeInt8_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) - Int64(PUInt32(Right)^); end;
procedure lpeInt8_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) - Int32(PInt32(Right)^); end;
procedure lpeInt8_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt8(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeInt8_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) - Int64(PInt64(Right)^); end;
procedure lpeInt8_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt8(Left)^ - PSingle(Right)^; end;
procedure lpeInt8_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt8(Left)^ - PDouble(Right)^; end;
procedure lpeInt8_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt8(Left)^ - PCurrency(Right)^; end;
procedure lpeInt8_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ - PExtended(Right)^; end;
procedure lpeInt8_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ - PVariant(Right)^; end;
procedure lpeUInt16_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) - Int32(PUInt8(Right)^); end;
procedure lpeUInt16_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) - Int32(PInt8(Right)^); end;
procedure lpeUInt16_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) - Int32(PUInt16(Right)^); end;
procedure lpeUInt16_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) - Int32(PInt16(Right)^); end;
procedure lpeUInt16_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt16(Left)^) - Int64(PUInt32(Right)^); end;
procedure lpeUInt16_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) - Int32(PInt32(Right)^); end;
procedure lpeUInt16_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt16(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt16(Left)^) - Int64(PInt64(Right)^); end;
procedure lpeUInt16_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt16(Left)^ - PSingle(Right)^; end;
procedure lpeUInt16_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt16(Left)^ - PDouble(Right)^; end;
procedure lpeUInt16_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt16(Left)^ - PCurrency(Right)^; end;
procedure lpeUInt16_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ - PExtended(Right)^; end;
procedure lpeUInt16_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ - PVariant(Right)^; end;
procedure lpeInt16_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) - Int32(PUInt8(Right)^); end;
procedure lpeInt16_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) - Int32(PInt8(Right)^); end;
procedure lpeInt16_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) - Int32(PUInt16(Right)^); end;
procedure lpeInt16_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) - Int32(PInt16(Right)^); end;
procedure lpeInt16_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) - Int64(PUInt32(Right)^); end;
procedure lpeInt16_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) - Int32(PInt32(Right)^); end;
procedure lpeInt16_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt16(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeInt16_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) - Int64(PInt64(Right)^); end;
procedure lpeInt16_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt16(Left)^ - PSingle(Right)^; end;
procedure lpeInt16_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt16(Left)^ - PDouble(Right)^; end;
procedure lpeInt16_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt16(Left)^ - PCurrency(Right)^; end;
procedure lpeInt16_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ - PExtended(Right)^; end;
procedure lpeInt16_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ - PVariant(Right)^; end;
procedure lpeUInt32_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) - Int64(PUInt8(Right)^); end;
procedure lpeUInt32_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) - Int64(PInt8(Right)^); end;
procedure lpeUInt32_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) - Int64(PUInt16(Right)^); end;
procedure lpeUInt32_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) - Int64(PInt16(Right)^); end;
procedure lpeUInt32_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) - Int64(PUInt32(Right)^); end;
procedure lpeUInt32_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) - Int64(PInt32(Right)^); end;
procedure lpeUInt32_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt32(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) - Int64(PInt64(Right)^); end;
procedure lpeUInt32_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt32(Left)^ - PSingle(Right)^; end;
procedure lpeUInt32_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt32(Left)^ - PDouble(Right)^; end;
procedure lpeUInt32_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt32(Left)^ - PCurrency(Right)^; end;
procedure lpeUInt32_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ - PExtended(Right)^; end;
procedure lpeUInt32_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ - PVariant(Right)^; end;
procedure lpeInt32_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ - PUInt8(Right)^; end;
procedure lpeInt32_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ - PInt8(Right)^; end;
procedure lpeInt32_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ - PUInt16(Right)^; end;
procedure lpeInt32_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ - PInt16(Right)^; end;
procedure lpeInt32_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) - Int64(PUInt32(Right)^); end;
procedure lpeInt32_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ - PInt32(Right)^; end;
procedure lpeInt32_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt32(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeInt32_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) - Int64(PInt64(Right)^); end;
procedure lpeInt32_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt32(Left)^ - PSingle(Right)^; end;
procedure lpeInt32_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt32(Left)^ - PDouble(Right)^; end;
procedure lpeInt32_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt32(Left)^ - PCurrency(Right)^; end;
procedure lpeInt32_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ - PExtended(Right)^; end;
procedure lpeInt32_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ - PVariant(Right)^; end;
procedure lpeUInt64_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ - PUInt8(Right)^; end;
procedure lpeUInt64_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ - PInt8(Right)^; end;
procedure lpeUInt64_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ - PUInt16(Right)^; end;
procedure lpeUInt64_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ - PInt16(Right)^; end;
procedure lpeUInt64_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ - PUInt32(Right)^; end;
procedure lpeUInt64_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ - PInt32(Right)^; end;
procedure lpeUInt64_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ - PUInt64(Right)^; end;
procedure lpeUInt64_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) - Int64(PInt64(Right)^); end;
procedure lpeUInt64_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt64(Left)^ - PSingle(Right)^; end;
procedure lpeUInt64_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt64(Left)^ - PDouble(Right)^; end;
procedure lpeUInt64_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt64(Left)^ - PCurrency(Right)^; end;
procedure lpeUInt64_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ - PExtended(Right)^; end;
procedure lpeUInt64_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ - PVariant(Right)^; end;
procedure lpeInt64_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ - PUInt8(Right)^; end;
procedure lpeInt64_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ - PInt8(Right)^; end;
procedure lpeInt64_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ - PUInt16(Right)^; end;
procedure lpeInt64_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ - PInt16(Right)^; end;
procedure lpeInt64_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ - PUInt32(Right)^; end;
procedure lpeInt64_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ - PInt32(Right)^; end;
procedure lpeInt64_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ - PUInt64(Right)^; end;
procedure lpeInt64_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ - PInt64(Right)^; end;
procedure lpeInt64_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt64(Left)^ - PSingle(Right)^; end;
procedure lpeInt64_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt64(Left)^ - PDouble(Right)^; end;
procedure lpeInt64_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt64(Left)^ - PCurrency(Right)^; end;
procedure lpeInt64_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ - PExtended(Right)^; end;
procedure lpeInt64_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ - PVariant(Right)^; end;
procedure lpeSingle_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ - PUInt8(Right)^; end;
procedure lpeSingle_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ - PInt8(Right)^; end;
procedure lpeSingle_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ - PUInt16(Right)^; end;
procedure lpeSingle_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ - PInt16(Right)^; end;
procedure lpeSingle_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ - PUInt32(Right)^; end;
procedure lpeSingle_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ - PInt32(Right)^; end;
procedure lpeSingle_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ - PUInt64(Right)^; end;
procedure lpeSingle_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ - PInt64(Right)^; end;
procedure lpeSingle_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ - PSingle(Right)^; end;
procedure lpeSingle_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PSingle(Left)^ - PDouble(Right)^; end;
procedure lpeSingle_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PSingle(Left)^ - PCurrency(Right)^; end;
procedure lpeSingle_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PSingle(Left)^ - PExtended(Right)^; end;
procedure lpeSingle_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PSingle(Left)^ - PVariant(Right)^; end;
procedure lpeDouble_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ - PUInt8(Right)^; end;
procedure lpeDouble_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ - PInt8(Right)^; end;
procedure lpeDouble_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ - PUInt16(Right)^; end;
procedure lpeDouble_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ - PInt16(Right)^; end;
procedure lpeDouble_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ - PUInt32(Right)^; end;
procedure lpeDouble_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ - PInt32(Right)^; end;
procedure lpeDouble_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ - PUInt64(Right)^; end;
procedure lpeDouble_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ - PInt64(Right)^; end;
procedure lpeDouble_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ - PSingle(Right)^; end;
procedure lpeDouble_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ - PDouble(Right)^; end;
procedure lpeDouble_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PDouble(Left)^ - PCurrency(Right)^; end;
procedure lpeDouble_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PDouble(Left)^ - PExtended(Right)^; end;
procedure lpeDouble_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PDouble(Left)^ - PVariant(Right)^; end;
procedure lpeCurrency_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PUInt8(Right)^; end;
procedure lpeCurrency_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PInt8(Right)^; end;
procedure lpeCurrency_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PUInt16(Right)^; end;
procedure lpeCurrency_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PInt16(Right)^; end;
procedure lpeCurrency_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PUInt32(Right)^; end;
procedure lpeCurrency_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PInt32(Right)^; end;
procedure lpeCurrency_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PUInt64(Right)^; end;
procedure lpeCurrency_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PInt64(Right)^; end;
procedure lpeCurrency_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PSingle(Right)^; end;
procedure lpeCurrency_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PDouble(Right)^; end;
procedure lpeCurrency_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PCurrency(Right)^; end;
procedure lpeCurrency_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ - PExtended(Right)^; end;
procedure lpeCurrency_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PCurrency(Left)^ - PVariant(Right)^; end;
procedure lpeExtended_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PUInt8(Right)^; end;
procedure lpeExtended_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PInt8(Right)^; end;
procedure lpeExtended_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PUInt16(Right)^; end;
procedure lpeExtended_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PInt16(Right)^; end;
procedure lpeExtended_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PUInt32(Right)^; end;
procedure lpeExtended_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PInt32(Right)^; end;
procedure lpeExtended_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PUInt64(Right)^; end;
procedure lpeExtended_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PInt64(Right)^; end;
procedure lpeExtended_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PSingle(Right)^; end;
procedure lpeExtended_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PDouble(Right)^; end;
procedure lpeExtended_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PExtended(Left)^ - PCurrency(Right)^; end;
procedure lpeExtended_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ - PExtended(Right)^; end;
procedure lpeExtended_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PExtended(Left)^ - PVariant(Right)^; end;
procedure lpeVariant_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PUInt8(Right)^; end;
procedure lpeVariant_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PInt8(Right)^; end;
procedure lpeVariant_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PUInt16(Right)^; end;
procedure lpeVariant_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PInt16(Right)^; end;
procedure lpeVariant_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PUInt32(Right)^; end;
procedure lpeVariant_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PInt32(Right)^; end;
procedure lpeVariant_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PUInt64(Right)^; end;
procedure lpeVariant_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PInt64(Right)^; end;
procedure lpeVariant_SUB_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PSingle(Right)^; end;
procedure lpeVariant_SUB_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PDouble(Right)^; end;
procedure lpeVariant_SUB_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PCurrency(Right)^; end;
procedure lpeVariant_SUB_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PExtended(Right)^; end;
procedure lpeVariant_SUB_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ - PVariant(Right)^; end;

// Solving remainder
procedure lpeUInt8_MOD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) mod Int32(PUInt8(Right)^); end;
procedure lpeUInt8_MOD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) mod Int32(PInt8(Right)^); end;
procedure lpeUInt8_MOD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) mod Int32(PUInt16(Right)^); end;
procedure lpeUInt8_MOD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) mod Int32(PInt16(Right)^); end;
procedure lpeUInt8_MOD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) mod UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_MOD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) mod Int32(PInt32(Right)^); end;
procedure lpeUInt8_MOD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt8(Left)^) mod UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_MOD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt8(Left)^) mod Int64(PInt64(Right)^); end;
procedure lpeUInt8_MOD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ mod PVariant(Right)^; end;
procedure lpeInt8_MOD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) mod Int32(PUInt8(Right)^); end;
procedure lpeInt8_MOD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) mod Int32(PInt8(Right)^); end;
procedure lpeInt8_MOD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) mod Int32(PUInt16(Right)^); end;
procedure lpeInt8_MOD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) mod Int32(PInt16(Right)^); end;
procedure lpeInt8_MOD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) mod Int64(PUInt32(Right)^); end;
procedure lpeInt8_MOD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) mod Int32(PInt32(Right)^); end;
procedure lpeInt8_MOD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) mod Int64(PUInt64(Right)^); end;
procedure lpeInt8_MOD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) mod Int64(PInt64(Right)^); end;
procedure lpeInt8_MOD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ mod PVariant(Right)^; end;
procedure lpeUInt16_MOD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) mod Int32(PUInt8(Right)^); end;
procedure lpeUInt16_MOD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) mod Int32(PInt8(Right)^); end;
procedure lpeUInt16_MOD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) mod Int32(PUInt16(Right)^); end;
procedure lpeUInt16_MOD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) mod Int32(PInt16(Right)^); end;
procedure lpeUInt16_MOD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) mod UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_MOD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) mod Int32(PInt32(Right)^); end;
procedure lpeUInt16_MOD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt16(Left)^) mod UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_MOD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt16(Left)^) mod Int64(PInt64(Right)^); end;
procedure lpeUInt16_MOD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ mod PVariant(Right)^; end;
procedure lpeInt16_MOD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) mod Int32(PUInt8(Right)^); end;
procedure lpeInt16_MOD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) mod Int32(PInt8(Right)^); end;
procedure lpeInt16_MOD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) mod Int32(PUInt16(Right)^); end;
procedure lpeInt16_MOD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) mod Int32(PInt16(Right)^); end;
procedure lpeInt16_MOD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) mod Int64(PUInt32(Right)^); end;
procedure lpeInt16_MOD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) mod Int32(PInt32(Right)^); end;
procedure lpeInt16_MOD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) mod Int64(PUInt64(Right)^); end;
procedure lpeInt16_MOD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) mod Int64(PInt64(Right)^); end;
procedure lpeInt16_MOD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ mod PVariant(Right)^; end;
procedure lpeUInt32_MOD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ mod PUInt8(Right)^; end;
procedure lpeUInt32_MOD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) mod Int64(PInt8(Right)^); end;
procedure lpeUInt32_MOD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ mod PUInt16(Right)^; end;
procedure lpeUInt32_MOD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) mod Int64(PInt16(Right)^); end;
procedure lpeUInt32_MOD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ mod PUInt32(Right)^; end;
procedure lpeUInt32_MOD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) mod Int64(PInt32(Right)^); end;
procedure lpeUInt32_MOD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt32(Left)^) mod UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_MOD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) mod Int64(PInt64(Right)^); end;
procedure lpeUInt32_MOD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ mod PVariant(Right)^; end;
procedure lpeInt32_MOD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ mod PUInt8(Right)^; end;
procedure lpeInt32_MOD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ mod PInt8(Right)^; end;
procedure lpeInt32_MOD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ mod PUInt16(Right)^; end;
procedure lpeInt32_MOD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ mod PInt16(Right)^; end;
procedure lpeInt32_MOD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) mod Int64(PUInt32(Right)^); end;
procedure lpeInt32_MOD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ mod PInt32(Right)^; end;
procedure lpeInt32_MOD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) mod Int64(PUInt64(Right)^); end;
procedure lpeInt32_MOD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) mod Int64(PInt64(Right)^); end;
procedure lpeInt32_MOD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ mod PVariant(Right)^; end;
procedure lpeUInt64_MOD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ mod PUInt8(Right)^; end;
procedure lpeUInt64_MOD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) mod Int64(PInt8(Right)^); end;
procedure lpeUInt64_MOD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ mod PUInt16(Right)^; end;
procedure lpeUInt64_MOD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) mod Int64(PInt16(Right)^); end;
procedure lpeUInt64_MOD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ mod PUInt32(Right)^; end;
procedure lpeUInt64_MOD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) mod Int64(PInt32(Right)^); end;
procedure lpeUInt64_MOD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ mod PUInt64(Right)^; end;
procedure lpeUInt64_MOD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) mod Int64(PInt64(Right)^); end;
procedure lpeUInt64_MOD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ mod PVariant(Right)^; end;
procedure lpeInt64_MOD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ mod PUInt8(Right)^; end;
procedure lpeInt64_MOD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ mod PInt8(Right)^; end;
procedure lpeInt64_MOD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ mod PUInt16(Right)^; end;
procedure lpeInt64_MOD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ mod PInt16(Right)^; end;
procedure lpeInt64_MOD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ mod PUInt32(Right)^; end;
procedure lpeInt64_MOD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ mod PInt32(Right)^; end;
procedure lpeInt64_MOD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ mod PUInt64(Right)^; end;
procedure lpeInt64_MOD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ mod PInt64(Right)^; end;
procedure lpeInt64_MOD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ mod PVariant(Right)^; end;
procedure lpeVariant_MOD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ mod PUInt8(Right)^; end;
procedure lpeVariant_MOD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ mod PInt8(Right)^; end;
procedure lpeVariant_MOD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ mod PUInt16(Right)^; end;
procedure lpeVariant_MOD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ mod PInt16(Right)^; end;
procedure lpeVariant_MOD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ mod PUInt32(Right)^; end;
procedure lpeVariant_MOD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ mod PInt32(Right)^; end;
procedure lpeVariant_MOD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ mod PUInt64(Right)^; end;
procedure lpeVariant_MOD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ mod PInt64(Right)^; end;
procedure lpeVariant_MOD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ mod PVariant(Right)^; end;

// Solving multiplications
procedure lpeUInt8_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) * UInt32(PUInt8(Right)^); end;
procedure lpeUInt8_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) * Int32(PInt8(Right)^); end;
procedure lpeUInt8_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) * UInt32(PUInt16(Right)^); end;
procedure lpeUInt8_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) * Int32(PInt16(Right)^); end;
procedure lpeUInt8_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) * UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) * Int32(PInt32(Right)^); end;
procedure lpeUInt8_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt8(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt8(Left)^) * Int64(PInt64(Right)^); end;
procedure lpeUInt8_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt8(Left)^ * PSingle(Right)^; end;
procedure lpeUInt8_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt8(Left)^ * PDouble(Right)^; end;
procedure lpeUInt8_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt8(Left)^ * PCurrency(Right)^; end;
procedure lpeUInt8_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ * PExtended(Right)^; end;
procedure lpeUInt8_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ * PVariant(Right)^; end;
procedure lpeInt8_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) * Int32(PUInt8(Right)^); end;
procedure lpeInt8_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) * Int32(PInt8(Right)^); end;
procedure lpeInt8_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) * Int32(PUInt16(Right)^); end;
procedure lpeInt8_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) * Int32(PInt16(Right)^); end;
procedure lpeInt8_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) * Int64(PUInt32(Right)^); end;
procedure lpeInt8_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) * Int32(PInt32(Right)^); end;
procedure lpeInt8_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt8(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeInt8_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) * Int64(PInt64(Right)^); end;
procedure lpeInt8_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt8(Left)^ * PSingle(Right)^; end;
procedure lpeInt8_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt8(Left)^ * PDouble(Right)^; end;
procedure lpeInt8_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt8(Left)^ * PCurrency(Right)^; end;
procedure lpeInt8_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ * PExtended(Right)^; end;
procedure lpeInt8_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ * PVariant(Right)^; end;
procedure lpeUInt16_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) * UInt32(PUInt8(Right)^); end;
procedure lpeUInt16_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) * Int32(PInt8(Right)^); end;
procedure lpeUInt16_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) * UInt32(PUInt16(Right)^); end;
procedure lpeUInt16_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) * Int32(PInt16(Right)^); end;
procedure lpeUInt16_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) * UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) * Int32(PInt32(Right)^); end;
procedure lpeUInt16_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt16(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt16(Left)^) * Int64(PInt64(Right)^); end;
procedure lpeUInt16_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt16(Left)^ * PSingle(Right)^; end;
procedure lpeUInt16_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt16(Left)^ * PDouble(Right)^; end;
procedure lpeUInt16_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt16(Left)^ * PCurrency(Right)^; end;
procedure lpeUInt16_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ * PExtended(Right)^; end;
procedure lpeUInt16_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ * PVariant(Right)^; end;
procedure lpeInt16_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) * Int32(PUInt8(Right)^); end;
procedure lpeInt16_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) * Int32(PInt8(Right)^); end;
procedure lpeInt16_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) * Int32(PUInt16(Right)^); end;
procedure lpeInt16_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) * Int32(PInt16(Right)^); end;
procedure lpeInt16_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) * Int64(PUInt32(Right)^); end;
procedure lpeInt16_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) * Int32(PInt32(Right)^); end;
procedure lpeInt16_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt16(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeInt16_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) * Int64(PInt64(Right)^); end;
procedure lpeInt16_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt16(Left)^ * PSingle(Right)^; end;
procedure lpeInt16_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt16(Left)^ * PDouble(Right)^; end;
procedure lpeInt16_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt16(Left)^ * PCurrency(Right)^; end;
procedure lpeInt16_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ * PExtended(Right)^; end;
procedure lpeInt16_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ * PVariant(Right)^; end;
procedure lpeUInt32_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ * PUInt8(Right)^; end;
procedure lpeUInt32_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) * Int64(PInt8(Right)^); end;
procedure lpeUInt32_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ * PUInt16(Right)^; end;
procedure lpeUInt32_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) * Int64(PInt16(Right)^); end;
procedure lpeUInt32_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ * PUInt32(Right)^; end;
procedure lpeUInt32_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) * Int64(PInt32(Right)^); end;
procedure lpeUInt32_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt32(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) * Int64(PInt64(Right)^); end;
procedure lpeUInt32_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt32(Left)^ * PSingle(Right)^; end;
procedure lpeUInt32_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt32(Left)^ * PDouble(Right)^; end;
procedure lpeUInt32_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt32(Left)^ * PCurrency(Right)^; end;
procedure lpeUInt32_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ * PExtended(Right)^; end;
procedure lpeUInt32_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ * PVariant(Right)^; end;
procedure lpeInt32_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ * PUInt8(Right)^; end;
procedure lpeInt32_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ * PInt8(Right)^; end;
procedure lpeInt32_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ * PUInt16(Right)^; end;
procedure lpeInt32_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ * PInt16(Right)^; end;
procedure lpeInt32_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) * Int64(PUInt32(Right)^); end;
procedure lpeInt32_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ * PInt32(Right)^; end;
procedure lpeInt32_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt32(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeInt32_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) * Int64(PInt64(Right)^); end;
procedure lpeInt32_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt32(Left)^ * PSingle(Right)^; end;
procedure lpeInt32_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt32(Left)^ * PDouble(Right)^; end;
procedure lpeInt32_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt32(Left)^ * PCurrency(Right)^; end;
procedure lpeInt32_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ * PExtended(Right)^; end;
procedure lpeInt32_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ * PVariant(Right)^; end;
procedure lpeUInt64_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ * PUInt8(Right)^; end;
procedure lpeUInt64_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ * PInt8(Right)^; end;
procedure lpeUInt64_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ * PUInt16(Right)^; end;
procedure lpeUInt64_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ * PInt16(Right)^; end;
procedure lpeUInt64_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ * PUInt32(Right)^; end;
procedure lpeUInt64_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ * PInt32(Right)^; end;
procedure lpeUInt64_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ * PUInt64(Right)^; end;
procedure lpeUInt64_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) * Int64(PInt64(Right)^); end;
procedure lpeUInt64_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt64(Left)^ * PSingle(Right)^; end;
procedure lpeUInt64_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt64(Left)^ * PDouble(Right)^; end;
procedure lpeUInt64_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt64(Left)^ * PCurrency(Right)^; end;
procedure lpeUInt64_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ * PExtended(Right)^; end;
procedure lpeUInt64_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ * PVariant(Right)^; end;
procedure lpeInt64_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ * PUInt8(Right)^; end;
procedure lpeInt64_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ * PInt8(Right)^; end;
procedure lpeInt64_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ * PUInt16(Right)^; end;
procedure lpeInt64_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ * PInt16(Right)^; end;
procedure lpeInt64_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ * PUInt32(Right)^; end;
procedure lpeInt64_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ * PInt32(Right)^; end;
procedure lpeInt64_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ * PUInt64(Right)^; end;
procedure lpeInt64_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ * PInt64(Right)^; end;
procedure lpeInt64_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt64(Left)^ * PSingle(Right)^; end;
procedure lpeInt64_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt64(Left)^ * PDouble(Right)^; end;
procedure lpeInt64_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt64(Left)^ * PCurrency(Right)^; end;
procedure lpeInt64_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ * PExtended(Right)^; end;
procedure lpeInt64_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ * PVariant(Right)^; end;
procedure lpeSingle_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ * PUInt8(Right)^; end;
procedure lpeSingle_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ * PInt8(Right)^; end;
procedure lpeSingle_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ * PUInt16(Right)^; end;
procedure lpeSingle_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ * PInt16(Right)^; end;
procedure lpeSingle_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ * PUInt32(Right)^; end;
procedure lpeSingle_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ * PInt32(Right)^; end;
procedure lpeSingle_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ * PUInt64(Right)^; end;
procedure lpeSingle_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ * PInt64(Right)^; end;
procedure lpeSingle_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ * PSingle(Right)^; end;
procedure lpeSingle_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PSingle(Left)^ * PDouble(Right)^; end;
procedure lpeSingle_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PSingle(Left)^ * PCurrency(Right)^; end;
procedure lpeSingle_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PSingle(Left)^ * PExtended(Right)^; end;
procedure lpeSingle_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PSingle(Left)^ * PVariant(Right)^; end;
procedure lpeDouble_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ * PUInt8(Right)^; end;
procedure lpeDouble_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ * PInt8(Right)^; end;
procedure lpeDouble_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ * PUInt16(Right)^; end;
procedure lpeDouble_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ * PInt16(Right)^; end;
procedure lpeDouble_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ * PUInt32(Right)^; end;
procedure lpeDouble_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ * PInt32(Right)^; end;
procedure lpeDouble_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ * PUInt64(Right)^; end;
procedure lpeDouble_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ * PInt64(Right)^; end;
procedure lpeDouble_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ * PSingle(Right)^; end;
procedure lpeDouble_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ * PDouble(Right)^; end;
procedure lpeDouble_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PDouble(Left)^ * PCurrency(Right)^; end;
procedure lpeDouble_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PDouble(Left)^ * PExtended(Right)^; end;
procedure lpeDouble_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PDouble(Left)^ * PVariant(Right)^; end;
procedure lpeCurrency_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PUInt8(Right)^; end;
procedure lpeCurrency_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PInt8(Right)^; end;
procedure lpeCurrency_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PUInt16(Right)^; end;
procedure lpeCurrency_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PInt16(Right)^; end;
procedure lpeCurrency_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PUInt32(Right)^; end;
procedure lpeCurrency_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PInt32(Right)^; end;
procedure lpeCurrency_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PUInt64(Right)^; end;
procedure lpeCurrency_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PInt64(Right)^; end;
procedure lpeCurrency_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PSingle(Right)^; end;
procedure lpeCurrency_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PDouble(Right)^; end;
procedure lpeCurrency_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PCurrency(Right)^; end;
procedure lpeCurrency_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ * PExtended(Right)^; end;
procedure lpeCurrency_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PCurrency(Left)^ * PVariant(Right)^; end;
procedure lpeExtended_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PUInt8(Right)^; end;
procedure lpeExtended_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PInt8(Right)^; end;
procedure lpeExtended_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PUInt16(Right)^; end;
procedure lpeExtended_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PInt16(Right)^; end;
procedure lpeExtended_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PUInt32(Right)^; end;
procedure lpeExtended_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PInt32(Right)^; end;
procedure lpeExtended_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PUInt64(Right)^; end;
procedure lpeExtended_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PInt64(Right)^; end;
procedure lpeExtended_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PSingle(Right)^; end;
procedure lpeExtended_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PDouble(Right)^; end;
procedure lpeExtended_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PExtended(Left)^ * PCurrency(Right)^; end;
procedure lpeExtended_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ * PExtended(Right)^; end;
procedure lpeExtended_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PExtended(Left)^ * PVariant(Right)^; end;
procedure lpeVariant_MUL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PUInt8(Right)^; end;
procedure lpeVariant_MUL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PInt8(Right)^; end;
procedure lpeVariant_MUL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PUInt16(Right)^; end;
procedure lpeVariant_MUL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PInt16(Right)^; end;
procedure lpeVariant_MUL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PUInt32(Right)^; end;
procedure lpeVariant_MUL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PInt32(Right)^; end;
procedure lpeVariant_MUL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PUInt64(Right)^; end;
procedure lpeVariant_MUL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PInt64(Right)^; end;
procedure lpeVariant_MUL_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PSingle(Right)^; end;
procedure lpeVariant_MUL_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PDouble(Right)^; end;
procedure lpeVariant_MUL_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PCurrency(Right)^; end;
procedure lpeVariant_MUL_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PExtended(Right)^; end;
procedure lpeVariant_MUL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ * PVariant(Right)^; end;

// Solving Power
procedure lpeUInt8_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) ** UInt32(PUInt8(Right)^); end;
procedure lpeUInt8_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) ** Int32(PInt8(Right)^); end;
procedure lpeUInt8_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) ** UInt32(PUInt16(Right)^); end;
procedure lpeUInt8_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) ** Int32(PInt16(Right)^); end;
procedure lpeUInt8_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) ** UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) ** Int32(PInt32(Right)^); end;
procedure lpeUInt8_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt8(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt8(Left)^) ** Int64(PInt64(Right)^); end;
procedure lpeUInt8_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt8(Left)^ ** PSingle(Right)^; end;
procedure lpeUInt8_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt8(Left)^ ** PDouble(Right)^; end;
procedure lpeUInt8_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt8(Left)^ ** PCurrency(Right)^; end;
procedure lpeUInt8_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ ** PExtended(Right)^; end;
procedure lpeUInt8_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ ** PVariant(Right)^; end;
procedure lpeInt8_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) ** Int32(PUInt8(Right)^); end;
procedure lpeInt8_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) ** Int32(PInt8(Right)^); end;
procedure lpeInt8_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) ** Int32(PUInt16(Right)^); end;
procedure lpeInt8_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) ** Int32(PInt16(Right)^); end;
procedure lpeInt8_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) ** Int64(PUInt32(Right)^); end;
procedure lpeInt8_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) ** Int32(PInt32(Right)^); end;
procedure lpeInt8_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt8(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeInt8_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) ** Int64(PInt64(Right)^); end;
procedure lpeInt8_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt8(Left)^ ** PSingle(Right)^; end;
procedure lpeInt8_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt8(Left)^ ** PDouble(Right)^; end;
procedure lpeInt8_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt8(Left)^ ** PCurrency(Right)^; end;
procedure lpeInt8_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ ** PExtended(Right)^; end;
procedure lpeInt8_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ ** PVariant(Right)^; end;
procedure lpeUInt16_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) ** UInt32(PUInt8(Right)^); end;
procedure lpeUInt16_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) ** Int32(PInt8(Right)^); end;
procedure lpeUInt16_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) ** UInt32(PUInt16(Right)^); end;
procedure lpeUInt16_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) ** Int32(PInt16(Right)^); end;
procedure lpeUInt16_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) ** UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) ** Int32(PInt32(Right)^); end;
procedure lpeUInt16_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt16(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt16(Left)^) ** Int64(PInt64(Right)^); end;
procedure lpeUInt16_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt16(Left)^ ** PSingle(Right)^; end;
procedure lpeUInt16_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt16(Left)^ ** PDouble(Right)^; end;
procedure lpeUInt16_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt16(Left)^ ** PCurrency(Right)^; end;
procedure lpeUInt16_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ ** PExtended(Right)^; end;
procedure lpeUInt16_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ ** PVariant(Right)^; end;
procedure lpeInt16_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) ** Int32(PUInt8(Right)^); end;
procedure lpeInt16_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) ** Int32(PInt8(Right)^); end;
procedure lpeInt16_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) ** Int32(PUInt16(Right)^); end;
procedure lpeInt16_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) ** Int32(PInt16(Right)^); end;
procedure lpeInt16_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) ** Int64(PUInt32(Right)^); end;
procedure lpeInt16_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) ** Int32(PInt32(Right)^); end;
procedure lpeInt16_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt16(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeInt16_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) ** Int64(PInt64(Right)^); end;
procedure lpeInt16_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt16(Left)^ ** PSingle(Right)^; end;
procedure lpeInt16_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt16(Left)^ ** PDouble(Right)^; end;
procedure lpeInt16_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt16(Left)^ ** PCurrency(Right)^; end;
procedure lpeInt16_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ ** PExtended(Right)^; end;
procedure lpeInt16_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ ** PVariant(Right)^; end;
procedure lpeUInt32_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ ** PUInt8(Right)^; end;
procedure lpeUInt32_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) ** Int64(PInt8(Right)^); end;
procedure lpeUInt32_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ ** PUInt16(Right)^; end;
procedure lpeUInt32_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) ** Int64(PInt16(Right)^); end;
procedure lpeUInt32_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ ** PUInt32(Right)^; end;
procedure lpeUInt32_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) ** Int64(PInt32(Right)^); end;
procedure lpeUInt32_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt32(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) ** Int64(PInt64(Right)^); end;
procedure lpeUInt32_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt32(Left)^ ** PSingle(Right)^; end;
procedure lpeUInt32_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt32(Left)^ ** PDouble(Right)^; end;
procedure lpeUInt32_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt32(Left)^ ** PCurrency(Right)^; end;
procedure lpeUInt32_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ ** PExtended(Right)^; end;
procedure lpeUInt32_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ ** PVariant(Right)^; end;
procedure lpeInt32_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ ** PUInt8(Right)^; end;
procedure lpeInt32_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ ** PInt8(Right)^; end;
procedure lpeInt32_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ ** PUInt16(Right)^; end;
procedure lpeInt32_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ ** PInt16(Right)^; end;
procedure lpeInt32_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) ** Int64(PUInt32(Right)^); end;
procedure lpeInt32_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ ** PInt32(Right)^; end;
procedure lpeInt32_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt32(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeInt32_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) ** Int64(PInt64(Right)^); end;
procedure lpeInt32_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt32(Left)^ ** PSingle(Right)^; end;
procedure lpeInt32_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt32(Left)^ ** PDouble(Right)^; end;
procedure lpeInt32_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt32(Left)^ ** PCurrency(Right)^; end;
procedure lpeInt32_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ ** PExtended(Right)^; end;
procedure lpeInt32_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ ** PVariant(Right)^; end;
procedure lpeUInt64_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ ** PUInt8(Right)^; end;
procedure lpeUInt64_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ ** PInt8(Right)^; end;
procedure lpeUInt64_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ ** PUInt16(Right)^; end;
procedure lpeUInt64_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ ** PInt16(Right)^; end;
procedure lpeUInt64_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ ** PUInt32(Right)^; end;
procedure lpeUInt64_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ ** PInt32(Right)^; end;
procedure lpeUInt64_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ ** PUInt64(Right)^; end;
procedure lpeUInt64_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) ** Int64(PInt64(Right)^); end;
procedure lpeUInt64_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt64(Left)^ ** PSingle(Right)^; end;
procedure lpeUInt64_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt64(Left)^ ** PDouble(Right)^; end;
procedure lpeUInt64_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt64(Left)^ ** PCurrency(Right)^; end;
procedure lpeUInt64_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ ** PExtended(Right)^; end;
procedure lpeUInt64_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ ** PVariant(Right)^; end;
procedure lpeInt64_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ ** PUInt8(Right)^; end;
procedure lpeInt64_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ ** PInt8(Right)^; end;
procedure lpeInt64_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ ** PUInt16(Right)^; end;
procedure lpeInt64_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ ** PInt16(Right)^; end;
procedure lpeInt64_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ ** PUInt32(Right)^; end;
procedure lpeInt64_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ ** PInt32(Right)^; end;
procedure lpeInt64_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ ** PUInt64(Right)^; end;
procedure lpeInt64_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ ** PInt64(Right)^; end;
procedure lpeInt64_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt64(Left)^ ** PSingle(Right)^; end;
procedure lpeInt64_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt64(Left)^ ** PDouble(Right)^; end;
procedure lpeInt64_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt64(Left)^ ** PCurrency(Right)^; end;
procedure lpeInt64_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ ** PExtended(Right)^; end;
procedure lpeInt64_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ ** PVariant(Right)^; end;
procedure lpeSingle_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ ** PUInt8(Right)^; end;
procedure lpeSingle_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ ** PInt8(Right)^; end;
procedure lpeSingle_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ ** PUInt16(Right)^; end;
procedure lpeSingle_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ ** PInt16(Right)^; end;
procedure lpeSingle_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ ** PUInt32(Right)^; end;
procedure lpeSingle_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ ** PInt32(Right)^; end;
procedure lpeSingle_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ ** PUInt64(Right)^; end;
procedure lpeSingle_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ ** PInt64(Right)^; end;
procedure lpeSingle_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ ** PSingle(Right)^; end;
procedure lpeSingle_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PSingle(Left)^ ** PDouble(Right)^; end;
procedure lpeSingle_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PSingle(Left)^ ** PCurrency(Right)^; end;
procedure lpeSingle_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PSingle(Left)^ ** PExtended(Right)^; end;
procedure lpeSingle_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PSingle(Left)^ ** PVariant(Right)^; end;
procedure lpeDouble_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ ** PUInt8(Right)^; end;
procedure lpeDouble_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ ** PInt8(Right)^; end;
procedure lpeDouble_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ ** PUInt16(Right)^; end;
procedure lpeDouble_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ ** PInt16(Right)^; end;
procedure lpeDouble_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ ** PUInt32(Right)^; end;
procedure lpeDouble_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ ** PInt32(Right)^; end;
procedure lpeDouble_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ ** PUInt64(Right)^; end;
procedure lpeDouble_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ ** PInt64(Right)^; end;
procedure lpeDouble_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ ** PSingle(Right)^; end;
procedure lpeDouble_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ ** PDouble(Right)^; end;
procedure lpeDouble_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PDouble(Left)^ ** PCurrency(Right)^; end;
procedure lpeDouble_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PDouble(Left)^ ** PExtended(Right)^; end;
procedure lpeDouble_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PDouble(Left)^ ** PVariant(Right)^; end;
procedure lpeCurrency_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PUInt8(Right)^; end;
procedure lpeCurrency_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PInt8(Right)^; end;
procedure lpeCurrency_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PUInt16(Right)^; end;
procedure lpeCurrency_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PInt16(Right)^; end;
procedure lpeCurrency_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PUInt32(Right)^; end;
procedure lpeCurrency_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PInt32(Right)^; end;
procedure lpeCurrency_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PUInt64(Right)^; end;
procedure lpeCurrency_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PInt64(Right)^; end;
procedure lpeCurrency_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PSingle(Right)^; end;
procedure lpeCurrency_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PDouble(Right)^; end;
procedure lpeCurrency_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PCurrency(Right)^; end;
procedure lpeCurrency_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ ** PExtended(Right)^; end;
procedure lpeCurrency_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PCurrency(Left)^ ** PVariant(Right)^; end;
procedure lpeExtended_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PUInt8(Right)^; end;
procedure lpeExtended_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PInt8(Right)^; end;
procedure lpeExtended_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PUInt16(Right)^; end;
procedure lpeExtended_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PInt16(Right)^; end;
procedure lpeExtended_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PUInt32(Right)^; end;
procedure lpeExtended_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PInt32(Right)^; end;
procedure lpeExtended_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PUInt64(Right)^; end;
procedure lpeExtended_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PInt64(Right)^; end;
procedure lpeExtended_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PSingle(Right)^; end;
procedure lpeExtended_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PDouble(Right)^; end;
procedure lpeExtended_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PExtended(Left)^ ** PCurrency(Right)^; end;
procedure lpeExtended_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ ** PExtended(Right)^; end;
procedure lpeExtended_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PExtended(Left)^ ** PVariant(Right)^; end;
procedure lpeVariant_POW_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PUInt8(Right)^; end;
procedure lpeVariant_POW_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PInt8(Right)^; end;
procedure lpeVariant_POW_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PUInt16(Right)^; end;
procedure lpeVariant_POW_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PInt16(Right)^; end;
procedure lpeVariant_POW_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PUInt32(Right)^; end;
procedure lpeVariant_POW_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PInt32(Right)^; end;
procedure lpeVariant_POW_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PUInt64(Right)^; end;
procedure lpeVariant_POW_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PInt64(Right)^; end;
procedure lpeVariant_POW_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PSingle(Right)^; end;
procedure lpeVariant_POW_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PDouble(Right)^; end;
procedure lpeVariant_POW_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PCurrency(Right)^; end;
procedure lpeVariant_POW_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PExtended(Right)^; end;
procedure lpeVariant_POW_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ ** PVariant(Right)^; end;

procedure lpeUInt8_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := not PUInt8(Left)^; end;
procedure lpeInt8_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := not PInt8(Left)^; end;
procedure lpeUInt16_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := not PUInt16(Left)^; end;
procedure lpeInt16_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := not PInt16(Left)^; end;
procedure lpeUInt32_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := not PUInt32(Left)^; end;
procedure lpeInt32_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := not PInt32(Left)^; end;
procedure lpeUInt64_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := not PUInt64(Left)^; end;
procedure lpeInt64_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := not PInt64(Left)^; end;
procedure lpeVariant_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := not PVariant(Left)^; end;

procedure lpeUInt8_OR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PUInt8(Left)^ or PUInt8(Right)^; end;
procedure lpeUInt8_OR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) or Int32(PInt8(Right)^); end;
procedure lpeUInt8_OR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := UInt16(PUInt8(Left)^) or UInt16(PUInt16(Right)^); end;
procedure lpeUInt8_OR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) or Int32(PInt16(Right)^); end;
procedure lpeUInt8_OR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) or UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_OR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) or Int32(PInt32(Right)^); end;
procedure lpeUInt8_OR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt8(Left)^) or UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_OR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt8(Left)^) or Int64(PInt64(Right)^); end;
procedure lpeUInt8_OR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ or PVariant(Right)^; end;
procedure lpeInt8_OR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) or Int32(PUInt8(Right)^); end;
procedure lpeInt8_OR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PInt8(Left)^ or PInt8(Right)^; end;
procedure lpeInt8_OR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) or Int32(PUInt16(Right)^); end;
procedure lpeInt8_OR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := Int16(PInt8(Left)^) or Int16(PInt16(Right)^); end;
procedure lpeInt8_OR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) or Int64(PUInt32(Right)^); end;
procedure lpeInt8_OR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) or Int32(PInt32(Right)^); end;
procedure lpeInt8_OR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt8(Left)^) or UInt64(PUInt64(Right)^); end;
procedure lpeInt8_OR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) or Int64(PInt64(Right)^); end;
procedure lpeInt8_OR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ or PVariant(Right)^; end;
procedure lpeUInt16_OR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt16(Left)^ or PUInt8(Right)^; end;
procedure lpeUInt16_OR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) or Int32(PInt8(Right)^); end;
procedure lpeUInt16_OR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt16(Left)^ or PUInt16(Right)^; end;
procedure lpeUInt16_OR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) or Int32(PInt16(Right)^); end;
procedure lpeUInt16_OR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) or UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_OR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) or Int32(PInt32(Right)^); end;
procedure lpeUInt16_OR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt16(Left)^) or UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_OR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt16(Left)^) or Int64(PInt64(Right)^); end;
procedure lpeUInt16_OR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ or PVariant(Right)^; end;
procedure lpeInt16_OR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) or Int32(PUInt8(Right)^); end;
procedure lpeInt16_OR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt16(Left)^ or PInt8(Right)^; end;
procedure lpeInt16_OR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) or Int32(PUInt16(Right)^); end;
procedure lpeInt16_OR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt16(Left)^ or PInt16(Right)^; end;
procedure lpeInt16_OR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) or Int64(PUInt32(Right)^); end;
procedure lpeInt16_OR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) or Int32(PInt32(Right)^); end;
procedure lpeInt16_OR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt16(Left)^) or UInt64(PUInt64(Right)^); end;
procedure lpeInt16_OR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) or Int64(PInt64(Right)^); end;
procedure lpeInt16_OR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ or PVariant(Right)^; end;
procedure lpeUInt32_OR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ or PUInt8(Right)^; end;
procedure lpeUInt32_OR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) or Int64(PInt8(Right)^); end;
procedure lpeUInt32_OR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ or PUInt16(Right)^; end;
procedure lpeUInt32_OR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) or Int64(PInt16(Right)^); end;
procedure lpeUInt32_OR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ or PUInt32(Right)^; end;
procedure lpeUInt32_OR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) or Int64(PInt32(Right)^); end;
procedure lpeUInt32_OR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt32(Left)^) or UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_OR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) or Int64(PInt64(Right)^); end;
procedure lpeUInt32_OR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ or PVariant(Right)^; end;
procedure lpeInt32_OR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ or PUInt8(Right)^; end;
procedure lpeInt32_OR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ or PInt8(Right)^; end;
procedure lpeInt32_OR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ or PUInt16(Right)^; end;
procedure lpeInt32_OR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ or PInt16(Right)^; end;
procedure lpeInt32_OR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) or Int64(PUInt32(Right)^); end;
procedure lpeInt32_OR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ or PInt32(Right)^; end;
procedure lpeInt32_OR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt32(Left)^) or UInt64(PUInt64(Right)^); end;
procedure lpeInt32_OR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) or Int64(PInt64(Right)^); end;
procedure lpeInt32_OR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ or PVariant(Right)^; end;
procedure lpeUInt64_OR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ or PUInt8(Right)^; end;
procedure lpeUInt64_OR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ or PInt8(Right)^; end;
procedure lpeUInt64_OR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ or PUInt16(Right)^; end;
procedure lpeUInt64_OR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ or PInt16(Right)^; end;
procedure lpeUInt64_OR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ or PUInt32(Right)^; end;
procedure lpeUInt64_OR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ or PInt32(Right)^; end;
procedure lpeUInt64_OR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ or PUInt64(Right)^; end;
procedure lpeUInt64_OR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) or Int64(PInt64(Right)^); end;
procedure lpeUInt64_OR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ or PVariant(Right)^; end;
procedure lpeInt64_OR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ or PUInt8(Right)^; end;
procedure lpeInt64_OR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ or PInt8(Right)^; end;
procedure lpeInt64_OR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ or PUInt16(Right)^; end;
procedure lpeInt64_OR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ or PInt16(Right)^; end;
procedure lpeInt64_OR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ or PUInt32(Right)^; end;
procedure lpeInt64_OR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ or PInt32(Right)^; end;
procedure lpeInt64_OR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ or PUInt64(Right)^; end;
procedure lpeInt64_OR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ or PInt64(Right)^; end;
procedure lpeInt64_OR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ or PVariant(Right)^; end;
procedure lpeVariant_OR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ or PUInt8(Right)^; end;
procedure lpeVariant_OR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ or PInt8(Right)^; end;
procedure lpeVariant_OR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ or PUInt16(Right)^; end;
procedure lpeVariant_OR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ or PInt16(Right)^; end;
procedure lpeVariant_OR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ or PUInt32(Right)^; end;
procedure lpeVariant_OR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ or PInt32(Right)^; end;
procedure lpeVariant_OR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ or PUInt64(Right)^; end;
procedure lpeVariant_OR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ or PInt64(Right)^; end;
procedure lpeVariant_OR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ or PVariant(Right)^; end;

procedure lpeUInt8_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) + UInt32(PUInt8(Right)^); end;
procedure lpeUInt8_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) + Int32(PInt8(Right)^); end;
procedure lpeUInt8_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) + UInt32(PUInt16(Right)^); end;
procedure lpeUInt8_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) + Int32(PInt16(Right)^); end;
procedure lpeUInt8_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) + UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) + Int32(PInt32(Right)^); end;
procedure lpeUInt8_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt8(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt8(Left)^) + Int64(PInt64(Right)^); end;
procedure lpeUInt8_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt8(Left)^ + PSingle(Right)^; end;
procedure lpeUInt8_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt8(Left)^ + PDouble(Right)^; end;
procedure lpeUInt8_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt8(Left)^ + PCurrency(Right)^; end;
procedure lpeUInt8_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt8(Left)^ + PExtended(Right)^; end;
procedure lpeUInt8_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ + PVariant(Right)^; end;
procedure lpeInt8_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) + Int32(PUInt8(Right)^); end;
procedure lpeInt8_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) + Int32(PInt8(Right)^); end;
procedure lpeInt8_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) + Int32(PUInt16(Right)^); end;
procedure lpeInt8_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) + Int32(PInt16(Right)^); end;
procedure lpeInt8_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) + Int64(PUInt32(Right)^); end;
procedure lpeInt8_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) + Int32(PInt32(Right)^); end;
procedure lpeInt8_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt8(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeInt8_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) + Int64(PInt64(Right)^); end;
procedure lpeInt8_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt8(Left)^ + PSingle(Right)^; end;
procedure lpeInt8_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt8(Left)^ + PDouble(Right)^; end;
procedure lpeInt8_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt8(Left)^ + PCurrency(Right)^; end;
procedure lpeInt8_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt8(Left)^ + PExtended(Right)^; end;
procedure lpeInt8_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ + PVariant(Right)^; end;
procedure lpeUInt16_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) + UInt32(PUInt8(Right)^); end;
procedure lpeUInt16_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) + Int32(PInt8(Right)^); end;
procedure lpeUInt16_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) + UInt32(PUInt16(Right)^); end;
procedure lpeUInt16_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) + Int32(PInt16(Right)^); end;
procedure lpeUInt16_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) + UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) + Int32(PInt32(Right)^); end;
procedure lpeUInt16_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt16(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt16(Left)^) + Int64(PInt64(Right)^); end;
procedure lpeUInt16_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt16(Left)^ + PSingle(Right)^; end;
procedure lpeUInt16_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt16(Left)^ + PDouble(Right)^; end;
procedure lpeUInt16_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt16(Left)^ + PCurrency(Right)^; end;
procedure lpeUInt16_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt16(Left)^ + PExtended(Right)^; end;
procedure lpeUInt16_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ + PVariant(Right)^; end;
procedure lpeInt16_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) + Int32(PUInt8(Right)^); end;
procedure lpeInt16_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) + Int32(PInt8(Right)^); end;
procedure lpeInt16_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) + Int32(PUInt16(Right)^); end;
procedure lpeInt16_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) + Int32(PInt16(Right)^); end;
procedure lpeInt16_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) + Int64(PUInt32(Right)^); end;
procedure lpeInt16_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) + Int32(PInt32(Right)^); end;
procedure lpeInt16_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt16(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeInt16_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) + Int64(PInt64(Right)^); end;
procedure lpeInt16_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt16(Left)^ + PSingle(Right)^; end;
procedure lpeInt16_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt16(Left)^ + PDouble(Right)^; end;
procedure lpeInt16_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt16(Left)^ + PCurrency(Right)^; end;
procedure lpeInt16_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt16(Left)^ + PExtended(Right)^; end;
procedure lpeInt16_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ + PVariant(Right)^; end;
procedure lpeUInt32_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ + PUInt8(Right)^; end;
procedure lpeUInt32_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) + Int64(PInt8(Right)^); end;
procedure lpeUInt32_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ + PUInt16(Right)^; end;
procedure lpeUInt32_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) + Int64(PInt16(Right)^); end;
procedure lpeUInt32_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ + PUInt32(Right)^; end;
procedure lpeUInt32_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) + Int64(PInt32(Right)^); end;
procedure lpeUInt32_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt32(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) + Int64(PInt64(Right)^); end;
procedure lpeUInt32_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt32(Left)^ + PSingle(Right)^; end;
procedure lpeUInt32_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt32(Left)^ + PDouble(Right)^; end;
procedure lpeUInt32_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt32(Left)^ + PCurrency(Right)^; end;
procedure lpeUInt32_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt32(Left)^ + PExtended(Right)^; end;
procedure lpeUInt32_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ + PVariant(Right)^; end;
procedure lpeInt32_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ + PUInt8(Right)^; end;
procedure lpeInt32_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ + PInt8(Right)^; end;
procedure lpeInt32_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ + PUInt16(Right)^; end;
procedure lpeInt32_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ + PInt16(Right)^; end;
procedure lpeInt32_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) + Int64(PUInt32(Right)^); end;
procedure lpeInt32_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ + PInt32(Right)^; end;
procedure lpeInt32_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt32(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeInt32_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) + Int64(PInt64(Right)^); end;
procedure lpeInt32_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt32(Left)^ + PSingle(Right)^; end;
procedure lpeInt32_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt32(Left)^ + PDouble(Right)^; end;
procedure lpeInt32_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt32(Left)^ + PCurrency(Right)^; end;
procedure lpeInt32_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt32(Left)^ + PExtended(Right)^; end;
procedure lpeInt32_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ + PVariant(Right)^; end;
procedure lpeUInt64_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ + PUInt8(Right)^; end;
procedure lpeUInt64_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ + PInt8(Right)^; end;
procedure lpeUInt64_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ + PUInt16(Right)^; end;
procedure lpeUInt64_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ + PInt16(Right)^; end;
procedure lpeUInt64_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ + PUInt32(Right)^; end;
procedure lpeUInt64_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ + PInt32(Right)^; end;
procedure lpeUInt64_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ + PUInt64(Right)^; end;
procedure lpeUInt64_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) + Int64(PInt64(Right)^); end;
procedure lpeUInt64_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PUInt64(Left)^ + PSingle(Right)^; end;
procedure lpeUInt64_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PUInt64(Left)^ + PDouble(Right)^; end;
procedure lpeUInt64_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PUInt64(Left)^ + PCurrency(Right)^; end;
procedure lpeUInt64_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PUInt64(Left)^ + PExtended(Right)^; end;
procedure lpeUInt64_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ + PVariant(Right)^; end;
procedure lpeInt64_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ + PUInt8(Right)^; end;
procedure lpeInt64_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ + PInt8(Right)^; end;
procedure lpeInt64_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ + PUInt16(Right)^; end;
procedure lpeInt64_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ + PInt16(Right)^; end;
procedure lpeInt64_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ + PUInt32(Right)^; end;
procedure lpeInt64_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ + PInt32(Right)^; end;
procedure lpeInt64_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ + PUInt64(Right)^; end;
procedure lpeInt64_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ + PInt64(Right)^; end;
procedure lpeInt64_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PInt64(Left)^ + PSingle(Right)^; end;
procedure lpeInt64_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PInt64(Left)^ + PDouble(Right)^; end;
procedure lpeInt64_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PInt64(Left)^ + PCurrency(Right)^; end;
procedure lpeInt64_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PInt64(Left)^ + PExtended(Right)^; end;
procedure lpeInt64_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ + PVariant(Right)^; end;
procedure lpeSingle_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ + PUInt8(Right)^; end;
procedure lpeSingle_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ + PInt8(Right)^; end;
procedure lpeSingle_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ + PUInt16(Right)^; end;
procedure lpeSingle_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ + PInt16(Right)^; end;
procedure lpeSingle_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ + PUInt32(Right)^; end;
procedure lpeSingle_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ + PInt32(Right)^; end;
procedure lpeSingle_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ + PUInt64(Right)^; end;
procedure lpeSingle_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ + PInt64(Right)^; end;
procedure lpeSingle_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := PSingle(Left)^ + PSingle(Right)^; end;
procedure lpeSingle_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PSingle(Left)^ + PDouble(Right)^; end;
procedure lpeSingle_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PSingle(Left)^ + PCurrency(Right)^; end;
procedure lpeSingle_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PSingle(Left)^ + PExtended(Right)^; end;
procedure lpeSingle_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PSingle(Left)^ + PVariant(Right)^; end;
procedure lpeDouble_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ + PUInt8(Right)^; end;
procedure lpeDouble_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ + PInt8(Right)^; end;
procedure lpeDouble_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ + PUInt16(Right)^; end;
procedure lpeDouble_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ + PInt16(Right)^; end;
procedure lpeDouble_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ + PUInt32(Right)^; end;
procedure lpeDouble_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ + PInt32(Right)^; end;
procedure lpeDouble_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ + PUInt64(Right)^; end;
procedure lpeDouble_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ + PInt64(Right)^; end;
procedure lpeDouble_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ + PSingle(Right)^; end;
procedure lpeDouble_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := PDouble(Left)^ + PDouble(Right)^; end;
procedure lpeDouble_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PDouble(Left)^ + PCurrency(Right)^; end;
procedure lpeDouble_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PDouble(Left)^ + PExtended(Right)^; end;
procedure lpeDouble_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PDouble(Left)^ + PVariant(Right)^; end;
procedure lpeCurrency_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PUInt8(Right)^; end;
procedure lpeCurrency_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PInt8(Right)^; end;
procedure lpeCurrency_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PUInt16(Right)^; end;
procedure lpeCurrency_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PInt16(Right)^; end;
procedure lpeCurrency_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PUInt32(Right)^; end;
procedure lpeCurrency_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PInt32(Right)^; end;
procedure lpeCurrency_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PUInt64(Right)^; end;
procedure lpeCurrency_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PInt64(Right)^; end;
procedure lpeCurrency_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PSingle(Right)^; end;
procedure lpeCurrency_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PDouble(Right)^; end;
procedure lpeCurrency_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PCurrency(Right)^; end;
procedure lpeCurrency_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PCurrency(Left)^ + PExtended(Right)^; end;
procedure lpeCurrency_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PCurrency(Left)^ + PVariant(Right)^; end;
procedure lpeExtended_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PUInt8(Right)^; end;
procedure lpeExtended_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PInt8(Right)^; end;
procedure lpeExtended_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PUInt16(Right)^; end;
procedure lpeExtended_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PInt16(Right)^; end;
procedure lpeExtended_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PUInt32(Right)^; end;
procedure lpeExtended_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PInt32(Right)^; end;
procedure lpeExtended_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PUInt64(Right)^; end;
procedure lpeExtended_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PInt64(Right)^; end;
procedure lpeExtended_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PSingle(Right)^; end;
procedure lpeExtended_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PDouble(Right)^; end;
procedure lpeExtended_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := PExtended(Left)^ + PCurrency(Right)^; end;
procedure lpeExtended_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := PExtended(Left)^ + PExtended(Right)^; end;
procedure lpeExtended_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PExtended(Left)^ + PVariant(Right)^; end;
procedure lpeVariant_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PUInt8(Right)^; end;
procedure lpeVariant_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PInt8(Right)^; end;
procedure lpeVariant_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PUInt16(Right)^; end;
procedure lpeVariant_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PInt16(Right)^; end;
procedure lpeVariant_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PUInt32(Right)^; end;
procedure lpeVariant_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PInt32(Right)^; end;
procedure lpeVariant_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PUInt64(Right)^; end;
procedure lpeVariant_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PInt64(Right)^; end;
procedure lpeVariant_ADD_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PSingle(Right)^; end;
procedure lpeVariant_ADD_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PDouble(Right)^; end;
procedure lpeVariant_ADD_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PCurrency(Right)^; end;
procedure lpeVariant_ADD_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PExtended(Right)^; end;
procedure lpeVariant_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ + PVariant(Right)^; end;

procedure lpeUInt8_SHL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shl UInt32(PUInt8(Right)^); end;
procedure lpeUInt8_SHL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shl UInt32(PInt8(Right)^); end;
procedure lpeUInt8_SHL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shl UInt32(PUInt16(Right)^); end;
procedure lpeUInt8_SHL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shl UInt32(PInt16(Right)^); end;
procedure lpeUInt8_SHL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shl UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_SHL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shl UInt32(PInt32(Right)^); end;
procedure lpeUInt8_SHL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shl UInt32(PUInt64(Right)^); end;
procedure lpeUInt8_SHL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shl UInt32(PInt64(Right)^); end;
procedure lpeUInt8_SHL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ shl PVariant(Right)^; end;
procedure lpeInt8_SHL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shl Int32(PUInt8(Right)^); end;
procedure lpeInt8_SHL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shl Int32(PInt8(Right)^); end;
procedure lpeInt8_SHL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shl Int32(PUInt16(Right)^); end;
procedure lpeInt8_SHL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shl Int32(PInt16(Right)^); end;
procedure lpeInt8_SHL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shl Int32(PUInt32(Right)^); end;
procedure lpeInt8_SHL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shl Int32(PInt32(Right)^); end;
procedure lpeInt8_SHL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shl Int32(PUInt64(Right)^); end;
procedure lpeInt8_SHL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shl Int32(PInt64(Right)^); end;
procedure lpeInt8_SHL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ shl PVariant(Right)^; end;
procedure lpeUInt16_SHL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shl UInt32(PUInt8(Right)^); end;
procedure lpeUInt16_SHL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shl UInt32(PInt8(Right)^); end;
procedure lpeUInt16_SHL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shl UInt32(PUInt16(Right)^); end;
procedure lpeUInt16_SHL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shl UInt32(PInt16(Right)^); end;
procedure lpeUInt16_SHL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shl UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_SHL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shl UInt32(PInt32(Right)^); end;
procedure lpeUInt16_SHL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shl UInt32(PUInt64(Right)^); end;
procedure lpeUInt16_SHL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shl UInt32(PInt64(Right)^); end;
procedure lpeUInt16_SHL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ shl PVariant(Right)^; end;
procedure lpeInt16_SHL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shl Int32(PUInt8(Right)^); end;
procedure lpeInt16_SHL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shl Int32(PInt8(Right)^); end;
procedure lpeInt16_SHL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shl Int32(PUInt16(Right)^); end;
procedure lpeInt16_SHL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shl Int32(PInt16(Right)^); end;
procedure lpeInt16_SHL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shl Int32(PUInt32(Right)^); end;
procedure lpeInt16_SHL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shl Int32(PInt32(Right)^); end;
procedure lpeInt16_SHL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shl Int32(PUInt64(Right)^); end;
procedure lpeInt16_SHL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shl Int32(PInt64(Right)^); end;
procedure lpeInt16_SHL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ shl PVariant(Right)^; end;
procedure lpeUInt32_SHL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shl PUInt8(Right)^; end;
procedure lpeUInt32_SHL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shl PInt8(Right)^; end;
procedure lpeUInt32_SHL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shl PUInt16(Right)^; end;
procedure lpeUInt32_SHL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shl PInt16(Right)^; end;
procedure lpeUInt32_SHL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shl PUInt32(Right)^; end;
procedure lpeUInt32_SHL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shl PInt32(Right)^; end;
procedure lpeUInt32_SHL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shl PUInt64(Right)^; end;
procedure lpeUInt32_SHL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shl PInt64(Right)^; end;
procedure lpeUInt32_SHL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ shl PVariant(Right)^; end;
procedure lpeInt32_SHL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shl PUInt8(Right)^; end;
procedure lpeInt32_SHL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shl PInt8(Right)^; end;
procedure lpeInt32_SHL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shl PUInt16(Right)^; end;
procedure lpeInt32_SHL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shl PInt16(Right)^; end;
procedure lpeInt32_SHL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shl PUInt32(Right)^; end;
procedure lpeInt32_SHL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shl PInt32(Right)^; end;
procedure lpeInt32_SHL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shl PUInt64(Right)^; end;
procedure lpeInt32_SHL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shl PInt64(Right)^; end;
procedure lpeInt32_SHL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ shl PVariant(Right)^; end;
procedure lpeUInt64_SHL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shl PUInt8(Right)^; end;
procedure lpeUInt64_SHL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shl PInt8(Right)^; end;
procedure lpeUInt64_SHL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shl PUInt16(Right)^; end;
procedure lpeUInt64_SHL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shl PInt16(Right)^; end;
procedure lpeUInt64_SHL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shl PUInt32(Right)^; end;
procedure lpeUInt64_SHL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shl PInt32(Right)^; end;
procedure lpeUInt64_SHL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shl PUInt64(Right)^; end;
procedure lpeUInt64_SHL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shl PInt64(Right)^; end;
procedure lpeUInt64_SHL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ shl PVariant(Right)^; end;
procedure lpeInt64_SHL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shl PUInt8(Right)^; end;
procedure lpeInt64_SHL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shl PInt8(Right)^; end;
procedure lpeInt64_SHL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shl PUInt16(Right)^; end;
procedure lpeInt64_SHL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shl PInt16(Right)^; end;
procedure lpeInt64_SHL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shl PUInt32(Right)^; end;
procedure lpeInt64_SHL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shl PInt32(Right)^; end;
procedure lpeInt64_SHL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shl PUInt64(Right)^; end;
procedure lpeInt64_SHL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shl PInt64(Right)^; end;
procedure lpeInt64_SHL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ shl PVariant(Right)^; end;
procedure lpeVariant_SHL_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shl PUInt8(Right)^; end;
procedure lpeVariant_SHL_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shl PInt8(Right)^; end;
procedure lpeVariant_SHL_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shl PUInt16(Right)^; end;
procedure lpeVariant_SHL_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shl PInt16(Right)^; end;
procedure lpeVariant_SHL_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shl PUInt32(Right)^; end;
procedure lpeVariant_SHL_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shl PInt32(Right)^; end;
procedure lpeVariant_SHL_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shl PUInt64(Right)^; end;
procedure lpeVariant_SHL_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shl PInt64(Right)^; end;
procedure lpeVariant_SHL_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shl PVariant(Right)^; end;

procedure lpeUInt8_SHR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shr UInt32(PUInt8(Right)^); end;
procedure lpeUInt8_SHR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shr UInt32(PInt8(Right)^); end;
procedure lpeUInt8_SHR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shr UInt32(PUInt16(Right)^); end;
procedure lpeUInt8_SHR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shr UInt32(PInt16(Right)^); end;
procedure lpeUInt8_SHR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shr UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_SHR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shr UInt32(PInt32(Right)^); end;
procedure lpeUInt8_SHR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shr UInt32(PUInt64(Right)^); end;
procedure lpeUInt8_SHR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) shr UInt32(PInt64(Right)^); end;
procedure lpeUInt8_SHR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ shr PVariant(Right)^; end;
procedure lpeInt8_SHR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shr Int32(PUInt8(Right)^); end;
procedure lpeInt8_SHR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shr Int32(PInt8(Right)^); end;
procedure lpeInt8_SHR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shr Int32(PUInt16(Right)^); end;
procedure lpeInt8_SHR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shr Int32(PInt16(Right)^); end;
procedure lpeInt8_SHR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shr Int32(PUInt32(Right)^); end;
procedure lpeInt8_SHR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shr Int32(PInt32(Right)^); end;
procedure lpeInt8_SHR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shr Int32(PUInt64(Right)^); end;
procedure lpeInt8_SHR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) shr Int32(PInt64(Right)^); end;
procedure lpeInt8_SHR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ shr PVariant(Right)^; end;
procedure lpeUInt16_SHR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shr UInt32(PUInt8(Right)^); end;
procedure lpeUInt16_SHR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shr UInt32(PInt8(Right)^); end;
procedure lpeUInt16_SHR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shr UInt32(PUInt16(Right)^); end;
procedure lpeUInt16_SHR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shr UInt32(PInt16(Right)^); end;
procedure lpeUInt16_SHR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shr UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_SHR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shr UInt32(PInt32(Right)^); end;
procedure lpeUInt16_SHR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shr UInt32(PUInt64(Right)^); end;
procedure lpeUInt16_SHR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) shr UInt32(PInt64(Right)^); end;
procedure lpeUInt16_SHR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ shr PVariant(Right)^; end;
procedure lpeInt16_SHR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shr Int32(PUInt8(Right)^); end;
procedure lpeInt16_SHR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shr Int32(PInt8(Right)^); end;
procedure lpeInt16_SHR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shr Int32(PUInt16(Right)^); end;
procedure lpeInt16_SHR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shr Int32(PInt16(Right)^); end;
procedure lpeInt16_SHR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shr Int32(PUInt32(Right)^); end;
procedure lpeInt16_SHR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shr Int32(PInt32(Right)^); end;
procedure lpeInt16_SHR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shr Int32(PUInt64(Right)^); end;
procedure lpeInt16_SHR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) shr Int32(PInt64(Right)^); end;
procedure lpeInt16_SHR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ shr PVariant(Right)^; end;
procedure lpeUInt32_SHR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shr PUInt8(Right)^; end;
procedure lpeUInt32_SHR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shr PInt8(Right)^; end;
procedure lpeUInt32_SHR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shr PUInt16(Right)^; end;
procedure lpeUInt32_SHR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shr PInt16(Right)^; end;
procedure lpeUInt32_SHR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shr PUInt32(Right)^; end;
procedure lpeUInt32_SHR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shr PInt32(Right)^; end;
procedure lpeUInt32_SHR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shr PUInt64(Right)^; end;
procedure lpeUInt32_SHR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ shr PInt64(Right)^; end;
procedure lpeUInt32_SHR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ shr PVariant(Right)^; end;
procedure lpeInt32_SHR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shr PUInt8(Right)^; end;
procedure lpeInt32_SHR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shr PInt8(Right)^; end;
procedure lpeInt32_SHR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shr PUInt16(Right)^; end;
procedure lpeInt32_SHR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shr PInt16(Right)^; end;
procedure lpeInt32_SHR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shr PUInt32(Right)^; end;
procedure lpeInt32_SHR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shr PInt32(Right)^; end;
procedure lpeInt32_SHR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shr PUInt64(Right)^; end;
procedure lpeInt32_SHR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ shr PInt64(Right)^; end;
procedure lpeInt32_SHR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ shr PVariant(Right)^; end;
procedure lpeUInt64_SHR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shr PUInt8(Right)^; end;
procedure lpeUInt64_SHR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shr PInt8(Right)^; end;
procedure lpeUInt64_SHR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shr PUInt16(Right)^; end;
procedure lpeUInt64_SHR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shr PInt16(Right)^; end;
procedure lpeUInt64_SHR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shr PUInt32(Right)^; end;
procedure lpeUInt64_SHR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shr PInt32(Right)^; end;
procedure lpeUInt64_SHR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shr PUInt64(Right)^; end;
procedure lpeUInt64_SHR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ shr PInt64(Right)^; end;
procedure lpeUInt64_SHR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ shr PVariant(Right)^; end;
procedure lpeInt64_SHR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shr PUInt8(Right)^; end;
procedure lpeInt64_SHR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shr PInt8(Right)^; end;
procedure lpeInt64_SHR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shr PUInt16(Right)^; end;
procedure lpeInt64_SHR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shr PInt16(Right)^; end;
procedure lpeInt64_SHR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shr PUInt32(Right)^; end;
procedure lpeInt64_SHR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shr PInt32(Right)^; end;
procedure lpeInt64_SHR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shr PUInt64(Right)^; end;
procedure lpeInt64_SHR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ shr PInt64(Right)^; end;
procedure lpeInt64_SHR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ shr PVariant(Right)^; end;
procedure lpeVariant_SHR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shr PUInt8(Right)^; end;
procedure lpeVariant_SHR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shr PInt8(Right)^; end;
procedure lpeVariant_SHR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shr PUInt16(Right)^; end;
procedure lpeVariant_SHR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shr PInt16(Right)^; end;
procedure lpeVariant_SHR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shr PUInt32(Right)^; end;
procedure lpeVariant_SHR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shr PInt32(Right)^; end;
procedure lpeVariant_SHR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shr PUInt64(Right)^; end;
procedure lpeVariant_SHR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shr PInt64(Right)^; end;
procedure lpeVariant_SHR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ shr PVariant(Right)^; end;

procedure lpeUInt8_XOR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Dest)^ := PUInt8(Left)^ xor PUInt8(Right)^; end;
procedure lpeUInt8_XOR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) xor Int32(PInt8(Right)^); end;
procedure lpeUInt8_XOR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := UInt16(PUInt8(Left)^) xor UInt16(PUInt16(Right)^); end;
procedure lpeUInt8_XOR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) xor Int32(PInt16(Right)^); end;
procedure lpeUInt8_XOR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt8(Left)^) xor UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_XOR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt8(Left)^) xor Int32(PInt32(Right)^); end;
procedure lpeUInt8_XOR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt8(Left)^) xor UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_XOR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt8(Left)^) xor Int64(PInt64(Right)^); end;
procedure lpeUInt8_XOR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt8(Left)^ xor PVariant(Right)^; end;
procedure lpeInt8_XOR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) xor Int32(PUInt8(Right)^); end;
procedure lpeInt8_XOR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Dest)^ := PInt8(Left)^ xor PInt8(Right)^; end;
procedure lpeInt8_XOR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) xor Int32(PUInt16(Right)^); end;
procedure lpeInt8_XOR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := Int16(PInt8(Left)^) xor Int16(PInt16(Right)^); end;
procedure lpeInt8_XOR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) xor Int64(PUInt32(Right)^); end;
procedure lpeInt8_XOR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt8(Left)^) xor Int32(PInt32(Right)^); end;
procedure lpeInt8_XOR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt8(Left)^) xor UInt64(PUInt64(Right)^); end;
procedure lpeInt8_XOR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt8(Left)^) xor Int64(PInt64(Right)^); end;
procedure lpeInt8_XOR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt8(Left)^ xor PVariant(Right)^; end;
procedure lpeUInt16_XOR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt16(Left)^ xor PUInt8(Right)^; end;
procedure lpeUInt16_XOR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) xor Int32(PInt8(Right)^); end;
procedure lpeUInt16_XOR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Dest)^ := PUInt16(Left)^ xor PUInt16(Right)^; end;
procedure lpeUInt16_XOR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) xor Int32(PInt16(Right)^); end;
procedure lpeUInt16_XOR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := UInt32(PUInt16(Left)^) xor UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_XOR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PUInt16(Left)^) xor Int32(PInt32(Right)^); end;
procedure lpeUInt16_XOR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt16(Left)^) xor UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_XOR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt16(Left)^) xor Int64(PInt64(Right)^); end;
procedure lpeUInt16_XOR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt16(Left)^ xor PVariant(Right)^; end;
procedure lpeInt16_XOR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) xor Int32(PUInt8(Right)^); end;
procedure lpeInt16_XOR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt16(Left)^ xor PInt8(Right)^; end;
procedure lpeInt16_XOR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) xor Int32(PUInt16(Right)^); end;
procedure lpeInt16_XOR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Dest)^ := PInt16(Left)^ xor PInt16(Right)^; end;
procedure lpeInt16_XOR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) xor Int64(PUInt32(Right)^); end;
procedure lpeInt16_XOR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := Int32(PInt16(Left)^) xor Int32(PInt32(Right)^); end;
procedure lpeInt16_XOR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt16(Left)^) xor UInt64(PUInt64(Right)^); end;
procedure lpeInt16_XOR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt16(Left)^) xor Int64(PInt64(Right)^); end;
procedure lpeInt16_XOR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt16(Left)^ xor PVariant(Right)^; end;
procedure lpeUInt32_XOR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ xor PUInt8(Right)^; end;
procedure lpeUInt32_XOR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) xor Int64(PInt8(Right)^); end;
procedure lpeUInt32_XOR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ xor PUInt16(Right)^; end;
procedure lpeUInt32_XOR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) xor Int64(PInt16(Right)^); end;
procedure lpeUInt32_XOR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Dest)^ := PUInt32(Left)^ xor PUInt32(Right)^; end;
procedure lpeUInt32_XOR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) xor Int64(PInt32(Right)^); end;
procedure lpeUInt32_XOR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PUInt32(Left)^) xor UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_XOR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt32(Left)^) xor Int64(PInt64(Right)^); end;
procedure lpeUInt32_XOR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt32(Left)^ xor PVariant(Right)^; end;
procedure lpeInt32_XOR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ xor PUInt8(Right)^; end;
procedure lpeInt32_XOR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ xor PInt8(Right)^; end;
procedure lpeInt32_XOR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ xor PUInt16(Right)^; end;
procedure lpeInt32_XOR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ xor PInt16(Right)^; end;
procedure lpeInt32_XOR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) xor Int64(PUInt32(Right)^); end;
procedure lpeInt32_XOR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := PInt32(Left)^ xor PInt32(Right)^; end;
procedure lpeInt32_XOR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := UInt64(PInt32(Left)^) xor UInt64(PUInt64(Right)^); end;
procedure lpeInt32_XOR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PInt32(Left)^) xor Int64(PInt64(Right)^); end;
procedure lpeInt32_XOR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt32(Left)^ xor PVariant(Right)^; end;
procedure lpeUInt64_XOR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ xor PUInt8(Right)^; end;
procedure lpeUInt64_XOR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ xor PInt8(Right)^; end;
procedure lpeUInt64_XOR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ xor PUInt16(Right)^; end;
procedure lpeUInt64_XOR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ xor PInt16(Right)^; end;
procedure lpeUInt64_XOR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ xor PUInt32(Right)^; end;
procedure lpeUInt64_XOR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ xor PInt32(Right)^; end;
procedure lpeUInt64_XOR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := PUInt64(Left)^ xor PUInt64(Right)^; end;
procedure lpeUInt64_XOR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := Int64(PUInt64(Left)^) xor Int64(PInt64(Right)^); end;
procedure lpeUInt64_XOR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUInt64(Left)^ xor PVariant(Right)^; end;
procedure lpeInt64_XOR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ xor PUInt8(Right)^; end;
procedure lpeInt64_XOR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ xor PInt8(Right)^; end;
procedure lpeInt64_XOR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ xor PUInt16(Right)^; end;
procedure lpeInt64_XOR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ xor PInt16(Right)^; end;
procedure lpeInt64_XOR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ xor PUInt32(Right)^; end;
procedure lpeInt64_XOR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ xor PInt32(Right)^; end;
procedure lpeInt64_XOR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ xor PUInt64(Right)^; end;
procedure lpeInt64_XOR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := PInt64(Left)^ xor PInt64(Right)^; end;
procedure lpeInt64_XOR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PInt64(Left)^ xor PVariant(Right)^; end;
procedure lpeVariant_XOR_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ xor PUInt8(Right)^; end;
procedure lpeVariant_XOR_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ xor PInt8(Right)^; end;
procedure lpeVariant_XOR_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ xor PUInt16(Right)^; end;
procedure lpeVariant_XOR_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ xor PInt16(Right)^; end;
procedure lpeVariant_XOR_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ xor PUInt32(Right)^; end;
procedure lpeVariant_XOR_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ xor PInt32(Right)^; end;
procedure lpeVariant_XOR_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ xor PUInt64(Right)^; end;
procedure lpeVariant_XOR_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ xor PInt64(Right)^; end;
procedure lpeVariant_XOR_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PVariant(Left)^ xor PVariant(Right)^; end;

procedure lpeUInt8_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := -PUInt8(Left)^; end;
procedure lpeInt8_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := -PInt8(Left)^; end;
procedure lpeUInt16_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := -PUInt16(Left)^; end;
procedure lpeInt16_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := -PInt16(Left)^; end;
procedure lpeUInt32_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := -PUInt32(Left)^; end;
procedure lpeInt32_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Dest)^ := -PInt32(Left)^; end;
procedure lpeUInt64_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Dest)^ := -PUInt64(Left)^; end;
procedure lpeInt64_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Dest)^ := -PInt64(Left)^; end;
procedure lpeSingle_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Dest)^ := -PSingle(Left)^; end;
procedure lpeDouble_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Dest)^ := -PDouble(Left)^; end;
procedure lpeCurrency_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Dest)^ := -PCurrency(Left)^; end;
procedure lpeExtended_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Dest)^ := -PExtended(Left)^; end;
procedure lpeVariant_UMIN(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := -PVariant(Left)^; end;

//Variant
procedure lpeVariant_ASGN_Boolean(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PBoolean(Left)^; end;
procedure lpeVariant_ASGN_WBool(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PWordBool(Left)^; end;
procedure lpeVariant_ASGN_LBool(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PLongBool(Left)^; end;
procedure lpeVariant_ASGN_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PAnsiChar(Left)^; end;
procedure lpeVariant_ASGN_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PWideChar(Left)^; end;
procedure lpeVariant_ASGN_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PShortString(Left)^; end;
procedure lpeVariant_ASGN_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PAnsiString(Left)^; end;
procedure lpeVariant_ASGN_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PWideString(Left)^; end;
procedure lpeVariant_ASGN_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUnicodeString(Left)^; end;

//Boolean
procedure lpeBoolean_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PBoolean(Dest)^ := not PBoolean(Left)^; end;
procedure lpeWBool_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin if PWordBool(Left)^ then PUInt16(Dest)^ := Ord(False) else PUInt16(Dest)^ := Ord(True); end;
procedure lpeLBool_NOT(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin if PLongBool(Left)^ then PUInt32(Dest)^ := Ord(False) else PUInt32(Dest)^ := Ord(True); end;

procedure lpeBoolean_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PBoolean(Dest)^ := PVariant(Left)^; end;
procedure lpeWBool_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWordBool(Dest)^ := PVariant(Left)^; end;
procedure lpeLBool_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLongBool(Dest)^ := PVariant(Left)^; end;


//string + char
//ShortString
procedure lpeSString_EQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ = PShortString(Right)^; end;
procedure lpeSString_EQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ = PAnsiString(Right)^; end;
procedure lpeSString_EQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ = PWideString(Right)^; end;
procedure lpeSString_EQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ = PUnicodeString(Right)^; end;
procedure lpeSString_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ = PVariant(Right)^; end;
procedure lpeSString_EQ_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ = PAnsiChar(Right)^; end;
procedure lpeSString_EQ_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ = PWideChar(Right)^; end;
procedure lpeSString_GT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ > PShortString(Right)^; end;
procedure lpeSString_GT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ > PAnsiString(Right)^; end;
procedure lpeSString_GT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ > PWideString(Right)^; end;
procedure lpeSString_GT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ > PUnicodeString(Right)^; end;
procedure lpeSString_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ > PVariant(Right)^; end;
procedure lpeSString_GT_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ > PAnsiChar(Right)^; end;
procedure lpeSString_GT_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ > PWideChar(Right)^; end;
procedure lpeSString_GTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ >= PShortString(Right)^; end;
procedure lpeSString_GTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ >= PAnsiString(Right)^; end;
procedure lpeSString_GTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ >= PWideString(Right)^; end;
procedure lpeSString_GTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ >= PUnicodeString(Right)^; end;
procedure lpeSString_GTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ >= PVariant(Right)^; end;
procedure lpeSString_GTE_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ >= PAnsiChar(Right)^; end;
procedure lpeSString_GTE_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ >= PWideChar(Right)^; end;
procedure lpeSString_LT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ < PShortString(Right)^; end;
procedure lpeSString_LT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ < PAnsiString(Right)^; end;
procedure lpeSString_LT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ < PWideString(Right)^; end;
procedure lpeSString_LT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ < PUnicodeString(Right)^; end;
procedure lpeSString_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ < PVariant(Right)^; end;
procedure lpeSString_LT_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ < PAnsiChar(Right)^; end;
procedure lpeSString_LT_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ < PWideChar(Right)^; end;
procedure lpeSString_LTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <= PShortString(Right)^; end;
procedure lpeSString_LTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <= PAnsiString(Right)^; end;
procedure lpeSString_LTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <= PWideString(Right)^; end;
procedure lpeSString_LTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <= PUnicodeString(Right)^; end;
procedure lpeSString_LTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <= PVariant(Right)^; end;
procedure lpeSString_LTE_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <= PAnsiChar(Right)^; end;
procedure lpeSString_LTE_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <= PWideChar(Right)^; end;
procedure lpeSString_NEQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <> PShortString(Right)^; end;
procedure lpeSString_NEQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <> PAnsiString(Right)^; end;
procedure lpeSString_NEQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <> PWideString(Right)^; end;
procedure lpeSString_NEQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <> PUnicodeString(Right)^; end;
procedure lpeSString_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <> PVariant(Right)^; end;
procedure lpeSString_NEQ_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <> PAnsiChar(Right)^; end;
procedure lpeSString_NEQ_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PShortString(Left)^ <> PWideChar(Right)^; end;

procedure lpeSString_ASGN_SString_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Dest)^ := Copy(PShortString(Left)^, 1, PUInt8(Right)^); end;
procedure lpeSString_ASGN_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Dest)^ := PShortString(Left)^; end;
procedure lpeSString_ASGN_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Dest)^ := PAnsiString(Left)^; end;
procedure lpeSString_ASGN_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Dest)^ := PWideString(Left)^; end;
procedure lpeSString_ASGN_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Dest)^ := PUnicodeString(Left)^; end;
procedure lpeSString_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Dest)^ := PVariant(Left)^; end;
procedure lpeSString_ASGN_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Dest)^ := PAnsiChar(Left)^; end;
procedure lpeSString_ASGN_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Dest)^ := PWideChar(Left)^; end;
procedure lpeSString_ADD_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Dest)^ := PShortString(Left)^ + PShortString(Right)^; end;
procedure lpeSString_ADD_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PShortString(Left)^ + PAnsiString(Right)^; end;
procedure lpeSString_ADD_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PShortString(Left)^ + PWideString(Right)^; end;
procedure lpeSString_ADD_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PShortString(Left)^ + PUnicodeString(Right)^; end;
procedure lpeSString_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PShortString(Left)^ + PVariant(Right)^; end;
procedure lpeSString_ADD_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PShortString(Left)^ + PAnsiChar(Right)^; end;
procedure lpeSString_ADD_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PShortString(Left)^ + PWideChar(Right)^; end;

procedure lpeSString_ADDASGN_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Left)^ := PShortString(Left)^ + PShortString(Right)^; end;
procedure lpeSString_ADDASGN_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Left)^ := PShortString(Left)^ + PAnsiString(Right)^; end;
procedure lpeSString_ADDASGN_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Left)^ := PShortString(Left)^ + PWideString(Right)^; end;
procedure lpeSString_ADDASGN_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Left)^ := PShortString(Left)^ + PUnicodeString(Right)^; end;
procedure lpeSString_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Left)^ := PShortString(Left)^ + PVariant(Right)^; end;
procedure lpeSString_ADDASGN_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Left)^ := PShortString(Left)^ + PAnsiChar(Right)^; end;
procedure lpeSString_ADDASGN_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PShortString(Left)^ := PShortString(Left)^ + PWideChar(Right)^; end;

//AnsiString
procedure lpeAString_EQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ = PShortString(Right)^; end;
procedure lpeAString_EQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ = PAnsiString(Right)^; end;
procedure lpeAString_EQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ = PWideString(Right)^; end;
procedure lpeAString_EQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ = PUnicodeString(Right)^; end;
procedure lpeAString_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ = PVariant(Right)^; end;
procedure lpeAString_EQ_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ = PAnsiChar(Right)^; end;
procedure lpeAString_EQ_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ = PWideChar(Right)^; end;
procedure lpeAString_GT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ > PShortString(Right)^; end;
procedure lpeAString_GT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ > PAnsiString(Right)^; end;
procedure lpeAString_GT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ > PWideString(Right)^; end;
procedure lpeAString_GT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ > PUnicodeString(Right)^; end;
procedure lpeAString_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ > PVariant(Right)^; end;
procedure lpeAString_GT_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ > PAnsiChar(Right)^; end;
procedure lpeAString_GT_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ > PWideChar(Right)^; end;
procedure lpeAString_GTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ >= PShortString(Right)^; end;
procedure lpeAString_GTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ >= PAnsiString(Right)^; end;
procedure lpeAString_GTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ >= PWideString(Right)^; end;
procedure lpeAString_GTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ >= PUnicodeString(Right)^; end;
procedure lpeAString_GTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ >= PVariant(Right)^; end;
procedure lpeAString_GTE_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ >= PAnsiChar(Right)^; end;
procedure lpeAString_GTE_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ >= PWideChar(Right)^; end;
procedure lpeAString_LT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ < PShortString(Right)^; end;
procedure lpeAString_LT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ < PAnsiString(Right)^; end;
procedure lpeAString_LT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ < PWideString(Right)^; end;
procedure lpeAString_LT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ < PUnicodeString(Right)^; end;
procedure lpeAString_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ < PVariant(Right)^; end;
procedure lpeAString_LT_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ < PAnsiChar(Right)^; end;
procedure lpeAString_LT_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ < PWideChar(Right)^; end;
procedure lpeAString_LTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <= PShortString(Right)^; end;
procedure lpeAString_LTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <= PAnsiString(Right)^; end;
procedure lpeAString_LTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <= PWideString(Right)^; end;
procedure lpeAString_LTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <= PUnicodeString(Right)^; end;
procedure lpeAString_LTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <= PVariant(Right)^; end;
procedure lpeAString_LTE_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <= PAnsiChar(Right)^; end;
procedure lpeAString_LTE_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <= PWideChar(Right)^; end;
procedure lpeAString_NEQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <> PShortString(Right)^; end;
procedure lpeAString_NEQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <> PAnsiString(Right)^; end;
procedure lpeAString_NEQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <> PWideString(Right)^; end;
procedure lpeAString_NEQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <> PUnicodeString(Right)^; end;
procedure lpeAString_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <> PVariant(Right)^; end;
procedure lpeAString_NEQ_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <> PAnsiChar(Right)^; end;
procedure lpeAString_NEQ_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiString(Left)^ <> PWideChar(Right)^; end;

procedure lpeAString_ASGN_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PShortString(Left)^; end;
procedure lpeAString_ASGN_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PAnsiString(Left)^; end;
procedure lpeAString_ASGN_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PWideString(Left)^; end;
procedure lpeAString_ASGN_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PUnicodeString(Left)^; end;
procedure lpeAString_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PVariant(Left)^; end;
procedure lpeAString_ASGN_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PAnsiChar(Left)^; end;
procedure lpeAString_ASGN_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PWideChar(Left)^; end;
procedure lpeAString_ADD_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PAnsiString(Left)^ + PShortString(Right)^; end;
procedure lpeAString_ADD_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PAnsiString(Left)^ + PAnsiString(Right)^; end;
procedure lpeAString_ADD_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PAnsiString(Left)^ + PWideString(Right)^; end;
procedure lpeAString_ADD_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PAnsiString(Left)^ + PUnicodeString(Right)^; end;
procedure lpeAString_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PAnsiString(Left)^ + PVariant(Right)^; end;
procedure lpeAString_ADD_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PAnsiString(Left)^ + PAnsiChar(Right)^; end;
procedure lpeAString_ADD_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PAnsiString(Left)^ + PWideChar(Right)^; end;

procedure lpeAString_ADDASGN_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Left)^ := PAnsiString(Left)^ + PShortString(Right)^; end;
procedure lpeAString_ADDASGN_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Left)^ := PAnsiString(Left)^ + PAnsiString(Right)^; end;
procedure lpeAString_ADDASGN_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Left)^ := PAnsiString(Left)^ + PWideString(Right)^; end;
procedure lpeAString_ADDASGN_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Left)^ := PAnsiString(Left)^ + PUnicodeString(Right)^; end;
procedure lpeAString_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Left)^ := PAnsiString(Left)^ + PVariant(Right)^; end;
procedure lpeAString_ADDASGN_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Left)^ := PAnsiString(Left)^ + PAnsiChar(Right)^; end;
procedure lpeAString_ADDASGN_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Left)^ := PAnsiString(Left)^ + PWideChar(Right)^; end;

//WideString
procedure lpeWString_EQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ = PShortString(Right)^; end;
procedure lpeWString_EQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ = PAnsiString(Right)^; end;
procedure lpeWString_EQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ = PWideString(Right)^; end;
procedure lpeWString_EQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ = PUnicodeString(Right)^; end;
procedure lpeWString_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ = PVariant(Right)^; end;
procedure lpeWString_EQ_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ = PAnsiChar(Right)^; end;
procedure lpeWString_EQ_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ = PWideChar(Right)^; end;
procedure lpeWString_GT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ > PShortString(Right)^; end;
procedure lpeWString_GT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ > PAnsiString(Right)^; end;
procedure lpeWString_GT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ > PWideString(Right)^; end;
procedure lpeWString_GT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ > PUnicodeString(Right)^; end;
procedure lpeWString_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ > PVariant(Right)^; end;
procedure lpeWString_GT_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ > PAnsiChar(Right)^; end;
procedure lpeWString_GT_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ > PWideChar(Right)^; end;
procedure lpeWString_GTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ >= PShortString(Right)^; end;
procedure lpeWString_GTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ >= PAnsiString(Right)^; end;
procedure lpeWString_GTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ >= PWideString(Right)^; end;
procedure lpeWString_GTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ >= PUnicodeString(Right)^; end;
procedure lpeWString_GTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ >= PVariant(Right)^; end;
procedure lpeWString_GTE_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ >= PAnsiChar(Right)^; end;
procedure lpeWString_GTE_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ >= PWideChar(Right)^; end;
procedure lpeWString_LT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ < PShortString(Right)^; end;
procedure lpeWString_LT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ < PAnsiString(Right)^; end;
procedure lpeWString_LT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ < PWideString(Right)^; end;
procedure lpeWString_LT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ < PUnicodeString(Right)^; end;
procedure lpeWString_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ < PVariant(Right)^; end;
procedure lpeWString_LT_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ < PAnsiChar(Right)^; end;
procedure lpeWString_LT_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ < PWideChar(Right)^; end;
procedure lpeWString_LTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <= PShortString(Right)^; end;
procedure lpeWString_LTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <= PAnsiString(Right)^; end;
procedure lpeWString_LTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <= PWideString(Right)^; end;
procedure lpeWString_LTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <= PUnicodeString(Right)^; end;
procedure lpeWString_LTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <= PVariant(Right)^; end;
procedure lpeWString_LTE_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <= PAnsiChar(Right)^; end;
procedure lpeWString_LTE_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <= PWideChar(Right)^; end;
procedure lpeWString_NEQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <> PShortString(Right)^; end;
procedure lpeWString_NEQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <> PAnsiString(Right)^; end;
procedure lpeWString_NEQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <> PWideString(Right)^; end;
procedure lpeWString_NEQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <> PUnicodeString(Right)^; end;
procedure lpeWString_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <> PVariant(Right)^; end;
procedure lpeWString_NEQ_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <> PAnsiChar(Right)^; end;
procedure lpeWString_NEQ_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideString(Left)^ <> PWideChar(Right)^; end;

procedure lpeWString_ASGN_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PShortString(Left)^; end;
procedure lpeWString_ASGN_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PAnsiString(Left)^; end;
procedure lpeWString_ASGN_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PWideString(Left)^; end;
procedure lpeWString_ASGN_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PUnicodeString(Left)^; end;
procedure lpeWString_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PVariant(Left)^; end;
procedure lpeWString_ASGN_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PWideChar(Left)^; end;
procedure lpeWString_ASGN_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PAnsiChar(Left)^; end;
procedure lpeWString_ADD_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PWideString(Left)^ + PShortString(Right)^; end;
procedure lpeWString_ADD_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PWideString(Left)^ + PAnsiString(Right)^; end;
procedure lpeWString_ADD_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PWideString(Left)^ + PWideString(Right)^; end;
procedure lpeWString_ADD_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PWideString(Left)^ + PUnicodeString(Right)^; end;
procedure lpeWString_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PWideString(Left)^ + PVariant(Right)^; end;
procedure lpeWString_ADD_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PWideString(Left)^ + PWideChar(Right)^; end;
procedure lpeWString_ADD_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PWideString(Left)^ + PAnsiChar(Right)^; end;

procedure lpeWString_ADDASGN_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Left)^ := PWideString(Left)^ + PShortString(Right)^; end;
procedure lpeWString_ADDASGN_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Left)^ := PWideString(Left)^ + PAnsiString(Right)^; end;
procedure lpeWString_ADDASGN_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Left)^ := PWideString(Left)^ + PWideString(Right)^; end;
procedure lpeWString_ADDASGN_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Left)^ := PWideString(Left)^ + PUnicodeString(Right)^; end;
procedure lpeWString_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Left)^ := PWideString(Left)^ + PVariant(Right)^; end;
procedure lpeWString_ADDASGN_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Left)^ := PWideString(Left)^ + PWideChar(Right)^; end;
procedure lpeWString_ADDASGN_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Left)^ := PWideString(Left)^ + PAnsiChar(Right)^; end;


//UnicodeString
procedure lpeUString_EQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ = PShortString(Right)^; end;
procedure lpeUString_EQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ = PAnsiString(Right)^; end;
procedure lpeUString_EQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ = PWideString(Right)^; end;
procedure lpeUString_EQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ = PUnicodeString(Right)^; end;
procedure lpeUString_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ = PVariant(Right)^; end;
procedure lpeUString_EQ_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ = PAnsiChar(Right)^; end;
procedure lpeUString_EQ_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ = PWideChar(Right)^; end;
procedure lpeUString_GT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ > PShortString(Right)^; end;
procedure lpeUString_GT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ > PAnsiString(Right)^; end;
procedure lpeUString_GT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ > PWideString(Right)^; end;
procedure lpeUString_GT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ > PUnicodeString(Right)^; end;
procedure lpeUString_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ > PVariant(Right)^; end;
procedure lpeUString_GT_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ > PAnsiChar(Right)^; end;
procedure lpeUString_GT_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ > PWideChar(Right)^; end;
procedure lpeUString_GTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ >= PShortString(Right)^; end;
procedure lpeUString_GTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ >= PAnsiString(Right)^; end;
procedure lpeUString_GTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ >= PWideString(Right)^; end;
procedure lpeUString_GTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ >= PUnicodeString(Right)^; end;
procedure lpeUString_GTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ >= PVariant(Right)^; end;
procedure lpeUString_GTE_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ >= PAnsiChar(Right)^; end;
procedure lpeUString_GTE_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ >= PWideChar(Right)^; end;
procedure lpeUString_LT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ < PShortString(Right)^; end;
procedure lpeUString_LT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ < PAnsiString(Right)^; end;
procedure lpeUString_LT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ < PWideString(Right)^; end;
procedure lpeUString_LT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ < PUnicodeString(Right)^; end;
procedure lpeUString_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ < PVariant(Right)^; end;
procedure lpeUString_LT_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ < PAnsiChar(Right)^; end;
procedure lpeUString_LT_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ < PWideChar(Right)^; end;
procedure lpeUString_LTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <= PShortString(Right)^; end;
procedure lpeUString_LTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <= PAnsiString(Right)^; end;
procedure lpeUString_LTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <= PWideString(Right)^; end;
procedure lpeUString_LTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <= PUnicodeString(Right)^; end;
procedure lpeUString_LTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <= PVariant(Right)^; end;
procedure lpeUString_LTE_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <= PAnsiChar(Right)^; end;
procedure lpeUString_LTE_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <= PWideChar(Right)^; end;
procedure lpeUString_NEQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <> PShortString(Right)^; end;
procedure lpeUString_NEQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <> PAnsiString(Right)^; end;
procedure lpeUString_NEQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <> PWideString(Right)^; end;
procedure lpeUString_NEQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <> PUnicodeString(Right)^; end;
procedure lpeUString_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <> PVariant(Right)^; end;
procedure lpeUString_NEQ_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <> PAnsiChar(Right)^; end;
procedure lpeUString_NEQ_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PUnicodeString(Left)^ <> PWideChar(Right)^; end;

procedure lpeUString_ASGN_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PShortString(Left)^; end;
procedure lpeUString_ASGN_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PAnsiString(Left)^; end;
procedure lpeUString_ASGN_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PWideString(Left)^; end;
procedure lpeUString_ASGN_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PUnicodeString(Left)^; end;
procedure lpeUString_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PVariant(Left)^; end;
procedure lpeUString_ASGN_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PWideChar(Left)^; end;
procedure lpeUString_ASGN_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PAnsiChar(Left)^; end;
procedure lpeUString_ADD_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PUnicodeString(Left)^ + PShortString(Right)^; end;
procedure lpeUString_ADD_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PUnicodeString(Left)^ + PAnsiString(Right)^; end;
procedure lpeUString_ADD_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PUnicodeString(Left)^ + PWideString(Right)^; end;
procedure lpeUString_ADD_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PUnicodeString(Left)^ + PUnicodeString(Right)^; end;
procedure lpeUString_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PUnicodeString(Left)^ + PVariant(Right)^; end;
procedure lpeUString_ADD_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PUnicodeString(Left)^ + PWideChar(Right)^; end;
procedure lpeUString_ADD_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PUnicodeString(Left)^ + PAnsiChar(Right)^; end;

procedure lpeUString_ADDASGN_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Left)^ := PUnicodeString(Left)^ + PShortString(Right)^; end;
procedure lpeUString_ADDASGN_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Left)^ := PUnicodeString(Left)^ + PAnsiString(Right)^; end;
procedure lpeUString_ADDASGN_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Left)^ := PUnicodeString(Left)^ + PWideString(Right)^; end;
procedure lpeUString_ADDASGN_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Left)^ := PUnicodeString(Left)^ + PUnicodeString(Right)^; end;
procedure lpeUString_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Left)^ := PUnicodeString(Left)^ + PVariant(Right)^; end;
procedure lpeUString_ADDASGN_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Left)^ := PUnicodeString(Left)^ + PWideChar(Right)^; end;
procedure lpeUString_ADDASGN_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Left)^ := PUnicodeString(Left)^ + PAnsiChar(Right)^; end;


//AnsiChar
procedure lpeAChar_EQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ = PShortString(Right)^; end;
procedure lpeAChar_EQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ = PAnsiString(Right)^; end;
procedure lpeAChar_EQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ = PWideString(Right)^; end;
procedure lpeAChar_EQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ = PUnicodeString(Right)^; end;
procedure lpeAChar_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ = PVariant(Right)^; end;
procedure lpeAChar_GT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ > PShortString(Right)^; end;
procedure lpeAChar_GT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ > PAnsiString(Right)^; end;
procedure lpeAChar_GT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ > PWideString(Right)^; end;
procedure lpeAChar_GT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ > PUnicodeString(Right)^; end;
procedure lpeAChar_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ > PVariant(Right)^; end;
procedure lpeAChar_GTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ >= PShortString(Right)^; end;
procedure lpeAChar_GTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ >= PAnsiString(Right)^; end;
procedure lpeAChar_GTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ >= PWideString(Right)^; end;
procedure lpeAChar_GTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ >= PUnicodeString(Right)^; end;
procedure lpeAChar_GTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ >= PVariant(Right)^; end;
procedure lpeAChar_LT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ < PShortString(Right)^; end;
procedure lpeAChar_LT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ < PAnsiString(Right)^; end;
procedure lpeAChar_LT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ < PWideString(Right)^; end;
procedure lpeAChar_LT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ < PUnicodeString(Right)^; end;
procedure lpeAChar_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ < PVariant(Right)^; end;
procedure lpeAChar_LTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ <= PShortString(Right)^; end;
procedure lpeAChar_LTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ <= PAnsiString(Right)^; end;
procedure lpeAChar_LTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ <= PWideString(Right)^; end;
procedure lpeAChar_LTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ <= PUnicodeString(Right)^; end;
procedure lpeAChar_LTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ <= PVariant(Right)^; end;
procedure lpeAChar_NEQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ <> PShortString(Right)^; end;
procedure lpeAChar_NEQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ <> PAnsiString(Right)^; end;
procedure lpeAChar_NEQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ <> PWideString(Right)^; end;
procedure lpeAChar_NEQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ <> PUnicodeString(Right)^; end;
procedure lpeAChar_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PAnsiChar(Left)^ <> PVariant(Right)^; end;

{$IFDEF FPC}
procedure lpeAChar_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiChar(Dest)^ := PVariant(Left)^; end;
{$ENDIF}
procedure lpeAChar_ADD_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PAnsiChar(Left)^ + PShortString(Right)^; end;
procedure lpeAChar_ADD_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PAnsiChar(Left)^ + PAnsiString(Right)^; end;
procedure lpeAChar_ADD_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PAnsiChar(Left)^ + PWideString(Right)^; end;
procedure lpeAChar_ADD_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PAnsiChar(Left)^ + PUnicodeString(Right)^; end;
procedure lpeAChar_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PAnsiChar(Left)^ + PVariant(Right)^; end;
procedure lpeAChar_ADD_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PAnsiString(Dest)^ := PAnsiChar(Left)^ + PAnsiChar(Right)^; end;
procedure lpeAChar_ADD_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PAnsiChar(Left)^ + PWideChar(Right)^; end;


//WideChar
procedure lpeWChar_EQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ = PShortString(Right)^; end;
procedure lpeWChar_EQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ = PAnsiString(Right)^; end;
procedure lpeWChar_EQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ = PWideString(Right)^; end;
procedure lpeWChar_EQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ = PUnicodeString(Right)^; end;
procedure lpeWChar_EQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ = PVariant(Right)^; end;
procedure lpeWChar_GT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ > PShortString(Right)^; end;
procedure lpeWChar_GT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ > PAnsiString(Right)^; end;
procedure lpeWChar_GT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ > PWideString(Right)^; end;
procedure lpeWChar_GT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ > PUnicodeString(Right)^; end;
procedure lpeWChar_GT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ > PVariant(Right)^; end;
procedure lpeWChar_GTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ >= PShortString(Right)^; end;
procedure lpeWChar_GTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ >= PAnsiString(Right)^; end;
procedure lpeWChar_GTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ >= PWideString(Right)^; end;
procedure lpeWChar_GTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ >= PUnicodeString(Right)^; end;
procedure lpeWChar_GTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ >= PVariant(Right)^; end;
procedure lpeWChar_LT_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ < PShortString(Right)^; end;
procedure lpeWChar_LT_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ < PAnsiString(Right)^; end;
procedure lpeWChar_LT_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ < PWideString(Right)^; end;
procedure lpeWChar_LT_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ < PUnicodeString(Right)^; end;
procedure lpeWChar_LT_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ < PVariant(Right)^; end;
procedure lpeWChar_LTE_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ <= PShortString(Right)^; end;
procedure lpeWChar_LTE_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ <= PAnsiString(Right)^; end;
procedure lpeWChar_LTE_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ <= PWideString(Right)^; end;
procedure lpeWChar_LTE_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ <= PUnicodeString(Right)^; end;
procedure lpeWChar_LTE_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ <= PVariant(Right)^; end;
procedure lpeWChar_NEQ_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ <> PShortString(Right)^; end;
procedure lpeWChar_NEQ_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ <> PAnsiString(Right)^; end;
procedure lpeWChar_NEQ_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ <> PWideString(Right)^; end;
procedure lpeWChar_NEQ_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ <> PUnicodeString(Right)^; end;
procedure lpeWChar_NEQ_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PWideChar(Left)^ <> PVariant(Right)^; end;

{$IFDEF FPC}
procedure lpeWChar_ASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideChar(Dest)^ := PVariant(Left)^; end;
{$ENDIF}
procedure lpeWChar_ADD_SString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PWideChar(Left)^ + PShortString(Right)^; end;
procedure lpeWChar_ADD_AString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PWideChar(Left)^ + PAnsiString(Right)^; end;
procedure lpeWChar_ADD_WString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PWideString(Dest)^ := PWideChar(Left)^ + PWideString(Right)^; end;
procedure lpeWChar_ADD_UString(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PAnsiChar(Left)^ + PUnicodeString(Right)^; end;
procedure lpeWChar_ADD_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Dest)^ := PAnsiChar(Left)^ + PVariant(Right)^; end;
procedure lpeWChar_ADD_WChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PWideChar(Left)^ + PWideChar(Right)^; end;
procedure lpeWChar_ADD_AChar(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUnicodeString(Dest)^ := PWideChar(Left)^ + PAnsiChar(Right)^; end;


//Pointer
procedure lpePointer_EQ_Pointer(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PPointer(Left)^ = PPointer(Right)^; end;
procedure lpePointer_GT_Pointer(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PtrUInt(PPointer(Left)^) > PtrUInt(PPointer(Right)^); end;
procedure lpePointer_GTEQ_Pointer(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PtrUInt(PPointer(Left)^) >= PtrUInt(PPointer(Right)^); end;
procedure lpePointer_LT_Pointer(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PtrUInt(PPointer(Left)^) < PtrUInt(PPointer(Right)^); end;
procedure lpePointer_LTEQ_Pointer(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PtrUInt(PPointer(Left)^) <= PtrUInt(PPointer(Right)^); end;
procedure lpePointer_NEQ_Pointer(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PPointer(Left)^ <> PPointer(Right)^; end;
procedure lpePointer_ASGN_Pointer(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := PPointer(Left)^; end;
procedure lpePointer_ASGN_SMethod(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCodePos(Dest)^ := PtrUInt(PPointer(Left)^); end;

procedure lpePointer_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrUInt(PPointer(Left)^) + PUInt8(Right)^); end;
procedure lpePointer_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrInt(PPointer(Left)^) + PInt8(Right)^); end;
procedure lpePointer_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrUInt(PPointer(Left)^) + PUInt16(Right)^); end;
procedure lpePointer_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrInt(PPointer(Left)^) + PInt16(Right)^); end;
procedure lpePointer_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrUInt(PPointer(Left)^) + PUInt32(Right)^); end;
procedure lpePointer_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrInt(PPointer(Left)^) + PInt32(Right)^); end;
procedure lpePointer_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrUInt(PPointer(Left)^) + PUInt64(Right)^); end;
procedure lpePointer_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrInt(PPointer(Left)^) + PInt64(Right)^); end;

procedure lpePointer_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^  := Pointer(PtrUInt(PPointer(Left)^) + PUInt8(Right)^); end;
procedure lpePointer_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^   := Pointer(PtrInt(PPointer(Left)^) + PInt8(Right)^); end;
procedure lpePointer_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^ := Pointer(PtrUInt(PPointer(Left)^) + PUInt16(Right)^); end;
procedure lpePointer_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^  := Pointer(PtrInt(PPointer(Left)^) + PInt16(Right)^); end;
procedure lpePointer_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^ := Pointer(PtrUInt(PPointer(Left)^) + PUInt32(Right)^); end;
procedure lpePointer_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^  := Pointer(PtrInt(PPointer(Left)^) + PInt32(Right)^); end;
procedure lpePointer_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^ := Pointer(PtrUInt(PPointer(Left)^) + PUInt64(Right)^); end;
procedure lpePointer_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^  := Pointer(PtrInt(PPointer(Left)^) + PInt64(Right)^); end;

procedure lpePointer_SUB_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrUInt(PPointer(Left)^) - PUInt8(Right)^); end;
procedure lpePointer_SUB_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrInt(PPointer(Left)^) - PInt8(Right)^); end;
procedure lpePointer_SUB_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrUInt(PPointer(Left)^) - PUInt16(Right)^); end;
procedure lpePointer_SUB_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrInt(PPointer(Left)^) - PInt16(Right)^); end;
procedure lpePointer_SUB_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrUInt(PPointer(Left)^) - PUInt32(Right)^); end;
procedure lpePointer_SUB_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrInt(PPointer(Left)^) - PInt32(Right)^); end;
procedure lpePointer_SUB_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrUInt(PPointer(Left)^) - PUInt64(Right)^); end;
procedure lpePointer_SUB_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Dest)^ := Pointer(PtrInt(PPointer(Left)^) - PInt64(Right)^); end;

procedure lpePointer_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^  := Pointer(PtrUInt(PPointer(Left)^) - PUInt8(Right)^); end;
procedure lpePointer_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^   := Pointer(PtrInt(PPointer(Left)^) - PInt8(Right)^); end;
procedure lpePointer_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^ := Pointer(PtrUInt(PPointer(Left)^) - PUInt16(Right)^); end;
procedure lpePointer_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^  := Pointer(PtrInt(PPointer(Left)^) - PInt16(Right)^); end;
procedure lpePointer_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^ := Pointer(PtrUInt(PPointer(Left)^) - PUInt32(Right)^); end;
procedure lpePointer_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^  := Pointer(PtrInt(PPointer(Left)^) - PInt32(Right)^); end;
procedure lpePointer_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^ := Pointer(PtrUInt(PPointer(Left)^) - PUInt64(Right)^); end;
procedure lpePointer_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PPointer(Left)^  := Pointer(PtrInt(PPointer(Left)^) - PInt64(Right)^); end;


//Method
procedure lpeDot(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin TMethod(Dest^).Data := Left; TMethod(Dest^).Code := PPointer(Right)^; end;
procedure lpeSMethod_ASGN_Pointer(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCodePos(Dest)^ := PtrUInt(PPointer(Left)^); end;
procedure lpeSMethod_ASGN_SMethod(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCodePos(Dest)^ := PCodePos(Left)^; end;

//Set
//small set
procedure lpeSSet_EQ_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PLapeSmallSet(Left)^ = PLapeSmallSet(Right)^; end;
procedure lpeSSet_GTE_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PLapeSmallSet(Left)^ >= PLapeSmallSet(Right)^; end;
procedure lpeSSet_LTE_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PLapeSmallSet(Left)^ <= PLapeSmallSet(Right)^; end;
procedure lpeSSet_NE_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PLapeSmallSet(Left)^ <> PLapeSmallSet(Right)^; end;

procedure lpeInt8_IN_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeSmallEnum(PInt8(Left)^) in PLapeSmallSet(Right)^; end;
procedure lpeUInt8_IN_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeSmallEnum(PUInt8(Left)^) in PLapeSmallSet(Right)^; end;
procedure lpeInt16_IN_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeSmallEnum(PInt16(Left)^) in PLapeSmallSet(Right)^; end;
procedure lpeUInt16_IN_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeSmallEnum(PUInt16(Left)^) in PLapeSmallSet(Right)^; end;
procedure lpeInt32_IN_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeSmallEnum(PInt32(Left)^) in PLapeSmallSet(Right)^; end;
procedure lpeUInt32_IN_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeSmallEnum(PUInt32(Left)^) in PLapeSmallSet(Right)^; end;
procedure lpeInt64_IN_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeSmallEnum(PInt64(Left)^) in PLapeSmallSet(Right)^; end;
procedure lpeUInt64_IN_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeSmallEnum(PUInt64(Left)^) in PLapeSmallSet(Right)^; end;
procedure lpeSEnum_IN_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PLapeSmallEnum(Left)^ in PLapeSmallSet(Right)^; end;

procedure lpeSSet_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ + [ELapeSmallEnum(PInt8(Right)^)]; end;
procedure lpeSSet_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ + [ELapeSmallEnum(PUInt8(Right)^)]; end;
procedure lpeSSet_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ + [ELapeSmallEnum(PInt16(Right)^)]; end;
procedure lpeSSet_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ + [ELapeSmallEnum(PUInt16(Right)^)]; end;
procedure lpeSSet_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ + [ELapeSmallEnum(PInt32(Right)^)]; end;
procedure lpeSSet_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ + [ELapeSmallEnum(PUInt32(Right)^)]; end;
procedure lpeSSet_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ + [ELapeSmallEnum(PInt64(Right)^)]; end;
procedure lpeSSet_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ + [ELapeSmallEnum(PUInt64(Right)^)]; end;
procedure lpeSSet_ADD_SEnum(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ + [PLapeSmallEnum(Right)^]; end;

procedure lpeSSet_ASGN_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^; end;
procedure lpeSSet_ADD_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ + PLapeSmallSet(Right)^; end;
procedure lpeSSet_SUB_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ - PLapeSmallSet(Right)^; end;
procedure lpeSSet_MUL_SSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeSmallSet(Dest)^ := PLapeSmallSet(Left)^ * PLapeSmallSet(Right)^; end;

//large set
procedure lpeLSet_EQ_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PLapeLargeSet(Left)^ = PLapeLargeSet(Right)^; end;
procedure lpeLSet_GTE_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PLapeLargeSet(Left)^ >= PLapeLargeSet(Right)^; end;
procedure lpeLSet_LTE_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PLapeLargeSet(Left)^ <= PLapeLargeSet(Right)^; end;
procedure lpeLSet_NE_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PLapeLargeSet(Left)^ <> PLapeLargeSet(Right)^; end;

procedure lpeInt8_IN_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeLargeEnum(PInt8(Left)^) in PLapeLargeSet(Right)^; end;
procedure lpeUInt8_IN_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeLargeEnum(PUInt8(Left)^) in PLapeLargeSet(Right)^; end;
procedure lpeInt16_IN_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeLargeEnum(PInt16(Left)^) in PLapeLargeSet(Right)^; end;
procedure lpeUInt16_IN_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeLargeEnum(PUInt16(Left)^) in PLapeLargeSet(Right)^; end;
procedure lpeInt32_IN_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeLargeEnum(PInt32(Left)^) in PLapeLargeSet(Right)^; end;
procedure lpeUInt32_IN_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeLargeEnum(PUInt32(Left)^) in PLapeLargeSet(Right)^; end;
procedure lpeInt64_IN_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeLargeEnum(PInt64(Left)^) in PLapeLargeSet(Right)^; end;
procedure lpeUInt64_IN_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := ELapeLargeEnum(PUInt64(Left)^) in PLapeLargeSet(Right)^; end;
procedure lpeLEnum_IN_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PEvalBool(Dest)^ := PLapeLargeEnum(Left)^ in PLapeLargeSet(Right)^; end;

procedure lpeLSet_ADD_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ + [ELapeLargeEnum(PInt8(Right)^)]; end;
procedure lpeLSet_ADD_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ + [ELapeLargeEnum(PUInt8(Right)^)]; end;
procedure lpeLSet_ADD_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ + [ELapeLargeEnum(PInt16(Right)^)]; end;
procedure lpeLSet_ADD_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ + [ELapeLargeEnum(PUInt16(Right)^)]; end;
procedure lpeLSet_ADD_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ + [ELapeLargeEnum(PInt32(Right)^)]; end;
procedure lpeLSet_ADD_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ + [ELapeLargeEnum(PUInt32(Right)^)]; end;
procedure lpeLSet_ADD_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ + [ELapeLargeEnum(PInt64(Right)^)]; end;
procedure lpeLSet_ADD_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ + [ELapeLargeEnum(PUInt64(Right)^)]; end;
procedure lpeLSet_ADD_LEnum(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ + [PLapeLargeEnum(Right)^]; end;

procedure lpeLSet_ASGN_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^; end;
procedure lpeLSet_ADD_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ + PLapeLargeSet(Right)^; end;
procedure lpeLSet_SUB_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ - PLapeLargeSet(Right)^; end;
procedure lpeLSet_MUL_LSet(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PLapeLargeSet(Dest)^ := PLapeLargeSet(Left)^ * PLapeLargeSet(Right)^; end;


//Assignment by addition
procedure lpeUInt8_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) + UInt32(PUInt8(Right)^); end;
procedure lpeUInt8_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) + Int32(PInt8(Right)^); end;
procedure lpeUInt8_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) + UInt32(PUInt16(Right)^); end;
procedure lpeUInt8_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) + Int32(PInt16(Right)^); end;
procedure lpeUInt8_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) + UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) + Int32(PInt32(Right)^); end;
procedure lpeUInt8_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt64(PUInt8(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int64(PUInt8(Left)^) + Int64(PInt64(Right)^); end;
//procedure lpeUInt8_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt8(Left)^ + PSingle(Right)^; end;
//procedure lpeUInt8_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt8(Left)^ + PDouble(Right)^; end;
//procedure lpeUInt8_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt8(Left)^ + PCurrency(Right)^; end;
//procedure lpeUInt8_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt8(Left)^ + PExtended(Right)^; end;
//procedure lpeUInt8_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt8(Left)^ + PVariant(Right)^; end;
procedure lpeInt8_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) + Int32(PUInt8(Right)^); end;
procedure lpeInt8_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) + Int32(PInt8(Right)^); end;
procedure lpeInt8_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) + Int32(PUInt16(Right)^); end;
procedure lpeInt8_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) + Int32(PInt16(Right)^); end;
procedure lpeInt8_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int64(PInt8(Left)^) + Int64(PUInt32(Right)^); end;
procedure lpeInt8_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) + Int32(PInt32(Right)^); end;
procedure lpeInt8_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := UInt64(PInt8(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeInt8_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int64(PInt8(Left)^) + Int64(PInt64(Right)^); end;
//procedure lpeInt8_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt8(Left)^ + PSingle(Right)^; end;
//procedure lpeInt8_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt8(Left)^ + PDouble(Right)^; end;
//procedure lpeInt8_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt8(Left)^ + PCurrency(Right)^; end;
//procedure lpeInt8_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt8(Left)^ + PExtended(Right)^; end;
//procedure lpeInt8_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt8(Left)^ + PVariant(Right)^; end;
procedure lpeUInt16_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) + UInt32(PUInt8(Right)^); end;
procedure lpeUInt16_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) + Int32(PInt8(Right)^); end;
procedure lpeUInt16_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) + UInt32(PUInt16(Right)^); end;
procedure lpeUInt16_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) + Int32(PInt16(Right)^); end;
procedure lpeUInt16_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) + UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) + Int32(PInt32(Right)^); end;
procedure lpeUInt16_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt64(PUInt16(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int64(PUInt16(Left)^) + Int64(PInt64(Right)^); end;
//procedure lpeUInt16_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt16(Left)^ + PSingle(Right)^; end;
//procedure lpeUInt16_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt16(Left)^ + PDouble(Right)^; end;
//procedure lpeUInt16_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt16(Left)^ + PCurrency(Right)^; end;
//procedure lpeUInt16_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt16(Left)^ + PExtended(Right)^; end;
//procedure lpeUInt16_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt16(Left)^ + PVariant(Right)^; end;
procedure lpeInt16_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) + Int32(PUInt8(Right)^); end;
procedure lpeInt16_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) + Int32(PInt8(Right)^); end;
procedure lpeInt16_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) + Int32(PUInt16(Right)^); end;
procedure lpeInt16_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) + Int32(PInt16(Right)^); end;
procedure lpeInt16_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int64(PInt16(Left)^) + Int64(PUInt32(Right)^); end;
procedure lpeInt16_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) + Int32(PInt32(Right)^); end;
procedure lpeInt16_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := UInt64(PInt16(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeInt16_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int64(PInt16(Left)^) + Int64(PInt64(Right)^); end;
//procedure lpeInt16_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt16(Left)^ + PSingle(Right)^; end;
//procedure lpeInt16_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt16(Left)^ + PDouble(Right)^; end;
//procedure lpeInt16_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt16(Left)^ + PCurrency(Right)^; end;
//procedure lpeInt16_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt16(Left)^ + PExtended(Right)^; end;
//procedure lpeInt16_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt16(Left)^ + PVariant(Right)^; end;
procedure lpeUInt32_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ + PUInt8(Right)^; end;
procedure lpeUInt32_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ + Int64(PInt8(Right)^); end;
procedure lpeUInt32_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ + PUInt16(Right)^; end;
procedure lpeUInt32_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ + Int64(PInt16(Right)^); end;
procedure lpeUInt32_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ + PUInt32(Right)^; end;
procedure lpeUInt32_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ + Int64(PInt32(Right)^); end;
procedure lpeUInt32_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt32(Left)^ + UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ + Int64(PInt64(Right)^); end;
//procedure lpeUInt32_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt32(Left)^ + PSingle(Right)^; end;
//procedure lpeUInt32_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt32(Left)^ + PDouble(Right)^; end;
//procedure lpeUInt32_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt32(Left)^ + PCurrency(Right)^; end;
//procedure lpeUInt32_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt32(Left)^ + PExtended(Right)^; end;
//procedure lpeUInt32_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt32(Left)^ + PVariant(Right)^; end;
procedure lpeInt32_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ + PUInt8(Right)^; end;
procedure lpeInt32_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ + PInt8(Right)^; end;
procedure lpeInt32_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ + PUInt16(Right)^; end;
procedure lpeInt32_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ + PInt16(Right)^; end;
procedure lpeInt32_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := Int64(PInt32(Left)^) + Int64(PUInt32(Right)^); end;
procedure lpeInt32_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ + PInt32(Right)^; end;
procedure lpeInt32_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := UInt64(PInt32(Left)^) + UInt64(PUInt64(Right)^); end;
procedure lpeInt32_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := Int64(PInt32(Left)^) + Int64(PInt64(Right)^); end;
//procedure lpeInt32_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt32(Left)^ + PSingle(Right)^; end;
//procedure lpeInt32_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt32(Left)^ + PDouble(Right)^; end;
//procedure lpeInt32_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt32(Left)^ + PCurrency(Right)^; end;
//procedure lpeInt32_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt32(Left)^ + PExtended(Right)^; end;
//procedure lpeInt32_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt32(Left)^ + PVariant(Right)^; end;
procedure lpeUInt64_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ + PUInt8(Right)^; end;
procedure lpeUInt64_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ + PInt8(Right)^; end;
procedure lpeUInt64_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ + PUInt16(Right)^; end;
procedure lpeUInt64_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ + PInt16(Right)^; end;
procedure lpeUInt64_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ + PUInt32(Right)^; end;
procedure lpeUInt64_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ + PInt32(Right)^; end;
procedure lpeUInt64_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ + PUInt64(Right)^; end;
procedure lpeUInt64_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := Int64(PUInt64(Left)^) + Int64(PInt64(Right)^); end;
//procedure lpeUInt64_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt64(Left)^ + PSingle(Right)^; end;
//procedure lpeUInt64_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt64(Left)^ + PDouble(Right)^; end;
//procedure lpeUInt64_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt64(Left)^ + PCurrency(Right)^; end;
//procedure lpeUInt64_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt64(Left)^ + PExtended(Right)^; end;
//procedure lpeUInt64_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt64(Left)^ + PVariant(Right)^; end;
procedure lpeInt64_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ + PUInt8(Right)^; end;
procedure lpeInt64_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ + PInt8(Right)^; end;
procedure lpeInt64_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ + PUInt16(Right)^; end;
procedure lpeInt64_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ + PInt16(Right)^; end;
procedure lpeInt64_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ + PUInt32(Right)^; end;
procedure lpeInt64_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ + PInt32(Right)^; end;
procedure lpeInt64_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ + PUInt64(Right)^; end;
procedure lpeInt64_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ + PInt64(Right)^; end;
//procedure lpeInt64_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt64(Left)^ + PSingle(Right)^; end;
//procedure lpeInt64_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt64(Left)^ + PDouble(Right)^; end;
//procedure lpeInt64_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt64(Left)^ + PCurrency(Right)^; end;
//procedure lpeInt64_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt64(Left)^ + PExtended(Right)^; end;
//procedure lpeInt64_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt64(Left)^ + PVariant(Right)^; end;
procedure lpeSingle_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PUInt8(Right)^; end;
procedure lpeSingle_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PInt8(Right)^; end;
procedure lpeSingle_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PUInt16(Right)^; end;
procedure lpeSingle_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PInt16(Right)^; end;
procedure lpeSingle_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PUInt32(Right)^; end;
procedure lpeSingle_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PInt32(Right)^; end;
procedure lpeSingle_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PUInt64(Right)^; end;
procedure lpeSingle_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PInt64(Right)^; end;
procedure lpeSingle_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PSingle(Right)^; end;
procedure lpeSingle_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PDouble(Right)^; end;
//procedure lpeSingle_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PSingle(Left)^ + PCurrency(Right)^; end;
procedure lpeSingle_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ + PExtended(Right)^; end;
//procedure lpeSingle_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PSingle(Left)^ + PVariant(Right)^; end;
procedure lpeDouble_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PUInt8(Right)^; end;
procedure lpeDouble_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PInt8(Right)^; end;
procedure lpeDouble_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PUInt16(Right)^; end;
procedure lpeDouble_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PInt16(Right)^; end;
procedure lpeDouble_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PUInt32(Right)^; end;
procedure lpeDouble_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PInt32(Right)^; end;
procedure lpeDouble_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PUInt64(Right)^; end;
procedure lpeDouble_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PInt64(Right)^; end;
procedure lpeDouble_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PSingle(Right)^; end;
procedure lpeDouble_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PDouble(Right)^; end;
//procedure lpeDouble_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PDouble(Left)^ + PCurrency(Right)^; end;
procedure lpeDouble_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ + PExtended(Right)^; end;
//procedure lpeDouble_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PDouble(Left)^ + PVariant(Right)^; end;
procedure lpeCurrency_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PUInt8(Right)^; end;
procedure lpeCurrency_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PInt8(Right)^; end;
procedure lpeCurrency_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PUInt16(Right)^; end;
procedure lpeCurrency_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PInt16(Right)^; end;
procedure lpeCurrency_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PUInt32(Right)^; end;
procedure lpeCurrency_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PInt32(Right)^; end;
procedure lpeCurrency_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PUInt64(Right)^; end;
procedure lpeCurrency_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PInt64(Right)^; end;
procedure lpeCurrency_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PSingle(Right)^; end;
procedure lpeCurrency_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PDouble(Right)^; end;
procedure lpeCurrency_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PCurrency(Right)^; end;
procedure lpeCurrency_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ + PExtended(Right)^; end;
//procedure lpeCurrency_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PCurrency(Left)^ + PVariant(Right)^; end;
procedure lpeExtended_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PUInt8(Right)^; end;
procedure lpeExtended_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PInt8(Right)^; end;
procedure lpeExtended_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PUInt16(Right)^; end;
procedure lpeExtended_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PInt16(Right)^; end;
procedure lpeExtended_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PUInt32(Right)^; end;
procedure lpeExtended_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PInt32(Right)^; end;
procedure lpeExtended_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PUInt64(Right)^; end;
procedure lpeExtended_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PInt64(Right)^; end;
procedure lpeExtended_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PSingle(Right)^; end;
procedure lpeExtended_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PDouble(Right)^; end;
//procedure lpeExtended_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PExtended(Left)^ + PCurrency(Right)^; end;
procedure lpeExtended_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ + PExtended(Right)^; end;
//procedure lpeExtended_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PExtended(Left)^ + PVariant(Right)^; end;
procedure lpeVariant_ADDASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PUInt8(Right)^; end;
procedure lpeVariant_ADDASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PInt8(Right)^; end;
procedure lpeVariant_ADDASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PUInt16(Right)^; end;
procedure lpeVariant_ADDASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PInt16(Right)^; end;
procedure lpeVariant_ADDASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PUInt32(Right)^; end;
procedure lpeVariant_ADDASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PInt32(Right)^; end;
procedure lpeVariant_ADDASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PUInt64(Right)^; end;
procedure lpeVariant_ADDASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PInt64(Right)^; end;
procedure lpeVariant_ADDASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PSingle(Right)^; end;
procedure lpeVariant_ADDASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PDouble(Right)^; end;
procedure lpeVariant_ADDASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PCurrency(Right)^; end;
procedure lpeVariant_ADDASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PExtended(Right)^; end;
procedure lpeVariant_ADDASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ + PVariant(Right)^; end;

//Assignment by substraction.
procedure lpeUInt8_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) - UInt32(PUInt8(Right)^); end;
procedure lpeUInt8_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) - Int32(PInt8(Right)^); end;
procedure lpeUInt8_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) - UInt32(PUInt16(Right)^); end;
procedure lpeUInt8_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) - Int32(PInt16(Right)^); end;
procedure lpeUInt8_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) - UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) - Int32(PInt32(Right)^); end;
procedure lpeUInt8_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt64(PUInt8(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int64(PUInt8(Left)^) - Int64(PInt64(Right)^); end;
//procedure lpeUInt8_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt8(Left)^ - PSingle(Right)^; end;
//procedure lpeUInt8_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt8(Left)^ - PDouble(Right)^; end;
//procedure lpeUInt8_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt8(Left)^ - PCurrency(Right)^; end;
//procedure lpeUInt8_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt8(Left)^ - PExtended(Right)^; end;
//procedure lpeUInt8_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt8(Left)^ - PVariant(Right)^; end;
procedure lpeInt8_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) - Int32(PUInt8(Right)^); end;
procedure lpeInt8_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) - Int32(PInt8(Right)^); end;
procedure lpeInt8_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) - Int32(PUInt16(Right)^); end;
procedure lpeInt8_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) - Int32(PInt16(Right)^); end;
procedure lpeInt8_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int64(PInt8(Left)^) - Int64(PUInt32(Right)^); end;
procedure lpeInt8_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) - Int32(PInt32(Right)^); end;
procedure lpeInt8_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := UInt64(PInt8(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeInt8_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int64(PInt8(Left)^) - Int64(PInt64(Right)^); end;
//procedure lpeInt8_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt8(Left)^ - PSingle(Right)^; end;
//procedure lpeInt8_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt8(Left)^ - PDouble(Right)^; end;
//procedure lpeInt8_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt8(Left)^ - PCurrency(Right)^; end;
//procedure lpeInt8_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt8(Left)^ - PExtended(Right)^; end;
//procedure lpeInt8_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt8(Left)^ - PVariant(Right)^; end;
procedure lpeUInt16_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) - UInt32(PUInt8(Right)^); end;
procedure lpeUInt16_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) - Int32(PInt8(Right)^); end;
procedure lpeUInt16_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) - UInt32(PUInt16(Right)^); end;
procedure lpeUInt16_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) - Int32(PInt16(Right)^); end;
procedure lpeUInt16_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) - UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) - Int32(PInt32(Right)^); end;
procedure lpeUInt16_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt64(PUInt16(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int64(PUInt16(Left)^) - Int64(PInt64(Right)^); end;
//procedure lpeUInt16_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt16(Left)^ - PSingle(Right)^; end;
//procedure lpeUInt16_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt16(Left)^ - PDouble(Right)^; end;
//procedure lpeUInt16_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt16(Left)^ - PCurrency(Right)^; end;
//procedure lpeUInt16_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt16(Left)^ - PExtended(Right)^; end;
//procedure lpeUInt16_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt16(Left)^ - PVariant(Right)^; end;
procedure lpeInt16_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) - Int32(PUInt8(Right)^); end;
procedure lpeInt16_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) - Int32(PInt8(Right)^); end;
procedure lpeInt16_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) - Int32(PUInt16(Right)^); end;
procedure lpeInt16_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) - Int32(PInt16(Right)^); end;
procedure lpeInt16_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int64(PInt16(Left)^) - Int64(PUInt32(Right)^); end;
procedure lpeInt16_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) - Int32(PInt32(Right)^); end;
procedure lpeInt16_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := UInt64(PInt16(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeInt16_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int64(PInt16(Left)^) - Int64(PInt64(Right)^); end;
//procedure lpeInt16_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt16(Left)^ - PSingle(Right)^; end;
//procedure lpeInt16_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt16(Left)^ - PDouble(Right)^; end;
//procedure lpeInt16_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt16(Left)^ - PCurrency(Right)^; end;
//procedure lpeInt16_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt16(Left)^ - PExtended(Right)^; end;
//procedure lpeInt16_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt16(Left)^ - PVariant(Right)^; end;
procedure lpeUInt32_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ - PUInt8(Right)^; end;
procedure lpeUInt32_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) - Int64(PInt8(Right)^); end;
procedure lpeUInt32_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ - PUInt16(Right)^; end;
procedure lpeUInt32_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) - Int64(PInt16(Right)^); end;
procedure lpeUInt32_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ - PUInt32(Right)^; end;
procedure lpeUInt32_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) - Int64(PInt32(Right)^); end;
procedure lpeUInt32_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := UInt64(PUInt32(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) - Int64(PInt64(Right)^); end;
//procedure lpeUInt32_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt32(Left)^ - PSingle(Right)^; end;
//procedure lpeUInt32_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt32(Left)^ - PDouble(Right)^; end;
//procedure lpeUInt32_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt32(Left)^ - PCurrency(Right)^; end;
//procedure lpeUInt32_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt32(Left)^ - PExtended(Right)^; end;
//procedure lpeUInt32_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt32(Left)^ - PVariant(Right)^; end;
procedure lpeInt32_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ - PUInt8(Right)^; end;
procedure lpeInt32_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ - PInt8(Right)^; end;
procedure lpeInt32_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ - PUInt16(Right)^; end;
procedure lpeInt32_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ - PInt16(Right)^; end;
procedure lpeInt32_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := Int64(PInt32(Left)^) - Int64(PUInt32(Right)^); end;
procedure lpeInt32_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ - PInt32(Right)^; end;
procedure lpeInt32_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := UInt64(PInt32(Left)^) - UInt64(PUInt64(Right)^); end;
procedure lpeInt32_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := Int64(PInt32(Left)^) - Int64(PInt64(Right)^); end;
//procedure lpeInt32_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt32(Left)^ - PSingle(Right)^; end;
//procedure lpeInt32_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt32(Left)^ - PDouble(Right)^; end;
//procedure lpeInt32_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt32(Left)^ - PCurrency(Right)^; end;
//procedure lpeInt32_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt32(Left)^ - PExtended(Right)^; end;
//procedure lpeInt32_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt32(Left)^ - PVariant(Right)^; end;
procedure lpeUInt64_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ - PUInt8(Right)^; end;
procedure lpeUInt64_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ - PInt8(Right)^; end;
procedure lpeUInt64_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ - PUInt16(Right)^; end;
procedure lpeUInt64_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ - PInt16(Right)^; end;
procedure lpeUInt64_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ - PUInt32(Right)^; end;
procedure lpeUInt64_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ - PInt32(Right)^; end;
procedure lpeUInt64_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ - PUInt64(Right)^; end;
procedure lpeUInt64_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := Int64(PUInt64(Left)^) - Int64(PInt64(Right)^); end;
//procedure lpeUInt64_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt64(Left)^ - PSingle(Right)^; end;
//procedure lpeUInt64_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt64(Left)^ - PDouble(Right)^; end;
//procedure lpeUInt64_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt64(Left)^ - PCurrency(Right)^; end;
//procedure lpeUInt64_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt64(Left)^ - PExtended(Right)^; end;
//procedure lpeUInt64_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt64(Left)^ - PVariant(Right)^; end;
procedure lpeInt64_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ - PUInt8(Right)^; end;
procedure lpeInt64_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ - PInt8(Right)^; end;
procedure lpeInt64_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ - PUInt16(Right)^; end;
procedure lpeInt64_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ - PInt16(Right)^; end;
procedure lpeInt64_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ - PUInt32(Right)^; end;
procedure lpeInt64_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ - PInt32(Right)^; end;
procedure lpeInt64_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ - PUInt64(Right)^; end;
procedure lpeInt64_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ - PInt64(Right)^; end;
//procedure lpeInt64_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt64(Left)^ - PSingle(Right)^; end;
//procedure lpeInt64_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt64(Left)^ - PDouble(Right)^; end;
//procedure lpeInt64_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt64(Left)^ - PCurrency(Right)^; end;
//procedure lpeInt64_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt64(Left)^ - PExtended(Right)^; end;
//procedure lpeInt64_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt64(Left)^ - PVariant(Right)^; end;
procedure lpeSingle_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PUInt8(Right)^; end;
procedure lpeSingle_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PInt8(Right)^; end;
procedure lpeSingle_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PUInt16(Right)^; end;
procedure lpeSingle_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PInt16(Right)^; end;
procedure lpeSingle_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PUInt32(Right)^; end;
procedure lpeSingle_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PInt32(Right)^; end;
procedure lpeSingle_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PUInt64(Right)^; end;
procedure lpeSingle_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PInt64(Right)^; end;
procedure lpeSingle_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PSingle(Right)^; end;
procedure lpeSingle_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PDouble(Right)^; end;
//procedure lpeSingle_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PSingle(Left)^ - PCurrency(Right)^; end;
procedure lpeSingle_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ - PExtended(Right)^; end;
//procedure lpeSingle_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PSingle(Left)^ - PVariant(Right)^; end;
procedure lpeDouble_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PUInt8(Right)^; end;
procedure lpeDouble_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PInt8(Right)^; end;
procedure lpeDouble_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PUInt16(Right)^; end;
procedure lpeDouble_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PInt16(Right)^; end;
procedure lpeDouble_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PUInt32(Right)^; end;
procedure lpeDouble_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PInt32(Right)^; end;
procedure lpeDouble_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PUInt64(Right)^; end;
procedure lpeDouble_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PInt64(Right)^; end;
procedure lpeDouble_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PSingle(Right)^; end;
procedure lpeDouble_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PDouble(Right)^; end;
//procedure lpeDouble_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PDouble(Left)^ - PCurrency(Right)^; end;
procedure lpeDouble_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ - PExtended(Right)^; end;
//procedure lpeDouble_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PDouble(Left)^ - PVariant(Right)^; end;
procedure lpeCurrency_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PUInt8(Right)^; end;
procedure lpeCurrency_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PInt8(Right)^; end;
procedure lpeCurrency_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PUInt16(Right)^; end;
procedure lpeCurrency_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PInt16(Right)^; end;
procedure lpeCurrency_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PUInt32(Right)^; end;
procedure lpeCurrency_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PInt32(Right)^; end;
procedure lpeCurrency_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PUInt64(Right)^; end;
procedure lpeCurrency_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PInt64(Right)^; end;
procedure lpeCurrency_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PSingle(Right)^; end;
procedure lpeCurrency_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PDouble(Right)^; end;
procedure lpeCurrency_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PCurrency(Right)^; end;
procedure lpeCurrency_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ - PExtended(Right)^; end;
//procedure lpeCurrency_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PCurrency(Left)^ - PVariant(Right)^; end;
procedure lpeExtended_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PUInt8(Right)^; end;
procedure lpeExtended_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PInt8(Right)^; end;
procedure lpeExtended_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PUInt16(Right)^; end;
procedure lpeExtended_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PInt16(Right)^; end;
procedure lpeExtended_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PUInt32(Right)^; end;
procedure lpeExtended_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PInt32(Right)^; end;
procedure lpeExtended_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PUInt64(Right)^; end;
procedure lpeExtended_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PInt64(Right)^; end;
procedure lpeExtended_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PSingle(Right)^; end;
procedure lpeExtended_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PDouble(Right)^; end;
//procedure lpeExtended_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PExtended(Left)^ - PCurrency(Right)^; end;
procedure lpeExtended_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ - PExtended(Right)^; end;
//procedure lpeExtended_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PExtended(Left)^ - PVariant(Right)^; end;
procedure lpeVariant_SUBASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PUInt8(Right)^; end;
procedure lpeVariant_SUBASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PInt8(Right)^; end;
procedure lpeVariant_SUBASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PUInt16(Right)^; end;
procedure lpeVariant_SUBASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PInt16(Right)^; end;
procedure lpeVariant_SUBASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PUInt32(Right)^; end;
procedure lpeVariant_SUBASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PInt32(Right)^; end;
procedure lpeVariant_SUBASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PUInt64(Right)^; end;
procedure lpeVariant_SUBASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PInt64(Right)^; end;
procedure lpeVariant_SUBASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PSingle(Right)^; end;
procedure lpeVariant_SUBASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PDouble(Right)^; end;
procedure lpeVariant_SUBASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PCurrency(Right)^; end;
procedure lpeVariant_SUBASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PExtended(Right)^; end;
procedure lpeVariant_SUBASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ - PVariant(Right)^; end;

// Assignment by multiplication
procedure lpeUInt8_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) * UInt32(PUInt8(Right)^); end;
procedure lpeUInt8_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) * Int32(PInt8(Right)^); end;
procedure lpeUInt8_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) * UInt32(PUInt16(Right)^); end;
procedure lpeUInt8_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) * Int32(PInt16(Right)^); end;
procedure lpeUInt8_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) * UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) * Int32(PInt32(Right)^); end;
procedure lpeUInt8_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt64(PUInt8(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int64(PUInt8(Left)^) * Int64(PInt64(Right)^); end;
//procedure lpeUInt8_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt8(Left)^ * PSingle(Right)^; end;
//procedure lpeUInt8_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt8(Left)^ * PDouble(Right)^; end;
//procedure lpeUInt8_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt8(Left)^ * PCurrency(Right)^; end;
//procedure lpeUInt8_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt8(Left)^ * PExtended(Right)^; end;
//procedure lpeUInt8_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt8(Left)^ * PVariant(Right)^; end;
procedure lpeInt8_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) * Int32(PUInt8(Right)^); end;
procedure lpeInt8_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) * Int32(PInt8(Right)^); end;
procedure lpeInt8_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) * Int32(PUInt16(Right)^); end;
procedure lpeInt8_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) * Int32(PInt16(Right)^); end;
procedure lpeInt8_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int64(PInt8(Left)^) * Int64(PUInt32(Right)^); end;
procedure lpeInt8_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) * Int32(PInt32(Right)^); end;
procedure lpeInt8_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := UInt64(PInt8(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeInt8_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int64(PInt8(Left)^) * Int64(PInt64(Right)^); end;
//procedure lpeInt8_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt8(Left)^ * PSingle(Right)^; end;
//procedure lpeInt8_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt8(Left)^ * PDouble(Right)^; end;
//procedure lpeInt8_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt8(Left)^ * PCurrency(Right)^; end;
//procedure lpeInt8_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt8(Left)^ * PExtended(Right)^; end;
//procedure lpeInt8_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt8(Left)^ * PVariant(Right)^; end;
procedure lpeUInt16_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) * UInt32(PUInt8(Right)^); end;
procedure lpeUInt16_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) * Int32(PInt8(Right)^); end;
procedure lpeUInt16_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) * UInt32(PUInt16(Right)^); end;
procedure lpeUInt16_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) * Int32(PInt16(Right)^); end;
procedure lpeUInt16_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) * UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) * Int32(PInt32(Right)^); end;
procedure lpeUInt16_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt64(PUInt16(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int64(PUInt16(Left)^) * Int64(PInt64(Right)^); end;
//procedure lpeUInt16_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt16(Left)^ * PSingle(Right)^; end;
//procedure lpeUInt16_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt16(Left)^ * PDouble(Right)^; end;
//procedure lpeUInt16_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt16(Left)^ * PCurrency(Right)^; end;
//procedure lpeUInt16_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt16(Left)^ * PExtended(Right)^; end;
//procedure lpeUInt16_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt16(Left)^ * PVariant(Right)^; end;
procedure lpeInt16_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) * Int32(PUInt8(Right)^); end;
procedure lpeInt16_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) * Int32(PInt8(Right)^); end;
procedure lpeInt16_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) * Int32(PUInt16(Right)^); end;
procedure lpeInt16_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) * Int32(PInt16(Right)^); end;
procedure lpeInt16_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int64(PInt16(Left)^) * Int64(PUInt32(Right)^); end;
procedure lpeInt16_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) * Int32(PInt32(Right)^); end;
procedure lpeInt16_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := UInt64(PInt16(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeInt16_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int64(PInt16(Left)^) * Int64(PInt64(Right)^); end;
//procedure lpeInt16_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt16(Left)^ * PSingle(Right)^; end;
//procedure lpeInt16_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt16(Left)^ * PDouble(Right)^; end;
//procedure lpeInt16_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt16(Left)^ * PCurrency(Right)^; end;
//procedure lpeInt16_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt16(Left)^ * PExtended(Right)^; end;
//procedure lpeInt16_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt16(Left)^ * PVariant(Right)^; end;
procedure lpeUInt32_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ * PUInt8(Right)^; end;
procedure lpeUInt32_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) * Int64(PInt8(Right)^); end;
procedure lpeUInt32_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ * PUInt16(Right)^; end;
procedure lpeUInt32_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) * Int64(PInt16(Right)^); end;
procedure lpeUInt32_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ * PUInt32(Right)^; end;
procedure lpeUInt32_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) * Int64(PInt32(Right)^); end;
procedure lpeUInt32_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := UInt64(PUInt32(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) * Int64(PInt64(Right)^); end;
//procedure lpeUInt32_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt32(Left)^ * PSingle(Right)^; end;
//procedure lpeUInt32_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt32(Left)^ * PDouble(Right)^; end;
//procedure lpeUInt32_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt32(Left)^ * PCurrency(Right)^; end;
//procedure lpeUInt32_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt32(Left)^ * PExtended(Right)^; end;
//procedure lpeUInt32_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt32(Left)^ * PVariant(Right)^; end;
procedure lpeInt32_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ * PUInt8(Right)^; end;
procedure lpeInt32_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ * PInt8(Right)^; end;
procedure lpeInt32_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ * PUInt16(Right)^; end;
procedure lpeInt32_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ * PInt16(Right)^; end;
procedure lpeInt32_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := Int64(PInt32(Left)^) * Int64(PUInt32(Right)^); end;
procedure lpeInt32_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ * PInt32(Right)^; end;
procedure lpeInt32_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := UInt64(PInt32(Left)^) * UInt64(PUInt64(Right)^); end;
procedure lpeInt32_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := Int64(PInt32(Left)^) * Int64(PInt64(Right)^); end;
//procedure lpeInt32_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt32(Left)^ * PSingle(Right)^; end;
//procedure lpeInt32_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt32(Left)^ * PDouble(Right)^; end;
//procedure lpeInt32_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt32(Left)^ * PCurrency(Right)^; end;
//procedure lpeInt32_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt32(Left)^ * PExtended(Right)^; end;
//procedure lpeInt32_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt32(Left)^ * PVariant(Right)^; end;
procedure lpeUInt64_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ * PUInt8(Right)^; end;
procedure lpeUInt64_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ * PInt8(Right)^; end;
procedure lpeUInt64_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ * PUInt16(Right)^; end;
procedure lpeUInt64_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ * PInt16(Right)^; end;
procedure lpeUInt64_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ * PUInt32(Right)^; end;
procedure lpeUInt64_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ * PInt32(Right)^; end;
procedure lpeUInt64_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ * PUInt64(Right)^; end;
procedure lpeUInt64_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := Int64(PUInt64(Left)^) * Int64(PInt64(Right)^); end;
//procedure lpeUInt64_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt64(Left)^ * PSingle(Right)^; end;
//procedure lpeUInt64_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt64(Left)^ * PDouble(Right)^; end;
//procedure lpeUInt64_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt64(Left)^ * PCurrency(Right)^; end;
//procedure lpeUInt64_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt64(Left)^ * PExtended(Right)^; end;
//procedure lpeUInt64_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt64(Left)^ * PVariant(Right)^; end;
procedure lpeInt64_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ * PUInt8(Right)^; end;
procedure lpeInt64_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ * PInt8(Right)^; end;
procedure lpeInt64_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ * PUInt16(Right)^; end;
procedure lpeInt64_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ * PInt16(Right)^; end;
procedure lpeInt64_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ * PUInt32(Right)^; end;
procedure lpeInt64_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ * PInt32(Right)^; end;
procedure lpeInt64_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ * PUInt64(Right)^; end;
procedure lpeInt64_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ * PInt64(Right)^; end;
//procedure lpeInt64_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt64(Left)^ * PSingle(Right)^; end;
//procedure lpeInt64_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt64(Left)^ * PDouble(Right)^; end;
//procedure lpeInt64_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt64(Left)^ * PCurrency(Right)^; end;
//procedure lpeInt64_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt64(Left)^ * PExtended(Right)^; end;
//procedure lpeInt64_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt64(Left)^ * PVariant(Right)^; end;
procedure lpeSingle_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PUInt8(Right)^; end;
procedure lpeSingle_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PInt8(Right)^; end;
procedure lpeSingle_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PUInt16(Right)^; end;
procedure lpeSingle_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PInt16(Right)^; end;
procedure lpeSingle_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PUInt32(Right)^; end;
procedure lpeSingle_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PInt32(Right)^; end;
procedure lpeSingle_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PUInt64(Right)^; end;
procedure lpeSingle_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PInt64(Right)^; end;
procedure lpeSingle_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PSingle(Right)^; end;
procedure lpeSingle_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PDouble(Right)^; end;
//procedure lpeSingle_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PSingle(Left)^ * PCurrency(Right)^; end;
procedure lpeSingle_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ * PExtended(Right)^; end;
//procedure lpeSingle_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PSingle(Left)^ * PVariant(Right)^; end;
procedure lpeDouble_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PUInt8(Right)^; end;
procedure lpeDouble_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PInt8(Right)^; end;
procedure lpeDouble_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PUInt16(Right)^; end;
procedure lpeDouble_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PInt16(Right)^; end;
procedure lpeDouble_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PUInt32(Right)^; end;
procedure lpeDouble_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PInt32(Right)^; end;
procedure lpeDouble_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PUInt64(Right)^; end;
procedure lpeDouble_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PInt64(Right)^; end;
procedure lpeDouble_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PSingle(Right)^; end;
procedure lpeDouble_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PDouble(Right)^; end;
//procedure lpeDouble_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PDouble(Left)^ * PCurrency(Right)^; end;
procedure lpeDouble_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ * PExtended(Right)^; end;
//procedure lpeDouble_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PDouble(Left)^ * PVariant(Right)^; end;
procedure lpeCurrency_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PUInt8(Right)^; end;
procedure lpeCurrency_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PInt8(Right)^; end;
procedure lpeCurrency_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PUInt16(Right)^; end;
procedure lpeCurrency_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PInt16(Right)^; end;
procedure lpeCurrency_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PUInt32(Right)^; end;
procedure lpeCurrency_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PInt32(Right)^; end;
procedure lpeCurrency_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PUInt64(Right)^; end;
procedure lpeCurrency_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PInt64(Right)^; end;
procedure lpeCurrency_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PSingle(Right)^; end;
procedure lpeCurrency_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PDouble(Right)^; end;
procedure lpeCurrency_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PCurrency(Right)^; end;
procedure lpeCurrency_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ * PExtended(Right)^; end;
//procedure lpeCurrency_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PCurrency(Left)^ * PVariant(Right)^; end;
procedure lpeExtended_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PUInt8(Right)^; end;
procedure lpeExtended_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PInt8(Right)^; end;
procedure lpeExtended_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PUInt16(Right)^; end;
procedure lpeExtended_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PInt16(Right)^; end;
procedure lpeExtended_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PUInt32(Right)^; end;
procedure lpeExtended_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PInt32(Right)^; end;
procedure lpeExtended_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PUInt64(Right)^; end;
procedure lpeExtended_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PInt64(Right)^; end;
procedure lpeExtended_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PSingle(Right)^; end;
procedure lpeExtended_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PDouble(Right)^; end;
//procedure lpeExtended_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PExtended(Left)^ * PCurrency(Right)^; end;
procedure lpeExtended_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ * PExtended(Right)^; end;
//procedure lpeExtended_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PExtended(Left)^ * PVariant(Right)^; end;
procedure lpeVariant_MULASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PUInt8(Right)^; end;
procedure lpeVariant_MULASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PInt8(Right)^; end;
procedure lpeVariant_MULASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PUInt16(Right)^; end;
procedure lpeVariant_MULASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PInt16(Right)^; end;
procedure lpeVariant_MULASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PUInt32(Right)^; end;
procedure lpeVariant_MULASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PInt32(Right)^; end;
procedure lpeVariant_MULASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PUInt64(Right)^; end;
procedure lpeVariant_MULASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PInt64(Right)^; end;
procedure lpeVariant_MULASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PSingle(Right)^; end;
procedure lpeVariant_MULASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PDouble(Right)^; end;
procedure lpeVariant_MULASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PCurrency(Right)^; end;
procedure lpeVariant_MULASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PExtended(Right)^; end;
procedure lpeVariant_MULASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ * PVariant(Right)^; end;

//assignment by power
procedure lpeUInt8_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) ** UInt32(PUInt8(Right)^); end;
procedure lpeUInt8_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) ** Int32(PInt8(Right)^); end;
procedure lpeUInt8_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) ** UInt32(PUInt16(Right)^); end;
procedure lpeUInt8_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) ** Int32(PInt16(Right)^); end;
procedure lpeUInt8_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) ** UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) ** Int32(PInt32(Right)^); end;
procedure lpeUInt8_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt64(PUInt8(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int64(PUInt8(Left)^) ** Int64(PInt64(Right)^); end;
//procedure lpeUInt8_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt8(Left)^ ** PSingle(Right)^; end;
//procedure lpeUInt8_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt8(Left)^ ** PDouble(Right)^; end;
//procedure lpeUInt8_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt8(Left)^ ** PCurrency(Right)^; end;
//procedure lpeUInt8_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt8(Left)^ ** PExtended(Right)^; end;
//procedure lpeUInt8_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt8(Left)^ ** PVariant(Right)^; end;
procedure lpeInt8_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) ** Int32(PUInt8(Right)^); end;
procedure lpeInt8_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) ** Int32(PInt8(Right)^); end;
procedure lpeInt8_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) ** Int32(PUInt16(Right)^); end;
procedure lpeInt8_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) ** Int32(PInt16(Right)^); end;
procedure lpeInt8_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int64(PInt8(Left)^) ** Int64(PUInt32(Right)^); end;
procedure lpeInt8_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) ** Int32(PInt32(Right)^); end;
procedure lpeInt8_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := UInt64(PInt8(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeInt8_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int64(PInt8(Left)^) ** Int64(PInt64(Right)^); end;
//procedure lpeInt8_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt8(Left)^ ** PSingle(Right)^; end;
//procedure lpeInt8_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt8(Left)^ ** PDouble(Right)^; end;
//procedure lpeInt8_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt8(Left)^ ** PCurrency(Right)^; end;
//procedure lpeInt8_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt8(Left)^ ** PExtended(Right)^; end;
//procedure lpeInt8_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt8(Left)^ ** PVariant(Right)^; end;
procedure lpeUInt16_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) ** UInt32(PUInt8(Right)^); end;
procedure lpeUInt16_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) ** Int32(PInt8(Right)^); end;
procedure lpeUInt16_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) ** UInt32(PUInt16(Right)^); end;
procedure lpeUInt16_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) ** Int32(PInt16(Right)^); end;
procedure lpeUInt16_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) ** UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) ** Int32(PInt32(Right)^); end;
procedure lpeUInt16_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt64(PUInt16(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int64(PUInt16(Left)^) ** Int64(PInt64(Right)^); end;
//procedure lpeUInt16_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt16(Left)^ ** PSingle(Right)^; end;
//procedure lpeUInt16_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt16(Left)^ ** PDouble(Right)^; end;
//procedure lpeUInt16_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt16(Left)^ ** PCurrency(Right)^; end;
//procedure lpeUInt16_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt16(Left)^ ** PExtended(Right)^; end;
//procedure lpeUInt16_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt16(Left)^ ** PVariant(Right)^; end;
procedure lpeInt16_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) ** Int32(PUInt8(Right)^); end;
procedure lpeInt16_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) ** Int32(PInt8(Right)^); end;
procedure lpeInt16_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) ** Int32(PUInt16(Right)^); end;
procedure lpeInt16_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) ** Int32(PInt16(Right)^); end;
procedure lpeInt16_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int64(PInt16(Left)^) ** Int64(PUInt32(Right)^); end;
procedure lpeInt16_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) ** Int32(PInt32(Right)^); end;
procedure lpeInt16_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := UInt64(PInt16(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeInt16_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int64(PInt16(Left)^) ** Int64(PInt64(Right)^); end;
//procedure lpeInt16_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt16(Left)^ ** PSingle(Right)^; end;
//procedure lpeInt16_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt16(Left)^ ** PDouble(Right)^; end;
//procedure lpeInt16_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt16(Left)^ ** PCurrency(Right)^; end;
//procedure lpeInt16_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt16(Left)^ ** PExtended(Right)^; end;
//procedure lpeInt16_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt16(Left)^ ** PVariant(Right)^; end;
procedure lpeUInt32_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ ** PUInt8(Right)^; end;
procedure lpeUInt32_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) ** Int64(PInt8(Right)^); end;
procedure lpeUInt32_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ ** PUInt16(Right)^; end;
procedure lpeUInt32_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) ** Int64(PInt16(Right)^); end;
procedure lpeUInt32_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ ** PUInt32(Right)^; end;
procedure lpeUInt32_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) ** Int64(PInt32(Right)^); end;
procedure lpeUInt32_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := UInt64(PUInt32(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) ** Int64(PInt64(Right)^); end;
//procedure lpeUInt32_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt32(Left)^ ** PSingle(Right)^; end;
//procedure lpeUInt32_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt32(Left)^ ** PDouble(Right)^; end;
//procedure lpeUInt32_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt32(Left)^ ** PCurrency(Right)^; end;
//procedure lpeUInt32_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt32(Left)^ ** PExtended(Right)^; end;
//procedure lpeUInt32_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt32(Left)^ ** PVariant(Right)^; end;
procedure lpeInt32_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ ** PUInt8(Right)^; end;
procedure lpeInt32_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ ** PInt8(Right)^; end;
procedure lpeInt32_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ ** PUInt16(Right)^; end;
procedure lpeInt32_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ ** PInt16(Right)^; end;
procedure lpeInt32_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := Int64(PInt32(Left)^) ** Int64(PUInt32(Right)^); end;
procedure lpeInt32_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin if (PInt32(Right)^ = 2) then PInt32(Left)^ := PInt32(Left)^ * PInt32(Left)^ 
                                                                                                            else                         PInt32(Left)^ := PInt32(Left)^ ** PInt32(Right)^; end;
procedure lpeInt32_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := UInt64(PInt32(Left)^) ** UInt64(PUInt64(Right)^); end;
procedure lpeInt32_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := Int64(PInt32(Left)^) ** Int64(PInt64(Right)^); end;
//procedure lpeInt32_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt32(Left)^ ** PSingle(Right)^; end;
//procedure lpeInt32_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt32(Left)^ ** PDouble(Right)^; end;
//procedure lpeInt32_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt32(Left)^ ** PCurrency(Right)^; end;
//procedure lpeInt32_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt32(Left)^ ** PExtended(Right)^; end;
//procedure lpeInt32_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt32(Left)^ ** PVariant(Right)^; end;
procedure lpeUInt64_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ ** PUInt8(Right)^; end;
procedure lpeUInt64_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ ** PInt8(Right)^; end;
procedure lpeUInt64_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ ** PUInt16(Right)^; end;
procedure lpeUInt64_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ ** PInt16(Right)^; end;
procedure lpeUInt64_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ ** PUInt32(Right)^; end;
procedure lpeUInt64_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ ** PInt32(Right)^; end;
procedure lpeUInt64_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ ** PUInt64(Right)^; end;
procedure lpeUInt64_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := Int64(PUInt64(Left)^) ** Int64(PInt64(Right)^); end;
//procedure lpeUInt64_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt64(Left)^ ** PSingle(Right)^; end;
//procedure lpeUInt64_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt64(Left)^ ** PDouble(Right)^; end;
//procedure lpeUInt64_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt64(Left)^ ** PCurrency(Right)^; end;
//procedure lpeUInt64_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt64(Left)^ ** PExtended(Right)^; end;
//procedure lpeUInt64_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt64(Left)^ ** PVariant(Right)^; end;
procedure lpeInt64_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ ** PUInt8(Right)^; end;
procedure lpeInt64_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ ** PInt8(Right)^; end;
procedure lpeInt64_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ ** PUInt16(Right)^; end;
procedure lpeInt64_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ ** PInt16(Right)^; end;
procedure lpeInt64_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ ** PUInt32(Right)^; end;
procedure lpeInt64_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ ** PInt32(Right)^; end;
procedure lpeInt64_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ ** PUInt64(Right)^; end;
procedure lpeInt64_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ ** PInt64(Right)^; end;
//procedure lpeInt64_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt64(Left)^ ** PSingle(Right)^; end;
//procedure lpeInt64_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt64(Left)^ ** PDouble(Right)^; end;
//procedure lpeInt64_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt64(Left)^ ** PCurrency(Right)^; end;
//procedure lpeInt64_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt64(Left)^ ** PExtended(Right)^; end;
//procedure lpeInt64_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt64(Left)^ ** PVariant(Right)^; end;
procedure lpeSingle_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PUInt8(Right)^; end;
procedure lpeSingle_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PInt8(Right)^; end;
procedure lpeSingle_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PUInt16(Right)^; end;
procedure lpeSingle_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PInt16(Right)^; end;
procedure lpeSingle_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PUInt32(Right)^; end;
procedure lpeSingle_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PInt32(Right)^; end;
procedure lpeSingle_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PUInt64(Right)^; end;
procedure lpeSingle_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PInt64(Right)^; end;
procedure lpeSingle_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PSingle(Right)^; end;
procedure lpeSingle_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PDouble(Right)^; end;
//procedure lpeSingle_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PSingle(Left)^ ** PCurrency(Right)^; end;
procedure lpeSingle_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ ** PExtended(Right)^; end;
//procedure lpeSingle_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PSingle(Left)^ ** PVariant(Right)^; end;
procedure lpeDouble_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PUInt8(Right)^; end;
procedure lpeDouble_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PInt8(Right)^; end;
procedure lpeDouble_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PUInt16(Right)^; end;
procedure lpeDouble_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PInt16(Right)^; end;
procedure lpeDouble_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PUInt32(Right)^; end;
procedure lpeDouble_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PInt32(Right)^; end;
procedure lpeDouble_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PUInt64(Right)^; end;
procedure lpeDouble_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PInt64(Right)^; end;
procedure lpeDouble_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PSingle(Right)^; end;
procedure lpeDouble_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PDouble(Right)^; end;
//procedure lpeDouble_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PDouble(Left)^ ** PCurrency(Right)^; end;
procedure lpeDouble_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ ** PExtended(Right)^; end;
//procedure lpeDouble_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PDouble(Left)^ ** PVariant(Right)^; end;
procedure lpeCurrency_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PUInt8(Right)^; end;
procedure lpeCurrency_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PInt8(Right)^; end;
procedure lpeCurrency_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PUInt16(Right)^; end;
procedure lpeCurrency_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PInt16(Right)^; end;
procedure lpeCurrency_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PUInt32(Right)^; end;
procedure lpeCurrency_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PInt32(Right)^; end;
procedure lpeCurrency_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PUInt64(Right)^; end;
procedure lpeCurrency_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PInt64(Right)^; end;
procedure lpeCurrency_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PSingle(Right)^; end;
procedure lpeCurrency_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PDouble(Right)^; end;
procedure lpeCurrency_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PCurrency(Right)^; end;
procedure lpeCurrency_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ ** PExtended(Right)^; end;
//procedure lpeCurrency_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PCurrency(Left)^ ** PVariant(Right)^; end;
procedure lpeExtended_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PUInt8(Right)^; end;
procedure lpeExtended_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PInt8(Right)^; end;
procedure lpeExtended_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PUInt16(Right)^; end;
procedure lpeExtended_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PInt16(Right)^; end;
procedure lpeExtended_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PUInt32(Right)^; end;
procedure lpeExtended_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PInt32(Right)^; end;
procedure lpeExtended_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PUInt64(Right)^; end;
procedure lpeExtended_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PInt64(Right)^; end;
procedure lpeExtended_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PSingle(Right)^; end;
procedure lpeExtended_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PDouble(Right)^; end;
//procedure lpeExtended_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PExtended(Left)^ ** PCurrency(Right)^; end;
procedure lpeExtended_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ ** PExtended(Right)^; end;
//procedure lpeExtended_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PExtended(Left)^ ** PVariant(Right)^; end;
procedure lpeVariant_POWASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PUInt8(Right)^; end;
procedure lpeVariant_POWASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PInt8(Right)^; end;
procedure lpeVariant_POWASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PUInt16(Right)^; end;
procedure lpeVariant_POWASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PInt16(Right)^; end;
procedure lpeVariant_POWASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PUInt32(Right)^; end;
procedure lpeVariant_POWASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PInt32(Right)^; end;
procedure lpeVariant_POWASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PUInt64(Right)^; end;
procedure lpeVariant_POWASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PInt64(Right)^; end;
procedure lpeVariant_POWASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PSingle(Right)^; end;
procedure lpeVariant_POWASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PDouble(Right)^; end;
procedure lpeVariant_POWASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PCurrency(Right)^; end;
procedure lpeVariant_POWASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PExtended(Right)^; end;
procedure lpeVariant_POWASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ ** PVariant(Right)^; end;
                       
//assignment by division
procedure lpeUInt8_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) div UInt32(PUInt8(Right)^); end;
procedure lpeUInt8_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) div Int32(PInt8(Right)^); end;
procedure lpeUInt8_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) div UInt32(PUInt16(Right)^); end;
procedure lpeUInt8_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) div Int32(PInt16(Right)^); end;
procedure lpeUInt8_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt32(PUInt8(Left)^) div UInt32(PUInt32(Right)^); end;
procedure lpeUInt8_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int32(PUInt8(Left)^) div Int32(PInt32(Right)^); end;
procedure lpeUInt8_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := UInt64(PUInt8(Left)^) div UInt64(PUInt64(Right)^); end;
procedure lpeUInt8_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt8(Left)^ := Int64(PUInt8(Left)^) div Int64(PInt64(Right)^); end;
//procedure lpeUInt8_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt8(Left)^ / PSingle(Right)^; end;
//procedure lpeUInt8_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt8(Left)^ / PDouble(Right)^; end;
//procedure lpeUInt8_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt8(Left)^ / PCurrency(Right)^; end;
//procedure lpeUInt8_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt8(Left)^ / PExtended(Right)^; end;
//procedure lpeUInt8_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt8(Left)^ / PVariant(Right)^; end;
procedure lpeInt8_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) div Int32(PUInt8(Right)^); end;
procedure lpeInt8_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) div Int32(PInt8(Right)^); end;
procedure lpeInt8_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) div Int32(PUInt16(Right)^); end;
procedure lpeInt8_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) div Int32(PInt16(Right)^); end;
procedure lpeInt8_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int64(PInt8(Left)^) div Int64(PUInt32(Right)^); end;
procedure lpeInt8_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int32(PInt8(Left)^) div Int32(PInt32(Right)^); end;
procedure lpeInt8_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := UInt64(PInt8(Left)^) div UInt64(PUInt64(Right)^); end;
procedure lpeInt8_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt8(Left)^ := Int64(PInt8(Left)^) div Int64(PInt64(Right)^); end;
//procedure lpeInt8_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt8(Left)^ / PSingle(Right)^; end;
//procedure lpeInt8_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt8(Left)^ / PDouble(Right)^; end;
//procedure lpeInt8_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt8(Left)^ / PCurrency(Right)^; end;
//procedure lpeInt8_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt8(Left)^ / PExtended(Right)^; end;
//procedure lpeInt8_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt8(Left)^ / PVariant(Right)^; end;
procedure lpeUInt16_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) div UInt32(PUInt8(Right)^); end;
procedure lpeUInt16_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) div Int32(PInt8(Right)^); end;
procedure lpeUInt16_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) div UInt32(PUInt16(Right)^); end;
procedure lpeUInt16_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) div Int32(PInt16(Right)^); end;
procedure lpeUInt16_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt32(PUInt16(Left)^) div UInt32(PUInt32(Right)^); end;
procedure lpeUInt16_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int32(PUInt16(Left)^) div Int32(PInt32(Right)^); end;
procedure lpeUInt16_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := UInt64(PUInt16(Left)^) div UInt64(PUInt64(Right)^); end;
procedure lpeUInt16_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt16(Left)^ := Int64(PUInt16(Left)^) div Int64(PInt64(Right)^); end;
//procedure lpeUInt16_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt16(Left)^ / PSingle(Right)^; end;
//procedure lpeUInt16_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt16(Left)^ / PDouble(Right)^; end;
//procedure lpeUInt16_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt16(Left)^ / PCurrency(Right)^; end;
//procedure lpeUInt16_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt16(Left)^ / PExtended(Right)^; end;
//procedure lpeUInt16_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt16(Left)^ / PVariant(Right)^; end;
procedure lpeInt16_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) div Int32(PUInt8(Right)^); end;
procedure lpeInt16_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) div Int32(PInt8(Right)^); end;
procedure lpeInt16_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) div Int32(PUInt16(Right)^); end;
procedure lpeInt16_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) div Int32(PInt16(Right)^); end;
procedure lpeInt16_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int64(PInt16(Left)^) div Int64(PUInt32(Right)^); end;
procedure lpeInt16_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int32(PInt16(Left)^) div Int32(PInt32(Right)^); end;
procedure lpeInt16_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := UInt64(PInt16(Left)^) div UInt64(PUInt64(Right)^); end;
procedure lpeInt16_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt16(Left)^ := Int64(PInt16(Left)^) div Int64(PInt64(Right)^); end;
//procedure lpeInt16_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt16(Left)^ / PSingle(Right)^; end;
//procedure lpeInt16_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt16(Left)^ / PDouble(Right)^; end;
//procedure lpeInt16_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt16(Left)^ / PCurrency(Right)^; end;
//procedure lpeInt16_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt16(Left)^ / PExtended(Right)^; end;
//procedure lpeInt16_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt16(Left)^ / PVariant(Right)^; end;
procedure lpeUInt32_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ div PUInt8(Right)^; end;
procedure lpeUInt32_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) div Int64(PInt8(Right)^); end;
procedure lpeUInt32_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ div PUInt16(Right)^; end;
procedure lpeUInt32_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) * Int64(PInt16(Right)^); end;
procedure lpeUInt32_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := PUInt32(Left)^ div PUInt32(Right)^; end;
procedure lpeUInt32_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) div Int64(PInt32(Right)^); end;
procedure lpeUInt32_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := UInt64(PUInt32(Left)^) div UInt64(PUInt64(Right)^); end;
procedure lpeUInt32_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt32(Left)^ := Int64(PUInt32(Left)^) div Int64(PInt64(Right)^); end;
//procedure lpeUInt32_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt32(Left)^ / PSingle(Right)^; end;
//procedure lpeUInt32_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt32(Left)^ / PDouble(Right)^; end;
//procedure lpeUInt32_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt32(Left)^ / PCurrency(Right)^; end;
//procedure lpeUInt32_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt32(Left)^ / PExtended(Right)^; end;
//procedure lpeUInt32_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt32(Left)^ / PVariant(Right)^; end;
procedure lpeInt32_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ div PUInt8(Right)^; end;
procedure lpeInt32_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ div PInt8(Right)^; end;
procedure lpeInt32_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ div PUInt16(Right)^; end;
procedure lpeInt32_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ div PInt16(Right)^; end;
procedure lpeInt32_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := Int64(PInt32(Left)^) div Int64(PUInt32(Right)^); end;
procedure lpeInt32_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := PInt32(Left)^ div PInt32(Right)^; end;
procedure lpeInt32_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := UInt64(PInt32(Left)^) div UInt64(PUInt64(Right)^); end;
procedure lpeInt32_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt32(Left)^ := Int64(PInt32(Left)^) div Int64(PInt64(Right)^); end;
//procedure lpeInt32_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt32(Left)^ / PSingle(Right)^; end;
//procedure lpeInt32_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt32(Left)^ / PDouble(Right)^; end;
//procedure lpeInt32_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt32(Left)^ / PCurrency(Right)^; end;
//procedure lpeInt32_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt32(Left)^ / PExtended(Right)^; end;
//procedure lpeInt32_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt32(Left)^ / PVariant(Right)^; end;
procedure lpeUInt64_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ div PUInt8(Right)^; end;
procedure lpeUInt64_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ div PInt8(Right)^; end;
procedure lpeUInt64_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ div PUInt16(Right)^; end;
procedure lpeUInt64_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ div PInt16(Right)^; end;
procedure lpeUInt64_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ div PUInt32(Right)^; end;
procedure lpeUInt64_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ div PInt32(Right)^; end;
procedure lpeUInt64_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := PUInt64(Left)^ div PUInt64(Right)^; end;
procedure lpeUInt64_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PUInt64(Left)^ := Int64(PUInt64(Left)^) div Int64(PInt64(Right)^); end;
//procedure lpeUInt64_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PUInt64(Left)^ / PSingle(Right)^; end;
//procedure lpeUInt64_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PUInt64(Left)^ / PDouble(Right)^; end;
//procedure lpeUInt64_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PUInt64(Left)^ / PCurrency(Right)^; end;
//procedure lpeUInt64_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PUInt64(Left)^ / PExtended(Right)^; end;
//procedure lpeUInt64_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PUInt64(Left)^ / PVariant(Right)^; end;
procedure lpeInt64_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ div PUInt8(Right)^; end;
procedure lpeInt64_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ div PInt8(Right)^; end;
procedure lpeInt64_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ div PUInt16(Right)^; end;
procedure lpeInt64_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ div PInt16(Right)^; end;
procedure lpeInt64_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ div PUInt32(Right)^; end;
procedure lpeInt64_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ div PInt32(Right)^; end;
procedure lpeInt64_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ div PUInt64(Right)^; end;
procedure lpeInt64_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PInt64(Left)^ := PInt64(Left)^ div PInt64(Right)^; end;
//procedure lpeInt64_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PInt64(Left)^ / PSingle(Right)^; end;
//procedure lpeInt64_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PInt64(Left)^ / PDouble(Right)^; end;
//procedure lpeInt64_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PInt64(Left)^ / PCurrency(Right)^; end;
//procedure lpeInt64_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PInt64(Left)^ / PExtended(Right)^; end;
//procedure lpeInt64_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PInt64(Left)^ / PVariant(Right)^; end;
procedure lpeSingle_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PUInt8(Right)^; end;
procedure lpeSingle_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PInt8(Right)^; end;
procedure lpeSingle_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PUInt16(Right)^; end;
procedure lpeSingle_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PInt16(Right)^; end;
procedure lpeSingle_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PUInt32(Right)^; end;
procedure lpeSingle_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PInt32(Right)^; end;
procedure lpeSingle_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PUInt64(Right)^; end;
procedure lpeSingle_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PInt64(Right)^; end;
procedure lpeSingle_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PSingle(Right)^; end;
procedure lpeSingle_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PDouble(Right)^; end;
//procedure lpeSingle_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PSingle(Left)^ / PCurrency(Right)^; end;
procedure lpeSingle_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PSingle(Left)^ := PSingle(Left)^ / PExtended(Right)^; end;
//procedure lpeSingle_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PSingle(Left)^ / PVariant(Right)^; end;
procedure lpeDouble_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PUInt8(Right)^; end;
procedure lpeDouble_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PInt8(Right)^; end;
procedure lpeDouble_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PUInt16(Right)^; end;
procedure lpeDouble_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PInt16(Right)^; end;
procedure lpeDouble_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PUInt32(Right)^; end;
procedure lpeDouble_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PInt32(Right)^; end;
procedure lpeDouble_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PUInt64(Right)^; end;
procedure lpeDouble_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PInt64(Right)^; end;
procedure lpeDouble_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PSingle(Right)^; end;
procedure lpeDouble_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PDouble(Right)^; end;
//procedure lpeDouble_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PDouble(Left)^ / PCurrency(Right)^; end;
procedure lpeDouble_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PDouble(Left)^ := PDouble(Left)^ / PExtended(Right)^; end;
//procedure lpeDouble_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PDouble(Left)^ / PVariant(Right)^; end;
procedure lpeCurrency_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PUInt8(Right)^; end;
procedure lpeCurrency_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PInt8(Right)^; end;
procedure lpeCurrency_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PUInt16(Right)^; end;
procedure lpeCurrency_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PInt16(Right)^; end;
procedure lpeCurrency_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PUInt32(Right)^; end;
procedure lpeCurrency_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PInt32(Right)^; end;
procedure lpeCurrency_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PUInt64(Right)^; end;
procedure lpeCurrency_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PInt64(Right)^; end;
procedure lpeCurrency_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PSingle(Right)^; end;
procedure lpeCurrency_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PDouble(Right)^; end;
procedure lpeCurrency_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PCurrency(Right)^; end;
procedure lpeCurrency_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PCurrency(Left)^ / PExtended(Right)^; end;
//procedure lpeCurrency_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PCurrency(Left)^ / PVariant(Right)^; end;
procedure lpeExtended_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PUInt8(Right)^; end;
procedure lpeExtended_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PInt8(Right)^; end;
procedure lpeExtended_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PUInt16(Right)^; end;
procedure lpeExtended_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PInt16(Right)^; end;
procedure lpeExtended_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PUInt32(Right)^; end;
procedure lpeExtended_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PInt32(Right)^; end;
procedure lpeExtended_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PUInt64(Right)^; end;
procedure lpeExtended_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PInt64(Right)^; end;
procedure lpeExtended_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PSingle(Right)^; end;
procedure lpeExtended_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PDouble(Right)^; end;
//procedure lpeExtended_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PCurrency(Left)^ := PExtended(Left)^ / PCurrency(Right)^; end;
procedure lpeExtended_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PExtended(Left)^ := PExtended(Left)^ / PExtended(Right)^; end;
//procedure lpeExtended_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PExtended(Left)^ / PVariant(Right)^; end;
procedure lpeVariant_DIVASGN_UInt8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PUInt8(Right)^; end;
procedure lpeVariant_DIVASGN_Int8(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PInt8(Right)^; end;
procedure lpeVariant_DIVASGN_UInt16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PUInt16(Right)^; end;
procedure lpeVariant_DIVASGN_Int16(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PInt16(Right)^; end;
procedure lpeVariant_DIVASGN_UInt32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PUInt32(Right)^; end;
procedure lpeVariant_DIVASGN_Int32(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PInt32(Right)^; end;
procedure lpeVariant_DIVASGN_UInt64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PUInt64(Right)^; end;
procedure lpeVariant_DIVASGN_Int64(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PInt64(Right)^; end;
procedure lpeVariant_DIVASGN_Single(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PSingle(Right)^; end;
procedure lpeVariant_DIVASGN_Double(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PDouble(Right)^; end;
procedure lpeVariant_DIVASGN_Currency(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PCurrency(Right)^; end;
procedure lpeVariant_DIVASGN_Extended(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PExtended(Right)^; end;
procedure lpeVariant_DIVASGN_Variant(const Dest, Left, Right: Pointer); {$IFDEF Lape_CDECL}cdecl;{$ENDIF} begin PVariant(Left)^ := PVariant(Left)^ / PVariant(Right)^; end;
